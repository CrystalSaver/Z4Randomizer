{"version":3,"sources":["data/Graphics/GraphicsLink.bin","data/Graphics/GraphicsAgesGirl.bin","data/Graphics/GraphicsBowwow.bin","data/Graphics/GraphicsBunny.bin","data/Graphics/GraphicsKirby.bin","data/Graphics/GraphicsMarin.bin","data/Graphics/GraphicsMario.bin","data/Graphics/GraphicsMartha.bin","data/Graphics/GraphicsMeme.bin","data/Graphics/GraphicsRichard.bin","data/Graphics/GraphicsRooster.bin","data/Graphics/GraphicsSubrosian.bin","data/Graphics/GraphicsTarin.bin","app/serviceWorker.js","utilities.js","data/Constants/uAddresses.js","data/Constants/uConstants.js","data/Read/Chests.js","data/Read/ReadRom.js","data/Randomize/DEVELOPER/CharacterSpeedUp.js","data/Read/Sprites.js","data/Randomize/DEVELOPER/NewChestCode.js","data/Randomize/DEVELOPER/MapWarpToStart.js","data/Randomize/DEVELOPER/RemoveOwls.js","data/Randomize/DEVELOPER/CoreChanges.js","data/Randomize/DEVELOPER/FileSelectCode.js","data/Randomize/DEVELOPER/NoModifiedFiles.js","data/Randomize/DEVELOPER/RemoveUW0TileProperties.js","data/Randomize/DEVELOPER/RemoveUW1TileProperties.js","data/Randomize/DEVELOPER/RemoveUW2TileProperties.js","data/Read/RoomData.js","data/Read/RoomTiles.js","data/Randomize/RandomizeUtil.js","data/Randomize/ENEMY/DuplicateBosses.js","data/Randomize/ENEMY/EnemyDamage.js","data/Randomize/ENEMY/MiscDamage.js","data/Randomize/ENEMY/RemoveForceBarrier.js","data/Randomize/ENEMY/ShuffleBosses.js","data/Randomize/GENERAL/ChangeRequiredInstruments.js","data/Randomize/GENERAL/MoveWalrus.js","data/Randomize/GENERAL/RemoveQuickSandTransition.js","data/Randomize/GENERAL/RoosterCaveNoTransitions.js","data/Randomize/GENERAL/ShufflePitsGrassRocks.js","data/Randomize/EXTRA/AddInstantTransferCaves.js","data/Randomize/EXTRA/AddOverworldModifications.js","data/Randomize/EXTRA/ExtraBoots.js","data/Randomize/EXTRA/ExtraBow.js","data/Randomize/EXTRA/ExtraFeather.js","data/Randomize/EXTRA/ExtraFirerod.js","data/Randomize/EXTRA/ExtraFlippers.js","data/Randomize/EXTRA/ExtraHookshot.js","data/Randomize/EXTRA/ExtraMirrorShield.js","data/Randomize/EXTRA/ExtraOcarina.js","data/Randomize/EXTRA/ExtraPowerBraceletL1.js","data/Randomize/EXTRA/ExtraPowerBraceletL2.js","data/Randomize/EXTRA/ExtraShovel.js","data/Randomize/EXTRA/RemoveCaveObstacles.js","data/Randomize/ITEMS/Chests/AddCaveAboveCastle.js","data/Randomize/ITEMS/Chests/AddChestCastleHeart.js","data/Randomize/ITEMS/Chests/AddChestInColorDungeon.js","data/Randomize/ITEMS/Chests/AddOverworldKeysInChests.js","data/Randomize/ITEMS/Chests/ChestInLinksHouse.js","data/Randomize/ITEMS/Chests/HiddenShellsAsChests.js","data/Randomize/ITEMS/AddSeashells.js","data/Randomize/ITEMS/NoStealing.js","data/Read/Submap.js","data/Randomize/ITEMS/ShuffleChests.js","data/Read/Events.js","data/Randomize/ITEMS/ShuffleHeartPieces.js","data/Randomize/ITEMS/ShuffleSeashellReq.js","data/Randomize/ITEMS/ShuffleShopItems.js","data/Randomize/ITEMS/ShuffleShopPrices.js","data/Randomize/ITEMS/SwordInChest.js","data/Randomize/ITEMS/UpgradeRupeeChests.js","data/Randomize/MISC/Blackout.js","data/Read/Graphics.js","data/Randomize/MISC/FunPercent.js","data/Randomize/MISC/LinkSprite.js","data/Randomize/MISC/RemoveAcornPoPDelay.js","data/Randomize/MISC/RemoveChestDialog.js","data/Randomize/MISC/RemoveLowHealthBeep.js","data/Randomize/MISC/RemoveSwordlessMusic.js","data/Randomize/MISC/RemoveText.js","data/Randomize/MISC/ShuffleDungeonPalettes.js","data/Randomize/MISC/ShuffleMusic.js","data/Client/state.js","data/Client/Client.js","data/Visualizer/GameBoardMapping.js","data/Visualizer/RoomSquares.js","data/Visualizer/VisualizerData.js","data/Visualizer/client/other/uConstants.js","data/Visualizer/client/other/uDraw.js","data/Visualizer/client/other/utilities.js","data/Visualizer/client/other/uCanvasEvents.js","data/Visualizer/client/init/StartTiles.js","data/Visualizer/client/main/Finish.js","data/Visualizer/client/Logic/pieces/AllowMovement.js","data/Visualizer/client/Logic/pieces/ChestLogic.js","data/Visualizer/client/Logic/pieces/EventLogic.js","data/Visualizer/client/Logic/pieces/FeatherLogic.js","data/Visualizer/client/Logic/pieces/HookshotLogic.js","data/Visualizer/client/Logic/pieces/SpriteLogic.js","data/Visualizer/client/Logic/pieces/TransitionLogic.js","data/Visualizer/client/Logic/DoCurrentLogic.js","data/Visualizer/client/Logic/pieces/SmallKeyDropLogic.js","data/Visualizer/client/Logic/DoNextLogic.js","data/Visualizer/client/Logic/pieces/MinidungeonLogic.js","data/Visualizer/client/Logic/pieces/FirerodLogic.js","data/Visualizer/client/Logic/pieces/BowLogic.js","data/Visualizer/client/Logic/pieces/RoosterLogic.js","data/Visualizer/client/Logic/pieces/TileTypeLogic.js","data/Visualizer/client/Logic/Go.js","data/Visualizer/client/main/RunIt.js","data/Visualizer/client/main/Loop.js","data/Visualizer/client/main/KeepGoing.js","data/Visualizer/client/main/Run.js","data/Visualizer/client/init/Setup.js","data/Generate.js","data/Client/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","clone","data","JSON","parse","stringify","isBetween","x","min","max","createArray","dim","bounds","defaultVal","_arr","undefined","len","slice","reverse","i","create2DArray","rowCount","columnCount","IntToHex","n","padding","Number","toString","toUpperCase","padStart","IntToStr","HexToInt","s","parseInt","StrToInt","LowNibble","b","charAt","HighNibble","LeftPad","value","length","pad","RandomRange","Math","ceil","floor","random","GBGetPos","arr","GBShuffle","count","i1","i2","temp","StringOfBytesToByteArray","trim","split","map","StringOfBytesTo2DHexArray","maxY","maxX","y","replace","StringOfBytesTo1DHexArray","arr2","ConvertToBase2","baseFrom","baseTo","flagBase","flagNumber","BigInt","flagString","indexOf","GetBankAddress","bank","address","RoomExists","uwID","roomID","result","GetCodeImage","arr1","arr3","arr4","Error","RandomizeDamageValue","original","minDamage","maxDamage","randDamage","newDamage","Transpose8By8Graphic","j","sArr1","sArr2","GetUWID","uwIDArr","xx","trunc","GetRoomID","roomIDArr","boss_AddrArr","boss_SpirteSetAddrArr1_V0","boss_SpirteSetAddrArr2_V0","boss_SpirteSetAddrArr1_V2","boss_SpirteSetAddrArr2_V2","TDataAddresses","enemy_byteArr","enemy_changeArr","LA_TILE_GRASS","LA_TILE_KEYHOLE","LA_TILE_TRANSITION0","LA_TILE_TRANSITION1","LA_TILE_PIT","LA_TILE_Chest1","LA_TILE_Chest2","LA_TILE_POT","LA_TILE_PITTRANSITION1","LA_TILE_PITTRANSITION2","LA_TILE_PITTRANSITION3","LA_TILE_PITTRANSITION4","LA_TILE_MINIDUNGEONHEAD1","LA_TILE_MINIDUNGEONHEAD2","LA_TILE_BLOCK","LA_TILE_PUSHBLOCK","LA_TILE_DUNGEON_ENTRANCE","Z4_TILETYPE","Z4_DUNGEONNUMBER","Z4_MAPCATEGORY","Z4_ROOMTYPES","Z4_ConnectorTYPES","LA_TILESET_PITTRANSITIONS","LA_ADDRESSES_CHESTS","LA_BOMB","LA_50Rupees","LA_20Rupees","LA_100Rupees","LA_200Rupees","LA_500Rupees","LA_SeaShell","LA_ITEMS_DUNGEONONLY_SET","LA_ITEMS_OVERWORLD_KEYS","LA_ITEMS_DUNGEONUNIQUE_SET","GetChestContentName","chestID","GetChestAddress","startAddr","addr","console","error","GetChestContent","f","ReadByteFromFile","SetChestContent","WriteBytesToFile","ReadBytesFromFile","amount","push","WriteBytesToFileVersion","addr0","addr2","GetROMVersion","GetBankStartAddress","GetChecksum","b1","b2","ADDR_ROM_CHECKSUM","SetChecksum2","ROM_LENGTH","sum","sumText","GetImportantShopItems","EquipItemToChestItem","shovelSlot","bowSlot","CharacterSpeedUp","LA_Sprite_Overworld","LA_Sprite_Underworld1","LA_Sprite_Underworld2","LA_Sprite_ColorDungeon","GetSpritePointer","s1","s2","GetSpriteStartAddress","pAddr","GetSpriteObjects","sprite","yx","id","GetSpriteInformation","pointer","endAddr","currAddr","GetSpriteEndAddress","hasHeartPiece","spriteID","HasSpriteID","ReadSprite","o","WriteSprite","WriteSpriteID","newID","WriteSpriteXY","newYX","ReplaceSprite","newSpriteID","NewChestCode","chestArr","SETROOM10","chest00_POWERBRACELET","chest01_SHIELD","chest02_Bow","chest03_Hookshot","chest04_Firerod","chest05_Boots","chest06_Ocarina","chest07_Feather","chest08_Shovel","chest09_POWDER","chest0A_BOMB","chest0B_SWORD","chest0C_FLIPPERS","chest0D","chest0E","chest0F","chest10_Medicine","chest11_TAILKEY","chest12_ANGLARKEY","chest13_FACEKEY","chest14_BIRDKEY","chest15_GOLDENLEAF","chest16_MAP","chest17_COMPASS","chest18_BEAK","chest19_NIGHTMAREKEY","chest1A_SMALLKEY","chest1B_20RUPEE","chest1C_50RUPEE","chest1D_100RUPEE","chest1E_200RUPEE","chest1F_500RUPEE","chest20_SEASHELL","chest21_HOOKSHOTNOTE","chest22_GEL","chest23_CUSTOM1","chest24_CUSTOM1","chest25_CUSTOM1","chest26_CUSTOM1","chest27_CUSTOM1","chest28","chest29","chest2A","chest00_Address","chest01_Address","chest02_Address","chest03_Address","chest04_Address","chest05_Address","chest06_Address","chest07_Address","chest08_Address","chest09_Address","chest0A_Address","chest0B_Address","chest0C_Address","chest0D_Address","chest0E_Address","chest0F_Address","chest10_Address","chest11_Address","chest12_Address","chest13_Address","chest14_Address","chest15_Address","chest16_Address","chest17_Address","chest18_Address","chest19_Address","chest1A_Address","chest1B_Address","chest1C_Address","chest1D_Address","chest1E_Address","chest1F_Address","chest20_Address","chest21_Address","chest22_Address","chest23_Address","chest24_Address","chest25_Address","chest26_Address","chest27_Address","chest28_Address","chest29_Address","chest2A_Address","GetAddress","arr_HandleChestID","arrAA","bank3Addr","bank0Addr","bank14Addr","bank20Addr","bank3EAddr","MapWarpToStart","RemoveOwls","CoreChanges","FileSelectCode","code","NoModifiedFiles","checksum","RemoveUW0TileProperties","includes","RemoveUW1TileProperties","RemoveUW2TileProperties","GetTileType","RoomData_Overworld_TOP","RoomData_Overworld_BOTTOM","RoomData_Underworld1","RoomData_ColorDungeon","RoomData_Underworld2","GetRoomDataPointer","GetRoomDataSpecialAddress","GetRoomDataEndAddress","GetRoomDataStartAddress","special","GetRoomDataAddresses","specialStartAddr","specialEndAddr","specialLength","GetRoomObjectByAddress","RO","b3","b4","b5","type","debug","animation","floorTile","wallTile","viewID","subMapID","spanX","spanY","GetRoomDataObjects","addresses","GetRoomDataInfoObjects","roomDataOL","GetRoomDataSquares","SquareExists","squareNodes","GetSquare","DrawTopWall","tileType","DrawRightWall","DrawBottomWall","DrawLeftWall","DrawWalls","wallTilesID","FillOverworldDefaultSquares","floorRow","FillDungeonDefaultSquares","FillActualSquares","startX","startY","amountX","amountY","square","FillSquareInfo","isHouse","FillRoomInfoSquares","forEach","FillTransitionHacks","transition","roomX","roomY","DetermineIfTransition","isTransition","FillTransitionsFromData","square2","transitionDataArr","filter","transitionTileArr","splice","mapCategory","log","shift","ROOM_SIZE_X","ROOM_SIZE_Y","GetRoomDataGameBoardSquares","hexID","dungeonNum","roomType","connectorType","GetRoomObjectByID","GetRoomObjectByYXID","SetRoomObject","RoomObject","RoomObject2","SetRoomObjects","RoomObjectsOL","ReplaceRoomObject","roomDataOLFiltered","CreateRoomObject","RemoveRoomObject","AddRoomObject","GetRoomTileGraphicsAddress","ReplaceRoomTileGraphicByRoomObject","replaceSet","WriteRoomTile","ShuffleNewUniqueItem2","chestContent","randNumber","ReplaceBoss","bossNum","spriteSet","spriteAddr","spriteSetAddrs","byteArr","GetBossSpriteID","GetBossSpriteSet","GetBossSpriteAddr","GetBossSpriteSetAddresses","ShiftArrayLeft","ReplaceSpriteWithChest","ReplaceRoomObjectWithChest","RoomInfoObject","modifyYX","newRO","DuplicateBosses","isGood","ShuffleEnemyDamage","deathlArms","CustomEnemyDamage","EnemyDamage","itemIndex","CustomMiscDamage","damage","PitsOHKO","LavaOHKO","SpikesOHKO","MiscDamage","RemoveForceBarrier","ShuffleBosses","temp1","temp2","ChangeRequiredInstruments","requiredInstruments","MoveWalrus","RemoveQuickSandTransition","RoosterCaveNoTransitions","ShufflePitsGrassRocks","AddInstantTransferCaves","AddOverworldModifications","ExtraBoots","ExtraBow","ExtraFeather","ExtraFirerod","ExtraFlippers","ExtraHookshot","ExtraMirrorShield","ExtraOcarina","ExtraPowerBraceletL1","ExtraPowerBraceletL2","ExtraShovel","RemoveCaveObstacles","AddCaveAboveCastle","AddChestCastleHeart","AddChestInColorDungeon","AddOverworldKeysInChests","ChestInLinksHouse","HiddenShellsAsChests","AddSeashells","NoStealing","LA_SUBMAP_CAVES","LA_SubmapDefinitions","LA_SUBMAP_DUNGEON_SET","GetUWIDFromSubmapID","GetSubMapRoomID","submapID","idx","GetSubMapAddress","GetSubMapID","ShuffleUniqueChests","randNum1","randNum2","val1","val2","mapping","ChestSoftRules","ShuffleDungeonChests","ShuffleAllChests","fb","fbw","fr","fh","ShuffleChests","GetEventAddress","GetEventContent","ReplaceHeartContainerWithChest","replace_uwID","replace_roomID","ol","eventID","RO1","RO2","chestMapping","loop_uwID","loop_roomID","newAddr","bytesAvailable","yxChestPosition","RAM_FlagUWID","e","SetEventContent","SetSpritePointer","ShuffleHeartPieces","ShuffleSeashellReq","randNum","ShuffleShopItems","equipItem00","equipItem04","item00GraphicIdx","item04GraphicIdx","found","ChooseRandomItem","selectedItem","graphicIdx","equipItem","ShuffleShopPrices","itemPrice0Hi","itemPrice1Hi","itemPrice2Hi","itemPrice3Hi","itemPrice4Hi","itemPrice5Hi","itemPrice0Lo","itemPrice1Lo","itemPrice2Lo","itemPrice3Lo","itemPrice4Lo","itemPrice5Lo","itemPrice00","itemPrice01","itemPrice02","itemPrice03","itemPrice04","itemPrice05","NumberToTextByte","PriceToText","PriceToPriceCode","hi","lo","itemPriceStr00","itemPriceStr01","itemPriceStr02","itemPriceStr03","itemPriceStr04","itemPriceStr05","itemPriceHiNeeded00","itemPriceHiNeeded01","itemPriceHiNeeded02","itemPriceHiNeeded03","itemPriceHiNeeded04","itemPriceHiNeeded05","itemPriceLoNeeded00","itemPriceLoNeeded01","itemPriceLoNeeded02","itemPriceLoNeeded03","itemPriceLoNeeded04","itemPriceLoNeeded05","SwordInChest","UpgradeRupeeChests","Blackout","currPointer","pointerAddr","TransposeGraphic","temp4","temp3","FunPercent","transposed8By8_1","transposed8By8_2","a","filePath","Link","AgesGirl","Bowwwow","Bunny","Kirby","Marin","Mario","Martha","Meme","Richard","Rooster","Subrosian","Tarin","axios","get","responseType","headers","response1","uint8","Uint8Array","LinkSprite","RemoveAcornPoPDelay","RemoveChestDialog","RemoveLowHealthBeep","RemoveSwordlessMusic","GetStringDetails","allZeros","yesNoQuestion","endStrAddr","ShortenText","SetStringChanges","customYesNo","RemoveText","ShuffleDungeonPalettes","MusicShuffle","pos","originalArr","modifiedArr","state","ShuffleEntrances","tooltip","fn","RandomizerFunctions","needSanity","AddCaveAboveCastleCheckBox","CastleHeartChest","BlackOut","ShuffleMusic","ignoreFlags","disabled","SanityChecks","Select2","props","items","onChange","title","style","width","key","Checkbox2","checkedItems","rest","styles","div","marginBottom","fontSize","fontFamily","color","name","checked","InlineBlock","display","verticalAlign","marginRight","children","Block","Title","fontWeight","Text","text","Button","button","marginLeft","Client","userState","onGenerate","useState","file","setFile","fileName","setFileName","seed","setSeed","flags","setFlags","setCheckedItems","disableGenerate","setDisableGenerate","onCheckboxChange","target","useEffect","possible","prop","hasOwnProperty","value1","max1","ConvertStateToFlags","tabs","height","overflow","tab","paddingTop","paddingLeft","subCheckbox","border","margin","position","background","className","src","alt","float","readOnly","onClick","document","getElementById","click","accept","files","reader","FileReader","onload","readAsArrayBuffer","isNaN","newCheckedItems","obj","call","reverseForIn","Remainder","ConvertFlagsToState","defaultSelectedIndex","label","selectedIndex","bottom","left","right","borderTop","alert","finishFn","setTimeout","GameBoardMapping","GameBoardMappingRoomID","GameBoardMappingUWID","GetEmptyRoomSquares","GetRoomSquares","arr11","sprites","VisualizerData","gameSquares","chestSquares","events","subMapIDsArr","mapCategories","connectorTypes","roomTypes","roomSquares","newX","newY","setX","setY","y2","x2","tileTypes","tileIDs","transitions","shovelSlotItem","bowSlotItem","Z4_TILE_TRANS","Z4_TILE_SOLID","Z4_TILE_PIT","Z4_TILE_FLIPPERS","Z4_TILE_PUSHABLEBLOCK","Z4_TILE_LEDGE","Z4_TILE_GRASS","Z4_TILE_RIVERRAPID","Z4_TILE_ORBBLOCK1","Z4_TILE_ORBBLOCK2","Z4_TILE_PITTRANSITION","LA_ITEMS_PROGRESSIVE_SET","LA_SPRITE_COLOR_SPINNER_RED","LA_SPRITE_COLOR_SPINNER_GOLD","LA_SPRITE_COLOR_SPINNER_BLUE","LA_ENEMIES_KILLABLE_SET","LA_SPRITES_IMPASSABLE_SET","DUNGEONS_SUBMAP_SET","FillSubmap","canvas","p","w","h","ctx","getContext","fillStyle","fillRect","FillRooms","GAMEBOARD_ROOMS_X","GAMEBOARD_ROOMS_Y","FillTiles","maxXSquares","maxYSquares","x1","y1","OutlineTiles","translate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","stroke","closePath","OutlineRooms","FillTile","FillImage","drawing","drawImage","FillGameBoardFull","tileTypesArr","opacityHexStr","getTileTypeStyles","FillGameBoardSprites","spritesArr","FillGameBoardFilterTileTypes","FillGameBoardFilterTileIDs","tileIDsArr","FillGameBoardFilterMapCategories","mapCategoriesArr","FillGameBoardFilterSprites","FillGameBoardFilterTransitions","transitionsArr","FillGameBoardFilterTransitionsData","transitionsDataArr","FillGameBoardFilterChests","FileGameBoardChestItems","GetImageSrc","GetCoordiantesOfRoom","yy","Image","drawing2","Assigned","v","getDelphiColorToHex","hexString","TileExists","GetRoomInfo","GetMapCategory","TileInSameRoom","uwID_next","roomID_next","uwID_curr","roomID_curr","y3","x3","GetSpriteInfoFromRoom","spriteStateArr","ID","killable","GetTileTypesFromRoom","stateArr","GetTileIDsFromRoom","AddCompleted","data_props","completed","AddVisited","allowedTileType","visited","revisit","find","found2","found3","hasTransNext","AddRevisit","reason","blockedReason","blockedItems","DoesPlayerHaveItem","NewItems","powerBracelet","shield","bow","hookshot","fireRod","boots","ocarina","feather","shovel","powder","bomb","sword","flippers","medicine","tailKey","anglarKey","faceKey","birdKey","seashell","CanvasEventsAreSet","InitCanvasEvents","addEventListener","event","eventLocation","evt","rect","getBoundingClientRect","clientX","clientY","top","getMousePos","squareX","squareY","innerHTML","preventDefault","StartTiles","Finish","message","reasons","reasons2","blockedReasons","GLOBAL_PROPS","AllowMovement","d","roomX_curr","roomY_curr","tileID","tileID_next","allow","hasBlock","D7Pillar","handled","dungeonItems","nKey","anglarKeyUsed","faceKeyUsed","birdKeyUsed","instrument","AddChestContent","subMapIDArr","chestsOpened","other","keys","slimeKey","compass","owlBeak","smallKey","smallKeyFound","rupees","seaShell","hookshotNote","gel","AddChestContent2","EventLogic","eventsStateArr","eventsArr","trigger","triggerResult","boomerang","spriteID_next","SpriteLogic","bossKilled","FeatherMore","added","result1","result2","result3","d3","x4","y4","d4","x5","y5","d5","FeatherAgain","d2","spriteState","HandleImpassableSprite","HandleSolid","HandleTransparent","HandleGrass","HandleSpecialGrass","HandlePartSolid","HandleOrbBlock1","HandleOrbBlock2","HookshotUpLogic","hookshotableUW0","hookshotableUW123","tileID2","tileType2","state3","tileType3","HookshotDownLogic","HookshotLeftLogic","HookshotRightLogic","spriteState_next","HandleOctorock","HandleMoblin","HandleTektite","HandleLeever","HandleArmos","HandleSeaOrchin","HandleLikeLike","HandleShark","HandleSmallRedGel","HandleHardHatBettle","HandleKeese","HandleStalfosRunAway","HandleGreenGelHidden","HandleRedGel","HandleCrab","HandleMoblinSword","HandleGhost","HandleKingMoblin","HandleBuzzBlob","HandleMiniMoldorm","HandleDeckOfCards","HandleSpikeyBeetle","HandleStalfos2","HandlePowderOnWings","HandleTrackingGhost","HandlePolsVoice","HandleColorSlime1","HandleColorSlime2","HandleColorSlime3","HandleSoldierInWall","HandleColorOrbGreen","HandleColorOrbRed","HandleColorOrbGold","HandleColorGolem","HandleColorBoss","HandleBombEnemy","HandleBombStalkerEnemy","HandlePariodd","HandleCactusEnemy","HandleWaterTekTite","HandlePeaHat","HandleRope","HandleVire","HandleGibdo","HandleStalfosThrower","HandleStarEnemy","HandleWizzRobe","HandleAntiKirby","HandleGoomba","HandleSwampFlower_L","HandleSwampFlower_S","HandleMadBomber","HandleBallAndChainTrooper","HandleFlameThrower","HandleCrow","HandleAntiVacuum","HandleArmMimic","HandleMoldormBoss","HandleGenieBoss","HandleSlimeEyeBoss","HandleFishBoss","HandleSlimeEelBoss","HandleFacadeBoss","HandleEvilEagleBoss","HandleHotHeadBoss","HandleDeathlBoss","HandleColorBuzzBlobBoss","HandleMiniBoss","HandleMasterStalfos","HandleLanmola","HandleArmosMiniboss","HandleTurtleRockSnake","HandleMotherWithBaby","HandleMiniBowwow","HandleCrocodile","HandleKikiTheMonkey","HandleTarinWithBees","HandleBearChef","HandlePapahl","HandleChristineAndMrWrite","HandleGrandma","HandleFisherMan","HandleMermaid","HandleMermaidStatue","HandleMagnifyingLens","HandleTarin","HandleRichard","HandleMarin","HandleMambo","HandleMamu","HandleWitch","HandleTrendyNPC","HandleShopNPC","HandleWalrus","HandleMadamMeowMeow","HandleBowwow","HandleBeachMarin","HandleNPCMoblin","HandleSword","HandleSlimeKeyHidden","HandleInstrument","HandleHeartPiece","HandleBombHidden","HandlePowderHidden","HandleKey","HandleMushroom","HandleElephantStatue","HandleRoosterStatueAndSkeleton","HandleRaft","HandleEyeBlock","HandleCrystalOrb","HandleDungeonOwlStatus","HandleD7Pillar","HandleSeashellHidden","HandleMadBatterWell","HandleColorSpinnerRed","HandleColorSpinnerBlue","HandleColorSpinnerGold","HandlePullLever","HandleHorseHead","HandlePot","HandleTwomp","HandleLeftRightPlatform","HandleUpDownPlatform","HandlePotPlatform","HandlePlant","HandleTwomp2","HandleFish1","HandleFish2","HandleFish3","HandleWeight","HandleJellyFish","HandleNothing","HandleD4D7Boss","mushroom","gameCompleted","goldenLeaves","heartPieces","songs","song2","racoonTarin","song1","song3","mushroomFlag","trading","yoshiDoll","rooster","pineapple","hibiscus","letter","broom","fishingHook","necklace","magnifyingLens","marin","marinReturned","bowwow","bowwowReturned","MStalfosKills","CheckForLava","allowed","ribbon","dogFood","bananas","stick","honeycomb","scale","TransitionLogic","tileType_curr","disableTransitions","coord","xx2","yy2","DoCurrentLogic","currentTile_props","spriteID_curr","spriteState_curr","tileID_curr","state_curr","mapCategory_curr","eventProps","chestStateArr","ChestLogic","SmallKeyDropLogic","tileType_next","state_next","castleButtonPressed","DoNextLogic","nextTile_props","roomX_next","roomY_next","mapCategory_next","disableRoomChange","MinidungeonLogic","FirerodLogic","BowLogic","RoosterFly","pitArr","transparentArr","grassArr","feathableTileTypes","FinishRoosterFly","transparentArrFiltered","grassArrFiltered","RoosterLogic","HookshotLogic","FeatherLogic","tileType1","smallKeyUsed","LockedDoorsArr","HandleKeyLocked","HandleDoorClosed","HandleBombable","HandleSwordable","HandleWater","HandlePushblock","fiveChestRoomOpened","HandleChest","HandleOneWayTop","HandleStrangeObject","HandleLedge","tailKeyUsed","slimeKeyUsed","HandleKeyHole","HandleUpDownOnly","HandleIceCube","HandleUnlitTorch","HandleNightmareDoor","HandleDungeonGate","HandleTombstone","TileTypeLogic","Go","RunIt","amountDraw","rounds","findIndex","Loop","maxRounds","pastVisited","pastRevisit","pastCompleted","newVisited","newRevisit","newCompleted","KeepGoing","requestAnimationFrame","running","t0","t1","performance","now","toFixed","Run","dynamicChestContent","output","availableChests","requiredItems","placableItems","Set","excludeItems","attempt","progessiveItems","swapX","swapY","MainSanity","allData","useVisualizerUI","shuffleChests","createElement","FillGameBoard","FillSprites","filterTileID","filterTileType","sanity","filterMapCategory","filterSpriteID","ShowTransitions","ShowTransitionsData","GameBoardOpacity","ShowChests","ShowChestContent","roomTypesArr","connectorTypesArr","ghost","richard","visitedAmount","visitedCheckCount","gameBoardOpacity","seedrandom","global","Object","entries","origState","doShuffleChests","status","Generate","App","maxAttempts","onDownloadFile","version","downloadURL","href","download","body","appendChild","remove","mimeType","blob","url","Blob","URL","createObjectURL","revokeObjectURL","downloadBlob","Fragment","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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I,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAE5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAE5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAE5D,GAAI,EAAI,GAAI,EAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAC5D,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,GAAI,EAC5D,GAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAE9D,CAEE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,GAC5D,EAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,GAAI,GAE5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,GAAI,GAAI,GAAI,GAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAE5D,EAAI,EAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAC5D,GAAI,GAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAAI,GAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,GAC5D,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,GAAI,GAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,GAAI,EAAI,GAAI,EAAI,GAE9D,CAEE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,GAC5D,EAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,GAAI,GAE5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,GAAI,GAAI,GAAI,GAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAE5D,EAAI,EAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAC5D,GAAI,GAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAAI,GAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,GAC5D,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,GAAI,GAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,GAAI,EAAI,GAAI,EAAI,GAE9D,CAEE,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,GAE5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAE5D,EAAI,EAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAC5D,GAAI,GAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAAI,GAAI,EAAI,GAAI,EAAI,EAAI,EAAI,EAAI,GAC5D,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,EAAI,EAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,GAAI,GAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,GAAI,GAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAC5D,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAI,EAAI,EAAI,GAAI,EAAI,GAAI,EAAI,IAuBrDC,GAAmB,CAC5B,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAClE,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,GAAM,GAAI,GAAI,GAAI,KAe7DC,GAAiB,CAC1B,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,IAiB9CC,GAAe,CACxB,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,IAW9CC,GAAoB,CAC7B,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,GAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,GAAG,EAAK,EAAG,GAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,GAAG,GAAG,GAAG,EACnD,GAAG,GAAG,GAAG,GAAK,GAAG,GAAG,GAAG,EAAK,EAAG,EAAG,GAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,GAAK,GAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,GAAG,GAAK,GAAG,GAAG,GAAG,GAAK,GAAG,GAAG,EAAG,EACnD,EAAG,EAAG,GAAG,GAAK,EAAG,GAAG,EAAG,EAAK,GAAG,GAAG,GAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,GAAG,GAAK,EAAG,GAAG,EAAG,EAAK,GAAG,EAAG,EAAG,EAAK,EAAG,EAAG,GAAG,GACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,GAAG,GAAK,GAAG,GAAG,GAAG,GACnD,EAAG,GAAG,GAAG,GAAK,EAAG,EAAG,EAAG,EAAK,EAAG,GAAG,GAAG,EAAK,EAAG,EAAG,EAAG,GAEvD,CAEI,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EAAK,EAAG,EAAG,EAAG,EACnD,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M,GAAM,IAAM,GAC1F,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,EAE1F,EAAM,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE1F,EAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAE1F,EAAM,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE1F,EAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAE1F,EAAM,EAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE1F,EAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,EAC1F,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAE1F,EAAM,EAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAA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F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,CjDtRkB,GiDsjD7RN,GiD6RY,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,IAE9F,CAEI,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,CjD3RxB,GiD2R8B,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,CjD7RwB,GiD6RlB,CjD7RkB,GiD6RZ,CjD7RY,GiD6RN,GAAM,GAAM,GAAM,CjD7RZ,GiD6RkB,CjD7RlB,GiD6RwB,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,CjDrSZ,GiDqSkB,GAAM,GAAM,CjD9R9B,GiD8RoC,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAMH,EAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,CjDjS5D,GiDiSkE,GAC1F,GAAM,GAAM,GAAM,CjDlSM,GiDkSA,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAC1FA,EAAM,GAAM,GAAM,GAAM,GAAMA,EAAM,GAAM,GAAMA,EAAM,GAAM,GAAM,GAAM,GAAMA,EAAM,CjDjS5D,GiDiSkE,GAC1FA,EAAM,GAAM,GAAM,GAAM,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AM,GAAM,GAAM,EAAM,GAAM,EAAM,GAAM,GAAM,GAAM,EAC1F,EAAM,EAAM,GAAM,EAAM,GAAM,GAAM,GAAM,EAAM,GAAM,EAAM,IAAM,EAAM,IAAM,EAAM,IAAM,GAC1F,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,EAAM,GAAM,GAAM,GAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAC1F,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,GAAM,EAAM,GAAM,GAAM,GAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,IAAM,EAAM,IAAM,EAC1F,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,EAAM,GAAM,EAAM,GAAM,GAAM,GAAM,EAC1F,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAC1F,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,EAAM,EAC1F,EAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAC1F,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,EAAM,EAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,GAAM,GAC1F,GAAM,GAAM,GAAM,EAAM,GAAM,GAAM,GAAM,EAAM,GAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC1F,IAAM,EAAM,IAAM,EA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,KXpIqC,IWoIA5iB,EAASugC,GAAkB3d,GAAQ,MACxE,KXxIqC,IWwIA5iB,EAASwgC,GAAY5d,GAAQ,MAClE,KXtFqC,IWsFA5iB,EAASygC,GAAa7d,GAAQ,MACnE,KXnIqC,IWmIA5iB,EAAS0gC,GAAY9d,GAAQ,MAClE,KXnIqC,IWmIA5iB,EAAS2gC,GAAY/d,GAAQ,MAClE,KXnIqC,IWmIA5iB,EAAS4gC,GAAYhe,GAAQ,MAClE,KXzIqC,IWyIA5iB,EAAS6gC,GAAaje,GAAQ,MACnE,KXxIqC,IWwIA5iB,EAAS8gC,GAAgBle,GAAQ,MAGtE,KXxMqC,IWyMrC,KX9PqC,GW+PrC,KX9PqC,GW+PrC,KXzMqC,IW0MrC,KXvLqC,IWwLrC,KXhQqC,GWiQrC,KX7FqC,IW8FrC,KX1MqC,IW2MrC,KX1MqC,IW2MrC,KX1MqC,IW2MrC,KX1MqC,IW2MrC,KXvOqC,GWwOrC,KXjKqC,IWkKrC,KXxPqC,GWyPrC,KX1MqC,IW2MrC,KXpSqC,GWqSrC,KX7EqC,IW8ErC,KXnRqC,GWoRrC,KXjOqC,GWkOrC,KXxNqC,IWyNrC,KX7HqC,IW8HrC,KX1GqC,IW2GrC,KXtSqC,GWuSrC,KXtSqC,GWuSrC,KXzGqC,IW0GrC,KXxMqC,IWyMrC,KX9SqC,GW+SrC,KX9JqC,IW+JrC,KXlKqC,IWmKrC,KX9JqC,IW+JrC,KX9MqC,IW+MrC,KX/JqC,IWgKrC,KXlJqC,IWmJrC,KX/LqC,IWgMrC,KX3QqC,GW4QrC,KX5JqC,IW6JrC,KXxJqC,IWyJrC,KX7NqC,IW8NrC,KX9QqC,GW+QrC,KX/JqC,IWgKrC,KXzGqC,IW0GrC,KXzGqC,IW0GrC,KX9GqC,IW+GrC,KX9GqC,IW+GrC,KX3HqC,IW4HrC,KX9TqC,GW+TrC,KX/IqC,IWgJrC,KXnJqC,IWoJrC,KXnJqC,IWoJrC,KXnJqC,IWoJrC,KX/MqC,IWgNrC,KXzSqC,GW0SrC,KXnTqC,GWoTrC,KX5RqC,GW6RrC,KX5RqC,GW6RrC,KX5RqC,GW6RrC,KX5RqC,GW6RrC,KXnOqC,IWoOrC,KXnOqC,IWoOrC,KX3KqC,IW4KrC,KXtNqC,IWuNrC,KX3RqC,GW4RrC,KX1JqC,IW2JrC,KX1JqC,IW2JrC,KX/JqC,IW+JA5iB,EAAS+gC,GAAcne,GAAQ,MAEpE,QACI5iB,EAAS,CACLw0B,UAAW,EACXrD,cAAgB,aAEpB9sB,QAAQ4O,IACJ,mCAAqC1W,GAAS+5B,EAAe,GAAK,aACvD7G,EAAY,aAAelzB,GAASmzB,EAAa,IAgBxE,OAXK1vB,EAAOw0B,WACRxE,EAAe9F,GAAIC,GAAM,GAQ7B6W,GAAepe,GAER,CACH8R,SAAU,EACVH,MAAkC,qBAAjBv0B,EAAOu0B,MAAyBv0B,EAAOu0B,OAAS9I,GAA0Bjd,SAAS8nB,GACpG9B,SAAWx0B,EAAOw0B,SAClBrD,cAAgBnxB,EAAOmxB,cACvBC,aAAepxB,EAAOoxB,aACtBsF,MAAQ12B,EAAO02B,QAIjBqK,GAAgB,SAACne,GACnB,MAAO,CACH4R,UAAW,IAIbwM,GAAiB,SAACpe,GAAW,IAEvB6M,EAA+G7M,EAA/G6M,UAAWC,EAAoG9M,EAApG8M,YAAuC3B,GAA6DnL,EAAvF4J,YAAuF5J,EAA1E6J,YAA0E7J,EAA7DmL,YAAYiC,EAAiDpN,EAAjDoN,eAAgB/uB,EAAiC2hB,EAAjC3hB,QAASI,EAAwBuhB,EAAxBvhB,UAAWiwB,EAAa1O,EAAb0O,SAE1G,GAAmB,IAAd7B,GAAqC,MAAhBC,EAAuB,CAC7C,IACIzwB,EADM8wB,GAAsBN,EAAWC,EAAalD,EAAaC,EAAasB,EAAYiC,EAAgB/uB,EAASI,GACxGwR,QAAO,SAAAtL,GAAC,OAAIA,EAAE2oB,YACzBjxB,EAAKxB,OAAS,GXljBc,IWmjBxBwB,EAAK,GAAG6iB,OACRwP,EAASqD,aAAa,GAAG6B,aAKrC,GAAmB,IAAd/G,GAAqC,MAAhBC,EAAuB,CAC7C,IACIzwB,EADM8wB,GAAsBN,EAAWC,EAAalD,EAAaC,EAAasB,EAAYiC,EAAgB/uB,EAASI,GACxGwR,QAAO,SAAAtL,GAAC,OAAIA,EAAE2oB,YACzBjxB,EAAKxB,OAAS,GX5jBc,IW6jBxBwB,EAAK,GAAG6iB,OACRwP,EAASqD,aAAa,GAAG6B,eAMnC4F,GAAoB,SAACxZ,GAGvB,OAFqBA,EAAb0O,SAEKY,MACF,CACHsC,UAAW,GAIZ,CACHA,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CX5gBiB,MWghBlCiL,GAAkB,SAACzZ,GAAW,IACxB0O,EAAa1O,EAAb0O,SAER,OACKA,EAASC,gBAELD,EAASY,OACTZ,EAASW,MACTX,EAASK,SAGP,CACH6C,UAAW,GAIZ,CACHA,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CX9iBiB,EAWA,GADA,GANA,KW8iBlCkL,GAAqB,SAAC1Z,GAAW,IAC3B6M,EAAqC7M,EAArC6M,UAAW6B,EAA0B1O,EAA1B0O,SAAU5B,EAAgB9M,EAAhB8M,YAE7B,OACM4B,EAASY,OACTZ,EAASM,MASS,IAAdnC,GAAqC,KAAhBC,EACtB4B,EAASQ,QAQH,CACH0C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CX9jBS,IWwkBzB,CACHoD,UAAW,GAvBR,CACHA,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CXjjBa,GANA,KWglBlCmL,GAAiB,SAAC3Z,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OACKA,EAASY,OACRZ,EAASG,KAASH,EAASW,MAC5BX,EAASK,QASH,CACH6C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CXrlBa,GATA,EAQA,GANA,KWsmBlCoL,GAAqB,SAAC5Z,GAAW,IAC3B6M,EAAqC7M,EAArC6M,UAAW6B,EAA0B1O,EAA1B0O,SAAU5B,EAAgB9M,EAAhB8M,YAE7B,OAAK4B,EAASY,MAQTZ,EAASI,SASU,IAAdjC,GAAqC,MAAhBC,EACtB4B,EAASQ,QAQH,CACH0C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CX5nBS,IWsoBzB,CACHoD,UAAW,GAxBR,CACHA,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CXtnBa,IW2mBzB,CACHoD,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CXtmBa,MWwoBlCqL,GAAmB,SAAC7Z,GAAW,IACzB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,OAAKA,EAASW,KAQU,IAAdxC,GAAqC,MAAhBC,EACtB4B,EAASQ,QAQH,CACH0C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CX5pBS,IWsqB7B,CACHoD,UAAW,GAvBJ,CACHA,UAAW,EACXrD,cAAgB,OAChBC,aAAe,CXhpBa,MWwqBlCsL,GAAsB,SAAC9Z,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OACMA,EAASY,OAAWZ,EAASE,QAAU,GACzCF,EAASW,MACTX,EAASK,QASF,CACH6C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,YAChBC,aAAe,CXlrBa,GAVA,EASA,GAHA,KWgsBlCuL,GAAoB,SAAC/Z,GAAW,IAC1B6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,OAAKA,EAASK,QAQU,IAAdlC,GAAqC,MAAhBC,EACtB4B,EAASI,SAQH,CACH8C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CXptBS,IW8tBzB,CACHoD,UAAW,GAvBR,CACHA,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CX1sBa,KWmuBlCwL,GAAmB,SAACha,GAAW,IACzB0O,EAAa1O,EAAb0O,SAER,OACKA,EAASY,OACTZ,EAASG,MACRH,EAAS2P,UAAY3P,EAASU,SAShCV,EAASjM,MAAM6b,gBACR,CACH1M,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXvuBa,GATA,EAOA,KWovBlC0L,GAAiB,SAACla,GAAW,IACvB0T,EAA4B1T,EAA5B0T,cAAehF,EAAa1O,EAAb0O,SAEvB,OAAQgF,GACJ,KX1iBqC,IW2iBrC,KX1iBqC,IW2iBrC,KXriBqC,IWqiBP,GAAIhF,EAASY,OAASZ,EAASK,SAAWL,EAASG,IAAS,MAAO,CAAE+C,UAAU,GAAW,MACxH,KX3kBqC,GW2kBP,GAAIlD,EAASW,KAA+C,MAAO,CAAEuC,UAAU,GAAW,MACxH,KXpiBqC,IWoiBP,GAAIlD,EAASY,MAA+C,MAAO,CAAEsC,UAAU,GAAW,MACxH,KXhlBqC,GWglBP,GAAIlD,EAASY,OAASZ,EAASI,UAAYJ,EAASG,IAAQ,MAAO,CAAE+C,UAAU,GAAW,MACxH,KXhlBqC,GWglBP,GAAIlD,EAASY,OAASZ,EAASW,KAA6B,MAAO,CAAEuC,UAAU,GAAW,MACxH,KXjiBqC,IWiiBP,GAAIlD,EAASC,cAA+C,MAAO,CAAEiD,UAAU,GAAW,MACxH,KXvfqC,IWufP,GAAIlD,EAASY,OAASZ,EAASG,KAAOH,EAASI,SAAa,MAAO,CAAE8C,UAAU,GAAW,MACxH,KXtfqC,IWsfP,GAAIlD,EAASY,MAA+C,MAAO,CAAEsC,UAAU,GAAW,MACxH,QACI,MAAO,CACHA,UAAU,EACVrD,cAAgB,YAI5B,MAAO,CACHqD,UAAU,EACVrD,cAAgB,qBAIlBkO,GAAuB,SAACzc,GAG1B,OAFqBA,EAAb0O,SAEOC,eAAiB,EASrB,CACHiD,UAAW,GATR,CACHA,UAAW,EACXrD,cAAgB,oBAChBC,aAAe,CX/xBa,GWgyB5BmD,OAAO,IAUbgL,GAAa,SAAC3c,GAAW,IACnB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EACf,CACH8E,UAAU,GAIC,IAAd/E,GAAqC,KAAhBC,EAClB4B,EAAS8D,MAAMO,OAAS,IACjB,CACHnB,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX7xBS,GADA,GAEA,GACA,IW4xBxBmD,OAAO,GAIR,CACHC,UAAW,GAIZ,CACHA,UAAW,EACXrD,cAAgB,eAChBoD,OAAO,IAITyH,GAAqB,SAACpZ,GAAW,IAC3B6M,EAAwB7M,EAAxB6M,UAAW6B,EAAa1O,EAAb0O,SAGnB,OAAkB,IAAd7B,EACI6B,EAASE,QAAU,EACZ,CACHgD,UAAW,GAIR,CACHA,UAAW,EACXrD,cAAgB,YAChBC,aAAe,CXv1BS,GWw1BxBmD,OAAO,GAKR,CACHC,UAAW,IAKjByH,GAAa,SAACrZ,GAAW,IACnB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,KAAhBC,EACjB4B,EAASC,eAQVD,EAAS+D,KAAK8L,eACP,CACH3M,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CX72BS,IWw3BzB,CACHoD,UAAW,IAKjB0H,GAAmB,SAACtZ,GAAW,IACzB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASM,MAQtB,CACH4C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,aAChBC,aAAe,CX13Ba,GANA,KW04BlC+K,GAAiB,SAACvZ,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAMA,EAASY,OAAUZ,EAASE,QAAUF,EAASQ,QAQ1C,CACH0C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CX34Ba,GAVA,EAMA,KWy5BlC4N,GAAmB,SAACpc,GAItB,OAHqBA,EAAb0O,SAEC8D,MAAMgM,cACR,CACH5M,UAAW,IAIbyK,GAAmB,SAACrc,GAAW,IACzB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASC,eAQVD,EAASW,OACF,CACHuC,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXh7Ba,KW27BlC8N,GAAqB,SAACtc,GAAW,IAC3B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASC,eAQVD,EAASU,SACF,CACHwC,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXl8Ba,KW68BlCqO,GAAmB,SAAC7c,GACtB,MAAO,CACH4R,UAAW,EACXD,OAAO,IAITmL,GAAyB,SAAC9c,GAC5B,MAAO,CACH4R,UAAW,EACXD,OAAO,IAIToL,GAAiB,SAAC/c,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAIA,EAASC,eACTD,EAASjM,MAAMoP,WACR,CACHD,UAAW,IAIR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXx+Ba,GWy+B5BmD,OAAO,IAKb4J,GAAc,SAACvb,GAAW,IACpB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASO,SASVP,EAAS+P,MAAMC,QACR,CACH9M,UAAW,IAVR,CACHA,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CX/+Ba,GWg/B5BmD,OAAO,IAWbsK,GAAc,SAACjc,GAIjB,OAHqBA,EAAb0O,SAECY,QACF,CACHsC,UAAW,IAIbwJ,GAAc,SAACpb,GAAW,IACpB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,GACtB4B,EAASE,SACF,CACHgD,UAAW,IAGK,IAAd/E,GAAqC,KAAhBC,EACvB4B,EAASU,QACTV,EAASjM,MAAMkc,cACR,CACH/M,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXthCa,IW0hC7B,CACHoD,UAAW,EACXrD,cAAgB,kBAIlB8M,GAAgB,SAACrb,GAAW,IACtB0O,EAAa1O,EAAb0O,SAGR,OAAKA,EAAS+D,KAAK8L,cAAgB,GAAM7P,EAAS+D,KAAKC,SAC5C,CACHd,UAAW,GAIR,CACHA,UAAW,EACXrD,cAAgB,gBAChBC,aAAe,CXjiCa,IWkiC5BmD,OAAO,IAKbuK,GAAuB,SAAClc,GAAW,IAC7B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASS,QAQVT,EAAS+D,KAAKC,WACP,CACHd,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX3jCa,KWskClC4L,GAAgB,SAACpa,GAAW,IACtB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASG,KAQlDH,EAAS+D,KAAK/C,YACP,CACHkC,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CX1kCa,GAPA,EAFA,KW8lClC2N,GAAmB,SAACnc,GAAW,IACzB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SA2BhC,OAzBmB,IAAd7B,GAAqC,IAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAEV,IAAdvF,GAAqC,KAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAEV,IAAdvF,GAAqC,KAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAEV,IAAdvF,GAAqC,KAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAEV,IAAdvF,GAAqC,MAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAEV,IAAdvF,GAAqC,MAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAEV,IAAdvF,GAAqC,KAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAEV,IAAdvF,GAAqC,KAAhBC,GACtB4B,EAASqD,aAAa,GAAGK,aAGtB,CACHR,UAAW,IAIb0J,GAAc,SAACtb,GAAW,IACpB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAqB,IAAd7B,GAAqC,MAAhBC,EACnB4B,EAASO,QAOJP,EAASjM,MAAMkc,aAOrBjQ,EAAS+P,MAAMG,QACR,CACHhN,UAAW,IARR,CACHA,UAAW,EACXrD,cAAgB,eATb,CACHqD,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CXpoCS,IWqpC7B,CACHoD,UAAW,IAIb4J,GAAa,SAACxb,GAAW,IACnB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASO,SAAYP,EAAS8D,MAAMO,OAAS,IACvC,CACHnB,UAAW,EACXrD,cAAgB,OAChBC,aAAe,CXjqCa,EAsBA,GADA,GAEA,GACA,MW6oCpCE,EAAS+P,MAAMI,QACR,CACHjN,UAAW,KAIb4K,GAAiB,SAACxc,GAIpB,OAHqBA,EAAb0O,SAEC2P,WACF,CACHzM,UAAW,IAIb6J,GAAc,SAACzb,GAAW,IACpB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAAS2P,UAQV3P,EAASU,SACTV,EAASjM,MAAMqc,eACR,CACHlN,UAAW,IAVR,CACHA,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CXxrCa,KWosClCkN,GAAkB,SAAC1b,GAAW,IACxB0O,EAAa1O,EAAb0O,SAGR,OAAIA,EAAS8D,MAAMO,OAAS,GACjB,CACHnB,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXzrCa,GADA,GAEA,GACA,MW8rC/BE,EAASqQ,QAAQC,WAClBtQ,EAASqQ,QAAQC,YAGd,CACHpN,UAAW,KAIb+J,GAAgB,SAAC3b,GAAW,IACtB0O,EAA0C1O,EAA1C0O,SAAU/G,EAAgC3H,EAAhC2H,eAAgBC,EAAgB5H,EAAhB4H,YAElC,IAAK8G,EAASW,KAAM,CAChB,GAAIX,EAAS8D,MAAMO,OAAS,GACxB,MAAO,CACHnB,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXjtCS,GADA,GAEA,GACA,KWmtChCE,EAASW,OAab,IAAKZ,GAAmBC,EAAU/G,GAAiB,CAC/C,GAAI+G,EAAS8D,MAAMO,OAAS,IACxB,MAAO,CACHnB,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXvuCS,GADA,GAEA,GACA,KWyuChC2E,GAAiBzE,EAAU/G,GAG/B,IAAK8G,GAAmBC,EAAU9G,GAAc,CAC5C,GAAI8G,EAAS8D,MAAMO,OAAS,KACxB,MAAO,CACHnB,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXnvCS,GADA,GAEA,GACA,KWqvChC2E,GAAiBzE,EAAU9G,GAG/B,OAAI8G,EAASW,MAAQX,EAASE,QAAUH,GAAmBC,EAAU/G,IAAmB8G,GAAmBC,EAAU9G,GAC1G,CACHgK,UAAW,GAkCZ,CACHA,UAAW,EACXrD,cAAgB,wBAIlBmO,GAAiC,SAAC1c,GAAW,IACvCuH,EAAgCvH,EAAhCuH,GAAID,EAA4BtH,EAA5BsH,GAAIuF,EAAwB7M,EAAxB6M,UAAW6B,EAAa1O,EAAb0O,SAK3B,OAAkB,IAAd7B,EACM6B,EAASC,eAAiB,EAQrB,CACHmF,MAAQ,CACJ,CAACn7B,EAAI4uB,EAAIrrB,EAAGorB,IAEhBsK,UAAW,GAXR,CACHA,UAAW,EACXrD,cAAgB,oBAChBC,aAAe,CX30CS,IWy1Cb,IAAd3B,EACA6B,EAASO,SAAYP,EAAS+P,MAAMI,OAQrCnQ,EAASjM,MAAMwc,UACR,CACHrN,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXx1CS,EA+BA,KWq0CzB,CACHoD,UAAW,IAKjB0I,GAAwB,SAACta,GAAW,IAC9B0O,EAAa1O,EAAb0O,SAER,OAAIA,EAASO,SAAWP,EAAS+P,MAAMI,OAASnQ,EAASY,MAC9C,CACHsC,UAAW,GAIZ,CACHA,UAAW,EACXrD,cAAgB,oBAChBC,aAAe,CXt3CiB,EA+BA,GA1BA,MWq3ClCuN,GAAmB,SAAC/b,GAAW,IACzB0O,EAAa1O,EAAb0O,SAER,OACIA,EAASqQ,QAAQG,WACjBxQ,EAASqQ,QAAQI,UACjBzQ,EAASqQ,QAAQK,QACjB1Q,EAASqQ,QAAQM,OACjB3Q,EAASqQ,QAAQO,aACjB5Q,EAASqQ,QAAQQ,UACjB7Q,EAASqQ,QAAQS,gBAEjB9Q,EAASjM,MAAMgd,QACR,CACH7N,UAAW,IAIR,CACHA,UAAW,EACXrD,cAAgB,iBAMtBqN,GAAe,SAAC5b,GAAW,IACrB0O,EAAa1O,EAAb0O,SAER,OAAIA,EAASjM,MAAMgd,OACf/Q,EAASjM,MAAMid,gBACR,CACH9N,UAAW,IAIR,CACHA,UAAW,EACXrD,cAAgB,QAChBoD,OAAO,IAKbkK,GAAsB,SAAC7b,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASjM,MAAMkd,QAOhBjR,EAASjM,MAAMmd,iBACR,CACHhO,UAAW,IARR,CACHA,UAAW,EACXrD,cAAgB,WAWtBuN,GAAe,SAAC9b,GAAW,IACrB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EACjB4B,EAASqD,aAAa,GAAGK,YAO1B1D,EAASjM,MAAMkd,SACR,CACH/N,UAAW,IARR,CACHA,UAAW,EACXrD,cAAgB,iBAWjB,CACHqD,UAAU,IAKhBuI,GAAsB,SAACna,GAAW,IAC5B6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,IAAKA,EAASY,QAAUZ,EAASW,KAC7B,MAAO,CACHuC,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXj9Ca,GADA,KWs9CpC,GAAmB,IAAd3B,GAAqC,MAAhBC,EAAuB,CAC7C,GAAqC,IAAjC4B,EAASjM,MAAMod,cAKf,MAAO,CACHjO,UAAW,EACXrD,cAAgB,iBANpBG,EAASjM,MAAMod,gBACfnR,EAASI,gBAUbJ,EAASjM,MAAMod,gBAGnB,MAAO,CACHjO,UAAU,IAIZoL,GAAuB,SAAChd,GAAW,IAC7B0R,EAA0B1R,EAA1B0R,YAAahD,EAAa1O,EAAb0O,SAErB,OAAqB,KAAhBgD,GAA0BhD,EAASS,OAQnB,KAAhBuC,GAA2BhD,EAASY,OAAUZ,EAASK,SAAYL,EAAS+E,UAQ5D,MAAhB/B,GAA2BhD,EAASM,OAQzCN,EAAS8D,MAAMQ,WACR,CACHpB,UAAW,IATJ,CACHA,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CXvgDa,IW4/CzB,CACHoD,UAAW,EACXrD,cAAgB,gCAChBC,aAAe,CXz/Ca,GAPA,EAoCA,KWi9CzB,CACHoD,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXp/Ca,KW8gDlCuH,GAAiB,SAAC/V,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXlhDa,GAPA,EAKA,EANA,EAqCA,MW+/ClCwH,GAAe,SAAChW,GAAW,IACrB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXniDa,GAPA,EAKA,EANA,EAqCA,MWghDlCyH,GAAgB,SAACjW,GAAW,IACtB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXpjDa,GAPA,EAKA,EANA,EAqCA,MWiiDlC0H,GAAe,SAAClW,GAAW,IACrB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXrkDa,GAPA,EAKA,EANA,EAqCA,MWkjDlC2H,GAAc,SAACnW,GAAW,IACpB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASW,MAASX,EAASI,SAQrB,CACH8C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXvlDa,GAPA,KWwmDlC4H,GAAkB,SAACpW,GAAW,IACxB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASE,QAAWF,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UASzG,CACH7B,UAAW,GATR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXjnDa,EAUA,GAPA,EAKA,EANA,EAqCA,IW2kD5BmD,OAAO,IAUb0E,GAAiB,SAACrW,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXznDa,GAPA,EAKA,EANA,EAqCA,MWsmDlC8H,GAAc,SAACtW,GAAW,IACpB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX1oDa,GAPA,EAKA,EANA,EAqCA,MWunDlC+H,GAAoB,SAACvW,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX3pDa,GAPA,EAKA,EANA,EAqCA,MWwoDlCgI,GAAsB,SAACxW,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASE,OAQtB,CACHgD,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,kBAChBC,aAAe,CXtrDa,EAUA,MWsrDlCiI,GAAc,SAACzW,GAAW,IACpB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX7rDa,GAPA,EAKA,EANA,EAqCA,MW0qDlCkI,GAAuB,SAAC1W,GAAW,IAC7B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASI,SAQtB,CACH8C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,oBAChBC,aAAe,CX9sDa,GARA,KWguDlCmI,GAAuB,SAAC3W,GAAW,IAC7B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX/tDa,GAPA,EAKA,EANA,EAqCA,MW4sDlCoI,GAAe,SAAC5W,GAAW,IACrB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXhvDa,GAPA,EAKA,EANA,EAqCA,MW6tDlCqI,GAAa,SAAC7W,GAAW,IACnB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXjwDa,GAPA,EAKA,EANA,EAqCA,MW8uDlCsI,GAAoB,SAAC9W,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXlxDa,GAPA,EAKA,EANA,EAqCA,MW+vDlCuI,GAAc,SAAC/W,GAAW,IACpB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,UAQjE,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXnyDa,GAPA,EADA,EAqCA,MWgxDlCwI,GAAmB,SAAChX,GAGtB,OAFqBA,EAAb0O,SAEMY,MAQH,CACHsC,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CXpzDa,MW8zDlCyI,GAAiB,SAACjX,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASU,OAQtB,CACHwC,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXr0Da,GAFA,KWi1DlC0I,GAAoB,SAAClX,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAUV,EAASI,UAAaJ,EAAS+E,UAQpF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXt1Da,GAPA,EAKA,EANA,EAqCA,MWm0DlC2I,GAAoB,SAACnX,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASE,QAAWF,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,4BAChBC,aAAe,CXv2Da,GAPA,EAHA,EAEA,EAqCA,MWo1DlC4I,GAAqB,SAACpX,GAAW,IAC3B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASE,OAQtB,CACHgD,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,kBAChBC,aAAe,CXx3Da,GAVA,KW44DlC6I,GAAiB,SAACrX,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASI,SAQtB,CACH8C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,oBAChBC,aAAe,CXz4Da,GARA,KW25DlC8I,GAAsB,SAACtX,GAGzB,OAFqBA,EAAb0O,SAEMQ,QAUH,CACH0C,UAAW,GATR,CACHA,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CX/5Da,KW06DlC+I,GAAsB,SAACvX,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASU,OAQtB,CACHwC,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,kBAChBC,aAAe,CX76Da,GAFA,KWy7DlCgJ,GAAkB,SAACxX,GAAW,IACxB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASW,MAASX,EAASC,eAAmBD,EAASO,SAAYP,EAAS+P,MAAMG,MAQ5E,CACHhN,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,8CAChBC,aAAe,CX/7Da,GADA,EAHA,EAiCA,MW46DlCyO,GAAsB,SAACjd,GAGzB,OAFqBA,EAAb0O,SAEMU,OAQH,CACHwC,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX/8Da,GAPA,EAKA,EANA,EAqCA,MW47DlCiJ,GAAoB,SAACzX,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXh+Da,GAPA,EAKA,EANA,EAqCA,MW68DlCkJ,GAAoB,SAAC1X,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXj/Da,GAPA,EAKA,EANA,EAqCA,MW89DlCmJ,GAAoB,SAAC3X,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASU,QAAWV,EAASI,UAAaJ,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXlgEa,GAPA,EAKA,EANA,EAqCA,MW++DlC0O,GAAwB,SAACld,GAAW,IAC9B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,UAQjE,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXnhEa,GAPA,EADA,EAqCA,MWggElC2O,GAAyB,SAACnd,GAAW,IAC/B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,UAQjE,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXpiEa,GAPA,EADA,EAqCA,MWihElC4O,GAAyB,SAACpd,GAAW,IAC/B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,UAQjE,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXrjEa,GAPA,EADA,EAqCA,MWkiElC6O,GAAkB,SAACrd,GAGrB,OAFqBA,EAAb0O,SAEMC,cAQH,CACHiD,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXjlEa,KW2lElCyL,GAA0B,SAACja,GAAW,IAChC0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASU,OAQtB,CACHwC,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXvlEa,GAFA,KWmmElCoJ,GAAsB,SAAC5X,GAAW,IAC5B6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,OAAKA,EAASW,MAOU,IAAdxC,GAAqC,MAAhBC,GAC3B4B,EAAS+D,KAAK8L,eAGX,CACH3M,UAAW,IAXJ,CACHA,UAAW,EACXrD,cAAgB,OAChBC,aAAe,CXzmEa,MWqnElCqJ,GAAsB,SAAC7X,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASC,cAQtB,CACHiD,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,0BAChBC,aAAe,CX3nEa,GAXA,KWgpElCsJ,GAAoB,SAAC9X,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASC,cAQtB,CACHiD,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,0BAChBC,aAAe,CX5oEa,GAXA,KWiqElCuJ,GAAqB,SAAC/X,GAAW,IAC3B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASC,cAQtB,CACHiD,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,0BAChBC,aAAe,CX7pEa,GAXA,KWkrElCwJ,GAAmB,SAAChY,GAAW,IACzB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASW,KAQtB,CACHuC,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,gBAChBC,aAAe,CX9qEa,GADA,MWyrElCyJ,GAAkB,SAACjY,GAAW,IACxB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASG,KAAQH,EAASK,QAQpB,CACH6C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXxsEa,EAEA,KWgtElC0J,GAAkB,SAAClY,GAAW,IACxB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,UAQjE,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXhtEa,GAPA,EADA,EAqCA,MW6rElC2J,GAAyB,SAACnY,GAAW,IAC/B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,UAQjE,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXjuEa,GAPA,EADA,EAqCA,MW8sElC4J,GAAgB,SAACpY,GAAW,IACtB0O,EAAa1O,EAAb0O,SAER,OAAMA,EAASY,OAASZ,EAASK,SAAWL,EAAS+E,UAQ1C,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,+BAChBC,aAAe,CXlvEa,GAPA,EAoCA,MW+tElC6J,GAAoB,SAACrY,GAAW,IAC1B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,UAQjE,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CXnwEa,GAPA,EADA,EAqCA,MWgvElC8J,GAAqB,SAACtY,GAAW,IAC3B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAASU,QAAWV,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXpxEa,GAPA,EAKA,EANA,EAqCA,MWiwElC+J,GAAe,SAACvY,GAGlB,OAFqBA,EAAb0O,SAEMY,MAQH,CACHsC,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CXryEa,MW+yElCgK,GAAa,SAACxY,GAAW,IACnB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAASU,QAAWV,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXtzEa,GAPA,EAKA,EANA,EAqCA,MWmyElCiK,GAAa,SAACzY,GAAW,IACnB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAASU,QAAWV,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CXv0Ea,GAPA,EAKA,EANA,EAqCA,MWozElCkK,GAAc,SAAC1Y,GAAW,IACpB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAAS+E,UAQ3C,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,+BAChBC,aAAe,CXx1Ea,GAPA,EAoCA,MWq0ElCmK,GAAuB,SAAC3Y,GAAW,IAC7B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASI,UAAaJ,EAAS+E,UAQ5C,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,8BAChBC,aAAe,CXz2Ea,GARA,EAqCA,MWs1ElCoK,GAAkB,SAAC5Y,GAAW,IACxB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAASU,QAAWV,EAAS+E,UAQrF,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CX13Ea,GAPA,EAKA,EANA,EAqCA,MWu2ElCqK,GAAiB,SAAC7Y,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASW,MAASX,EAASK,QAQrB,CACH6C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,kBAChBC,aAAe,CX54Ea,GANA,KW45ElC8O,GAAkB,SAACtd,GAGrB,OAFqBA,EAAb0O,SAEMC,cAQH,CACHiD,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXv6Ea,KWi7ElCsK,GAAkB,SAAC9Y,GAAW,IACxB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASW,MAASX,EAASK,QAQrB,CACH6C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,kBAChBC,aAAe,CX96Ea,GANA,KW87ElCuK,GAAe,SAAC/Y,GAAW,IACrB0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASQ,SAAYR,EAASY,OAAUZ,EAASK,SAAYL,EAASI,UAAaJ,EAASU,QAAWV,EAAS+E,UAQ1G,CACH7B,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,oBAChBC,aAAe,CXl8Ea,EAIA,GAPA,EAKA,EANA,EAqCA,MW26ElCwK,GAAsB,SAAChZ,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,WAAc/E,EAASjM,MAAMkd,OAS3E,CACH/N,UAAW,GATR,CACHA,UAAW,EACXrD,cAAgB,6CAChBC,aAAe,CXt9Ea,EADA,EAqCA,IWm7E5BmD,OAAQ,IAUdsH,GAAsB,SAACjZ,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OAAKA,EAASK,SAAYL,EAASI,UAAaJ,EAAS+E,WAAc/E,EAASjM,MAAMkd,OAS3E,CACH/N,UAAW,GATR,CACHA,UAAW,EACXrD,cAAgB,6CAChBC,aAAe,CXx+Ea,EADA,EAqCA,IWq8E5BmD,OAAQ,IAUd6L,GAAc,SAACxd,GAGjB,OAFqBA,EAAb0O,SAEMM,MAQH,CACH4C,UAAW,GARR,CACHA,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CXz/Ea,KWmgFlCiP,GAA0B,SAACzd,GAC7B,MAAO,CACH4R,UAAW,IAIb8L,GAAuB,SAAC1d,GAC1B,MAAO,CACH4R,UAAW,IAIb+L,GAAoB,SAAC3d,GAAW,IAC1B6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,KAAhBC,GAMrB4B,EAASC,cALH,CACHiD,UAAW,GAKR,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXliFa,KW2iFlC+O,GAAY,SAACvd,GAGf,OAFqBA,EAAb0O,SAEMC,cAQP,CACHiD,UAAW,GARJ,CACHA,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CXljFa,KW2jFlCoP,GAAc,SAAC5d,GACjB,MAAO,CACH4R,UAAW,IAIbiM,GAAe,SAAC7d,GAClB,MAAO,CACH4R,UAAW,IAIbkM,GAAc,SAAC9d,GACjB,MAAO,CACH4R,UAAW,IAIbmM,GAAc,SAAC/d,GACjB,MAAO,CACH4R,UAAW,IAIboM,GAAc,SAAChe,GACjB,MAAO,CACH4R,UAAW,IAIbqM,GAAe,SAACje,GAClB,MAAO,CACH4R,UAAW,IAIbsM,GAAkB,SAACle,GACrB,MAAO,CACH4R,UAAW,IAIb2K,GAAY,SAACvc,GAAW,IAClB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,GACtB4B,EAAS+D,KAAK7C,UACP,CACHgC,UAAW,IAKA,IAAd/E,GAAqC,MAAhBC,EACf,CACH8E,UAAW,GAKA,IAAd/E,GAAqC,MAAhBC,GACtB4B,EAASqD,aAAa,GAAGc,WACzBnE,EAASqD,aAAa,GAAGe,gBAClB,CACHlB,UAAW,KAInBnwB,QAAQ4O,IAAR,UAAe2P,EAAMrnB,EAArB,YAA0BqnB,EAAM9jB,IACzB,CACH01B,UAAW,EACXrD,cAAgB,mBAOlB8L,GAAsB,SAACra,GAAW,IAC5B6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,GAAmB,IAAd7B,GAAqC,MAAhBC,EACtB,OAAK4B,EAASY,OAAUZ,EAASK,SAAYL,EAASG,KAQlDH,EAAS+D,KAAK9C,UACP,CACHiC,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,0BAChBC,aAAe,CXvoFS,GAPA,EAFA,KW4pFlC0K,GAAkB,SAAClZ,GAAW,IACxB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,OAAmB,IAAd7B,GAAqC,KAAhBC,EACjB4B,EAASG,KAAQH,EAASY,OAQ3BZ,EAAS+D,KAAK8L,eACP,CACH3M,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,eAChBC,aAAe,CX3pFS,GATA,IW+qFzB,CACHoD,UAAU,IAKhBuH,GAA4B,SAACnZ,GAAW,IAClC6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAEhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EACjB4B,EAASG,KAAQH,EAASY,OAAUZ,EAASK,SAQ9CL,EAAS+D,KAAK8L,eACP,CACH3M,UAAW,IATR,CACHA,UAAW,EACXrD,cAAgB,0BAChBC,aAAe,CXprFS,GAPA,EAFA,IWwsFzB,CACHoD,UAAU,IAOhBgL,GAAiB,SAAC5c,GAAW,IACvBrnB,EAA6EqnB,EAA7ErnB,EAAGuD,EAA0E8jB,EAA1E9jB,EAAGqrB,EAAuEvH,EAAvEuH,GAAID,EAAmEtH,EAAnEsH,GAAIyD,EAA+D/K,EAA/D+K,aAAcnB,EAAiD5J,EAAjD4J,YAAaC,EAAoC7J,EAApC6J,YAAaxrB,EAAuB2hB,EAAvB3hB,QAASI,EAAcuhB,EAAdvhB,UAEnEq1B,EAAQ,GAENgM,EAAe,SAAfA,EAAgBvY,EAAID,EAAIgK,EAAGwC,GAC7B,IAAI5G,EACAD,EAGJ,OAAQqE,GACJ,KAAK,EACDpE,EAAK3F,EACL0F,EAAK3F,EAAK,EACV,MAEJ,KAAK,EACD4F,EAAK3F,EAAK,EACV0F,EAAK3F,EACL,MAEJ,KAAK,EACD4F,EAAK3F,EACL0F,EAAK3F,EAAK,EACV,MAGJ,KAAK,EACD4F,EAAK3F,EAAK,EACV0F,EAAK3F,EACL,MAEJ,QACI,OAGJsF,GAAej0B,EAAGuD,EAAGgxB,EAAID,EAAIrD,EAAaC,EAAaxrB,EAASI,KACrDssB,EAAakC,GAAIC,KACXnF,IAIW,IAFT+L,EAAM7jB,QAAO,SAAAtL,GAAC,OAAIA,EAAEhM,IAAMu0B,GAAMvoB,EAAEzI,IAAM+wB,KAE1CpyB,SACTi5B,EAAM5xB,KAAK,CAACvJ,EAAIu0B,EAAIhxB,EAAI+wB,EAAI8S,QAAShY,KACrC+X,EAAa5S,EAAID,EAAI,EAAG6G,GACxBgM,EAAa5S,EAAID,EAAI,EAAG6G,GACxBgM,EAAa5S,EAAID,EAAI,EAAG6G,GACxBgM,EAAa5S,EAAID,EAAI,EAAG6G,MAWxC,OALAgM,EAAavY,EAAID,EAAI,EAAGwM,GACxBgM,EAAavY,EAAID,EAAI,EAAGwM,GACxBgM,EAAavY,EAAID,EAAI,EAAGwM,GACxBgM,EAAavY,EAAID,EAAI,EAAGwM,GAEjB,CACHlC,UAAW,EACXkC,MAAOA,IAgBTyG,GAAuB,SAACva,GAAW,IAC7B0O,EAAa1O,EAAb0O,SAER,OAAIA,EAASqQ,QAAQC,WACjBtQ,EAASqQ,QAAQiB,SACV,CACHpO,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,eAKlBiM,GAAmB,SAACxa,GAAW,IACzB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQiB,QACjBtR,EAASqQ,QAAQkB,UACV,CACHrO,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,UAKjB,CACHqD,UAAW,IAIb6I,GAAkB,SAACza,GAAW,IACxB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQkB,SACjBvR,EAASqQ,QAAQmB,UACV,CACHtO,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,WAKjB,CACHqD,UAAW,IAIb8I,GAAsB,SAAC1a,GAAW,IAC5BuH,EAAqBvH,EAArBuH,GAAID,EAAiBtH,EAAjBsH,GAAIoH,EAAa1O,EAAb0O,SAEhB,OAAIA,EAASqQ,QAAQmB,SACjBxR,EAASqQ,QAAQoB,QACV,CACHvO,UAAW,EACXkC,MAAQ,CAIJ,CAACn7B,EAAI4uB,EAAIrrB,EAAGorB,EAAK,MAKtB,CACHsK,UAAW,EACXrD,cAAgB,YAKlBoM,GAAsB,SAAC3a,GAAW,IAC5B0O,EAAa1O,EAAb0O,SAER,OAAIA,EAASqQ,QAAQoB,OACjBzR,EAASqQ,QAAQqB,YACV,CACHxO,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,UAKlBqM,GAAiB,SAAC5a,GAAW,IACvB0O,EAAa1O,EAAb0O,SAER,OAAIA,EAASqQ,QAAQqB,WACjB1R,EAASqQ,QAAQG,YACV,CACHtN,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,cAKlBsM,GAAe,SAAC7a,GAAW,IACrB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,KAAhBC,EAClB4B,EAASqQ,QAAQG,WACjBxQ,EAASqQ,QAAQI,WACV,CACHvN,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,aAKjB,CACHqD,UAAW,IAIbkJ,GAA4B,SAAC9a,GAAW,IAClC6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQI,UACjBzQ,EAASqQ,QAAQK,SACV,CACHxN,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,YAML,IAAd1B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQK,QACjB1Q,EAASqQ,QAAQM,QACV,CACHzN,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,UAKjB,CACHqD,UAAW,EACXrD,cAAgB,mCAIlBwM,GAAgB,SAAC/a,GAAW,IACtB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQM,OACjB3Q,EAASqQ,QAAQO,cACV,CACH1N,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,SAKjB,CACHqD,UAAW,IAIboJ,GAAkB,SAAChb,GAAW,IACxB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQO,aACjB5Q,EAASqQ,QAAQQ,WACV,CACH3N,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,gBAKjB,CACHqD,UAAW,IAIbqJ,GAAgB,SAACjb,GAAW,IACtB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQQ,UACjB7Q,EAASqQ,QAAQsB,QACV,CACHzO,UAAW,EACXD,OAAO,IAIR,CACHC,UAAW,EACXrD,cAAgB,WAEhBoD,OAAO,GAIR,CACHC,UAAW,IAIbsJ,GAAsB,SAAClb,GAIzB,OAHqBA,EAAb0O,SAGKqQ,QAAQsB,MACV,CACHzO,UAAW,GAIZ,CACHA,UAAW,EACXrD,cAAgB,UAKlB4M,GAAuB,SAACnb,GAAW,IAC7B6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQsB,OACjB3R,EAASqQ,QAAQS,iBACV,CACH5N,UAAW,IAIZ,CACHA,UAAW,EACXrD,cAAgB,SAKjB,CACHqD,UAAW,IAIboK,GAAkB,SAAChc,GAAW,IACxB6M,EAAqC7M,EAArC6M,UAAWC,EAA0B9M,EAA1B8M,YAAa4B,EAAa1O,EAAb0O,SAGhC,OAAmB,IAAd7B,GAAqC,MAAhBC,EAClB4B,EAASqQ,QAAQS,eACV,CACH5N,UAAW,GAIZ,CACHA,UAAW,EACXrD,cAAgB,mBAMpBG,EAASY,OAASZ,EAASW,KACpB,CACHuC,UAAW,GAIR,CACHA,UAAW,EACXrD,cAAgB,gBAChBC,aAAe,CX7lGa,GADA,MYlE3B8R,GAAkB,SAACtgB,GAAW,IAmBnC1hB,EACA4tB,EAnBIvzB,EAAyLqnB,EAAzLrnB,EAAGuD,EAAsL8jB,EAAtL9jB,EAAGyvB,EAAmL3L,EAAnL2L,eAAgBE,EAAmK7L,EAAnK6L,mBAAoBxtB,EAA+I2hB,EAA/I3hB,QAASI,EAAsIuhB,EAAtIvhB,UAAWsuB,EAA2H/M,EAA3H+M,UAAWC,EAAgHhN,EAAhHgN,YAAauE,EAAmGvR,EAAnGuR,WAAYC,EAAuFxR,EAAvFwR,WAAY+O,EAA2EvgB,EAA3EugB,cAAeC,EAA4DxgB,EAA5DwgB,mBAAoBlN,EAAwCtT,EAAxCsT,UAAWD,EAA6BrT,EAA7BqT,eAAgB3E,EAAa1O,EAAb0O,SAMpL,IAAK/C,EAAezvB,GAAGvD,GACnB,MAAO,CACHm5B,SAAU,GAIlB,GAAI0O,EACA,MAAO,CACH1O,SAAU,GAQlBxzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IAEpB,IAAIs3B,EAAQqD,EADZpH,EAAKlxB,KAAKuD,MAAMrC,EAAI,IACMoC,GACtB4gB,EAAQmU,EAAenH,GAAI5tB,GAE/B,GAAW,KADF/D,GAAU01B,IZ5BiB,IY8B1B/Q,EACF,MAAO,CACH4S,SAAU,EACVF,UAAW,EACXrD,cAAgB,kBAChBoD,OAAQ,GAKpB,IAAIliB,EAAaoc,EAAmB3vB,GAAGvD,GACnC6U,EAASiC,EAAW,GACpBhC,EAAWgC,EAAW,GACtBtS,EAASsS,EAAW,GACxBnR,EAAKmR,EAAW,GAChByc,EAAKzc,EAAW,GAEhB,IAAIvS,EV6a2B,SAACsQ,EAAQC,GACxC,IAAIrQ,EAEJ,GF+JoC,ME/JhCoQ,EACA,OAAO,EAGX,OAAQC,GACJ,KF4FgC,EE3FhC,KF4FgC,EE3FhC,KF4FgC,EE3FhC,KF4FgC,EE3FhC,KF4FgC,EE3FhC,KF4FgC,EE5FArQ,EAAS,EAAG,MAC5C,KF4FgC,EE3FhC,KF4FgC,EE3FhC,KF4FgC,EE3FhC,KF4FgC,EE3FhC,KF4FgC,GE5FAA,EAAS,EAAG,MAC5C,KF4FgC,GE5FAA,EAAS,EAAG,MAC5C,KF4FgC,GE5FAA,EAAS,EAAG,MAC5C,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE5FhC,KF6FgC,GE7FAA,EAAS,EAAG,MAC5C,KFmGgC,GElGhC,KFmGgC,GElGhC,KFmGgC,GEnGAA,EAAS,EAAG,MAC5C,KFmGgC,IEnGAA,EAAS,EAAG,MAC5C,QACIA,EAAS,IACTqE,QAAQC,MAAM,yDAA2D/H,GAAS8T,EAAU,IAGpG,OAAOrQ,EUrdI6Y,CAAoBzI,EAAQC,GACnCgzB,EAAQxU,GAAqB/uB,EAAMC,EAAQkB,EAASI,GAEpDiiC,EAAMnmC,GAAU+D,GAChBqiC,EAAMpmC,GAAU2xB,GAAM,EAEtBgB,EAAKuT,EAAM,GAAG9nC,EAAI+nC,EAClBzT,EAAKwT,EAAM,GAAGvkC,EAAIykC,EAEtB,OAAIJ,IAAkBhY,GZwkBc,MYvkB5B/a,EACO,CACHskB,SAAU,EACVF,UAAW,EACXkC,MAAQ,CAAC,CAAEn7B,EAAI8nC,EAAM,GAAG9nC,EAAI44B,EAAYr1B,EAAIukC,EAAM,GAAGvkC,IACrDy1B,OAAQ,GAIL,CACHG,SAAU,EACVF,UAAW,EACXkC,MAAQ,CAAC,CAAEn7B,EAAI8nC,EAAM,GAAG9nC,EAAI44B,EAAYr1B,EAAIukC,EAAM,GAAGvkC,EAAIs1B,IACzDG,OAAQ,GAMG,IAAd5E,GAAqC,MAAhBC,GAAyC,IAAfuE,GAAqC,IAAfC,GAChE9C,EAASI,UAAYJ,EAASC,cAWjC,CACHmD,SAAU,EACVF,UAAW,EACXkC,MAAQ,CAAC,CAAEn7B,EAAIu0B,EAAIhxB,EAAI+wB,IACvB0E,OAAQ,GAdG,CACHG,SAAU,EACVF,UAAW,EACXrD,cAAgB,8BAChBC,aAAe,CZtBK,EAHA,GY0BpBmD,OAAQ,ICjFfiP,GAAiB,SAACjoC,EAAGuD,EAAGyxB,GACjC,IACIvwB,EADAw0B,GAAW,EAGXiP,EAAoB,CACpBloC,EAAIA,EACJuD,EAAIA,EACJq1B,WAAav2B,KAAKuD,MAAM5F,EAAI,IAC5B64B,WAAax2B,KAAKuD,MAAMrC,EAAI,GAC5B6wB,UAAY3uB,GAAQzF,EAAGuD,EAAGyxB,EAAWtvB,SACrC2uB,YAAcxuB,GAAU7F,EAAGuD,EAAGyxB,EAAWlvB,WACzCqiC,cAAgBnT,EAAWxC,WAAWjvB,GAAGvD,GACzCooC,iBAAmBpT,EAAWP,eAAelxB,GAAGvD,GAChD4nC,cAAgB5S,EAAW5C,aAAa7uB,GAAGvD,GAC3CqoC,YAAcrT,EAAWrC,WAAWpvB,GAAGvD,GACvCsoC,WAAatT,EAAWH,SAAStxB,GAAGvD,GACpCuoC,iBAAmBvU,GAAeh0B,EAAGuD,EAAGyxB,EAAWnC,mBAInD2V,EAAU,eACPN,EADO,GAEPlT,GAsBP,OAnBAyF,GAAW+N,IAEX/jC,ENOsB,SAAC4iB,GAAW,IAC1BrnB,EAAwEqnB,EAAxErnB,EAAGuD,EAAqE8jB,EAArE9jB,EAAGqkC,EAAkEvgB,EAAlEugB,cAAe7R,EAAmD1O,EAAnD0O,SAAUtpB,EAAyC4a,EAAzC5a,SAAUktB,EAA+BtS,EAA/BsS,YAAa8O,EAAkBphB,EAAlBohB,cAE9D,GPbqC,KOa/Bb,EACF,MAAO,CACHzO,SAAU,GAIlB,IAAIxzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IACpBuzB,EAAKlxB,KAAKuD,MAAMrC,EAAI,GACpB6V,EAAe3M,EAAS8mB,GAAI5tB,GAEhC,OAAI2C,GAAyB2K,SAASmG,IAClCqvB,EAAclV,GAAI5tB,IAAM,EACxB+zB,GAAgB15B,EAAGuD,EAAGwyB,EAAUtpB,EAAUktB,GACnC,CACHR,SAAU,EACVF,UAAU,EACVD,OAAQ,IAIRyP,EAAclV,GAAI5tB,IAClB+zB,GAAgB15B,EAAGuD,EAAGwyB,EAAUtpB,EAAUktB,GACnC,CACHR,SAAU,EACVF,UAAU,EACVD,OAAQ,IAIL,CACHG,SAAU,EACVF,UAAU,EACVrD,cAAgB,4BAChBoD,OAAQ,GM3CX0P,CAAWF,IACTrP,SACH10B,EAAOw0B,WACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAGilC,EAAP,cAAkC/jC,EAAOmxB,cAAenxB,EAAOoxB,gBAIjFpxB,ECpC6B,SAAC4iB,GAAW,IACjCrnB,EAA2GqnB,EAA3GrnB,EAAGuD,EAAwG8jB,EAAxG9jB,EAAGq1B,EAAqGvR,EAArGuR,WAAYC,EAAyFxR,EAAzFwR,WAAY8B,EAA6EtT,EAA7EsT,UAAWD,EAAkErT,EAAlEqT,eAAgBf,EAAkDtS,EAAlDsS,YAAavF,EAAqC/M,EAArC+M,UAAWC,EAA0BhN,EAA1BgN,YAAa0B,EAAa1O,EAAb0O,SAEtG,KACqB,IAAf6C,GAAqC,IAAfC,GACP,IAAfD,GAAqC,IAAfC,GAExB,MAAO,CACHM,SAAU,GAKlB,GAAoB,IAAfP,GAAqC,IAAfC,EAAmB,CAC1C,IAAIlzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IACpBuzB,EAAKlxB,KAAKuD,MAAMrC,EAAI,GACpB+zB,EAAQqD,EAAUpH,GAAI5tB,GACtBqZ,EAAUpd,GAAU01B,GACpB/Q,EAAQmU,EAAenH,GAAI5tB,GAC/B,GAAgB,IAAZqZ,EAAkB,CAClB,GdrB4B,IcqBxBuH,EAAmC,CACnC,IAAIzR,EAAW6kB,EAAYpG,GAAI5tB,GAgB/B,OAbiB,KAAbmP,IACAA,EAAW,GAII,IAAdsf,GAAqC,MAAhBC,EACtB0B,EAAS+D,KAAK8L,gBAGd7P,EAASqD,aAAatkB,GAAUolB,WAChCnE,EAASqD,aAAatkB,GAAUqlB,iBAG7B,CACHhB,SAAU,EACVF,UAAW,GAIf,MAAO,CACHE,SAAU,EACVvD,cAAgB,qBAChBqD,UAAW,GAKvB,MAAO,CACHE,SAAU,EACVF,UAAW,GAKnB,GAAoB,IAAfL,GAAqC,IAAfC,EAAmB,CAC1C,IAAIlzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IACpBuzB,EAAKlxB,KAAKuD,MAAMrC,EAAI,GACpB+zB,EAAQqD,EAAUpH,GAAI5tB,GACtBqZ,EAAUpd,GAAU01B,GACpB/Q,EAAQmU,EAAenH,GAAI5tB,GAC/B,GAAgB,IAAZqZ,EAAkB,CAClB,GdlE4B,IckExBuH,EAAmC,CACnC,IAAIzR,EAAW6kB,EAAYpG,GAAI5tB,GAgB/B,OAbiB,KAAbmP,IACAA,EAAW,GAII,IAAdsf,GAAqC,MAAhBC,EACtB0B,EAAS+D,KAAK8L,gBAGd7P,EAASqD,aAAatkB,GAAUolB,WAChCnE,EAASqD,aAAatkB,GAAUqlB,iBAG7B,CACHhB,SAAU,EACVF,UAAW,GAIf,MAAO,CACHE,SAAU,EACVF,UAAW,EACXrD,cAAgB,sBAK5B,MAAO,CACHuD,SAAU,EACVF,UAAW,ID9DV0P,CAAkBH,IAChBrP,SACH10B,EAAOw0B,WACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAGilC,EAAP,qBAAyC/jC,EAAOmxB,cAAenxB,EAAOoxB,kBAIxFpxB,EAASkjC,GAAgBa,IACdrP,UACH10B,EAAOw0B,WACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAGilC,EAAP,mBAAuC/jC,EAAOmxB,cAAenxB,EAAOoxB,eAE9EpxB,EAAO02B,OACP12B,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAGilC,MAGxB/jC,EAAOu0B,OACHC,QAWbx0B,EAASu2B,GAAY,eACdwN,EADa,CAEhB5Z,GAAI5uB,EACJ2uB,GAAIprB,EACJ2wB,UAAYzuB,GAAQzF,EAAGuD,EAAGyxB,EAAWtvB,SACrCyuB,YAActuB,GAAU7F,EAAGuD,EAAGyxB,EAAWlvB,WACzCi1B,cAAgB/F,EAAWxC,WAAWjvB,GAAGvD,GACzCm9B,iBAAmBnI,EAAWP,eAAelxB,GAAGvD,GAChD4oC,cAAgB5T,EAAW5C,aAAa7uB,GAAGvD,GAC3C+4B,YAAc/D,EAAWrC,WAAWpvB,GAAGvD,GACvC6oC,WAAa7T,EAAWH,SAAStxB,GAAGvD,OAE7Bm5B,UACH10B,EAAO02B,OACP12B,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAGyxB,EAAY5F,OAGrC3qB,EAAOw0B,WACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAGyxB,EAAP,2BAAuCh0B,GAASg0B,EAAWxC,WAAWjvB,GAAGvD,KAAOyE,EAAOmxB,cAAenxB,EAAOoxB,eAEtHpxB,EAAOu0B,OACHC,KAWwB,IAAhCiP,EAAkB9T,WAAuD,MAAlC8T,EAAkB7T,aAA2D,IAAjC6T,EAAkBtP,YAAuD,IAAjCsP,EAAkBrP,aACzI7D,EAAWe,SAASW,MAAU1B,EAAWe,SAASQ,SAAavB,EAAWe,SAASI,SACpFjB,GAAWgT,EAAkBloC,EAAI,EAAGkoC,EAAkB3kC,EAAGilC,IAGzDvP,GAAW,EACXvD,GAAWwS,EAAkBloC,EAAGkoC,EAAkB3kC,EAAGyxB,EAAY,6BAA8B,mCAKlE,IAAhCkT,EAAkB9T,WAAuD,MAAlC8T,EAAkB7T,cAEnB,IAAjC6T,EAAkBtP,YAAuD,IAAjCsP,EAAkBrP,aAEvD7D,EAAWe,SAASjM,MAAMgf,oBAK3B5T,GAAWgT,EAAkBloC,EAAGkoC,EAAkB3kC,EAAI,EAAGyxB,IAJzDiE,GAAW,EACXvD,GAAWwS,EAAkBloC,EAAGkoC,EAAkB3kC,EAAGyxB,EAAY,cAAe,mBAQjD,IAAjCkT,EAAkBtP,YAAuD,IAAjCsP,EAAkBrP,aAEvD7D,EAAWe,SAASjM,MAAMgf,oBAK3B5T,GAAWgT,EAAkBloC,EAAGkoC,EAAkB3kC,EAAI,EAAGyxB,IAJzDiE,GAAW,EACXvD,GAAWwS,EAAkBloC,EAAGkoC,EAAkB3kC,EAAGyxB,EAAY,cAAe,oBAQrF,CACHiE,SAAWA,EACXD,OAAQ,KAnFAjE,GAAa/0B,EAAGuD,EAAGyxB,GACZ,CACHiE,SAAWA,EACXD,OAAQ,KE3Df+P,GAAc,SAAC/oC,EAAGuD,EAAGyxB,EAAYG,GAqB1C,IApBA,IAAI1wB,EAEAmqB,EACAD,EAFAsK,GAAW,EAIXiP,EAAoB,CACpBloC,EAAIA,EACJuD,EAAIA,EACJq1B,WAAav2B,KAAKuD,MAAM5F,EAAI,IAC5B64B,WAAax2B,KAAKuD,MAAMrC,EAAI,GAC5B6wB,UAAY3uB,GAAQzF,EAAGuD,EAAGyxB,EAAWtvB,SACrC2uB,YAAcxuB,GAAU7F,EAAGuD,EAAGyxB,EAAWlvB,WACzCqiC,cAAgBnT,EAAWxC,WAAWjvB,GAAGvD,GACzCooC,iBAAmBpT,EAAWP,eAAelxB,GAAGvD,GAChD4nC,cAAgB5S,EAAW5C,aAAa7uB,GAAGvD,GAC3CqoC,YAAcrT,EAAWrC,WAAWpvB,GAAGvD,GACvCsoC,WAAatT,EAAWH,SAAStxB,GAAGvD,GACpCuoC,iBAAmBvU,GAAeh0B,EAAGuD,EAAGyxB,EAAWnC,mBAlBO,WAqBrD8F,GACL,OAAQA,GACJ,KAAK,EACD/J,EAAK5uB,EACL2uB,EAAKprB,EAAI,EACT,MAEJ,KAAK,EACDqrB,EAAK5uB,EAAI,EACT2uB,EAAKprB,EACL,MAEJ,KAAK,EACDqrB,EAAK5uB,EACL2uB,EAAKprB,EAAI,EACT,MAEJ,KAAK,EACDqrB,EAAK5uB,EAAI,EACT2uB,EAAKprB,EAOb,IAAKuwB,GAAWlF,EAAID,EAAIqG,EAAW/D,YAAa+D,EAAW9D,aACvD,iBAGJ,IAAI8X,EAAiB,CACjBpa,GAAKA,EACLD,GAAKA,EACLsa,WAAa5mC,KAAKuD,MAAMgpB,EAAK,IAC7Bsa,WAAa7mC,KAAKuD,MAAM+oB,EAAK,GAC7BuF,UAAYzuB,GAAQmpB,EAAID,EAAIqG,EAAWtvB,SACvCyuB,YAActuB,GAAU+oB,EAAID,EAAIqG,EAAWlvB,WAC3Ci1B,cAAgB/F,EAAWxC,WAAW7D,GAAIC,GAC1CuO,iBAAmBnI,EAAWP,eAAe9F,GAAIC,GACjDga,cAAgB5T,EAAW5C,aAAazD,GAAIC,GAC5CmK,YAAc/D,EAAWrC,WAAWhE,GAAIC,GACxCia,WAAa7T,EAAWH,SAASlG,GAAIC,GACrCua,iBAAmBnV,GAAeh0B,EAAGuD,EAAGyxB,EAAWnC,kBACnDsC,gBAAkBA,GAGlB9N,EAAK,aACLsR,EAAIA,GACDuP,EAFE,GAGFc,EAHE,GAIFhU,GAIP,GAAI3N,EAAM+hB,oBACDnV,GAAe5M,EAAMrnB,EAAGqnB,EAAM9jB,EAAG8jB,EAAMuH,GAAIvH,EAAMsH,GAAItH,EAAM4J,YAAa5J,EAAM6J,YAAa7J,EAAM3hB,QAAS2hB,EAAMvhB,WAEjH,OADAmzB,GAAW,EACX,WAMR,IADAx0B,ECpFwB,SAAC4iB,GAAW,IAGpC5iB,EAFIzE,EAA8IqnB,EAA9IrnB,EAAGuD,EAA2I8jB,EAA3I9jB,EAAGqrB,EAAwIvH,EAAxIuH,GAAID,EAAoItH,EAApIsH,GAAIgK,EAAgItR,EAAhIsR,EAAGzE,EAA6H7M,EAA7H6M,UAAWC,EAAkH9M,EAAlH8M,YAAa4B,EAAqG1O,EAArG0O,SAAUlD,EAA2FxL,EAA3FwL,iBAAkB5B,EAAyE5J,EAAzE4J,YAAaC,EAA4D7J,EAA5D6J,YAAaxrB,EAA+C2hB,EAA/C3hB,QAASI,EAAsCuhB,EAAtCvhB,UAAWsuB,EAA2B/M,EAA3B+M,UAAWC,EAAgBhN,EAAhBgN,YAGlI1uB,EAAKtD,KAAKuD,MAAM5F,EAAI,IAGxB,GhBmnBoC,IgBnnBhC6yB,EAFKxwB,KAAKuD,MAAMrC,EAAI,IAECoC,GACrB,MAAO,CACHwzB,SAAU,EACVF,UAAW,EACXD,OAAQ,GAIhB,IAAK/E,GAAej0B,EAAGuD,EAAGqrB,EAAID,EAAIsC,EAAaC,EAAaxrB,EAASI,GAAY,CAG7E,GAAmB,IAAdsuB,GAAqC,MAAhBC,GACZ,IAANsE,EACA,MAAO,CACHQ,SAAU,EACVF,UAAW,EACXD,OAAQ,GAMpB,GACoB,IAAd5E,GAAqC,MAAhBC,GACP,IAAdD,GAAqC,MAAhBC,GAEvB,GAAU,IAANsE,EAIA,MAAO,CACHQ,SAAU,EACVF,UAAW,EACXD,OAAQ,QAMf,GACe,IAAd5E,GAAqC,MAAhBC,GACP,IAAdD,GAAqC,MAAhBC,GAEvB,GAAU,IAANsE,EAIA,MAAO,CACHQ,SAAU,EACVF,UAAW,EACXD,OAAQ,OAMf,IACe,IAAd5E,GAAqC,MAAhBC,GACP,IAAdD,GAAqC,MAAhBC,GACP,IAAdD,GAAqC,MAAhBC,EAEvB,MACW,CACH8E,SAAU,EACVF,UAAW,EACXD,OAAQ,GAaf,GACe,IAAd5E,GAAqC,MAAhBC,GACP,IAAdD,GAAqC,KAAhBC,GAEvB,GAAI1F,IAAOprB,EACP,MAAO,CACH41B,SAAU,EACVF,UAAW,EACXD,OAAQ,OAMf,IACe,IAAd5E,GAAqC,MAAhBC,EAEvB,MAAO,CACH8E,SAAU,EACVF,UAAW,EACXD,OAAQ,GAIX,GAAIrK,IAAOprB,EACZ,MAAO,CACH41B,SAAU,EACVF,UAAW,EACXD,OAAQ,KAMpB,OAAQ9E,GACJ,KAAK,EACD,OAAQC,GAEJ,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAAO1vB,GAAS,EAAM,MAG3B,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAAOA,EAASsxB,EAASQ,QAAS,MACvC,KAAK,GACL,KAAK,GAAO9xB,EAAUsxB,EAASQ,SAAWR,EAASM,OAAWN,EAASC,cAAgB,MAGvF,KAAK,IACL,KAAK,IAAOvxB,EAAUsxB,EAASQ,SAAWR,EAASM,MAAQ,MAG3D,KAAK,IACL,KAAK,IAAO5xB,EAASsxB,EAASa,SAAU,MACxC,KAAK,IAAOnyB,GAAS,EAAM,MAC3B,KAAK,IAAOA,EAASsxB,EAASa,SAAU,MACxC,KAAK,GAAOnyB,EAASsxB,EAASQ,QAAS,MACvC,KAAK,GAAO9xB,GAAS,EAAM,MAC3B,KAAK,GACL,KAAK,GAGL,KAAK,IACL,KAAK,IAAOA,EAASsxB,EAASa,SAAU,MACxC,KAAK,IACL,KAAK,IAAOnyB,EAAUsxB,EAASQ,SAAWR,EAASI,SAAW,MAC9D,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAGL,KAAK,IACL,KAAK,IAAO1xB,EAASsxB,EAASQ,QAAS,MACvC,KAAK,IAAO9xB,GAAS,EAAM,MAC3B,KAAK,IAAOA,EAASsxB,EAASQ,QAAS,MACvC,KAAK,IACL,KAAK,IAAO9xB,GAAS,EAAM,MAG3B,KAAK,IACL,KAAK,IAAOA,EAASsxB,EAASQ,QAAS,MAEvC,QAAY9xB,GAAS,EAEzB,MAEJ,KAAK,EACD,OAAQ0vB,GAEJ,KAAK,IACL,KAAK,IAAO1vB,GAAS,EAAM,MAG3B,KAAK,GAAOA,EAASsxB,EAASK,SAAWL,EAASQ,QAAS,MAC3D,KAAK,GAAO9xB,EAASsxB,EAASK,QAAS,MACvC,KAAK,GACL,KAAK,GAAO3xB,EAASsxB,EAASK,SAAWL,EAASQ,QAAS,MAC3D,KAAK,IACL,KAAK,IACL,KAAK,IAAO9xB,EAASsxB,EAASQ,QAAS,MACvC,KAAK,IAAO9xB,EAAUsxB,EAASQ,SAAWR,EAASM,OAAUN,EAASI,SAAU,MAChF,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAAO1xB,EAASsxB,EAASQ,QAAS,MAGvC,KAAK,IACL,KAAK,IACL,KAAK,IAAO9xB,EAASsxB,EAASa,SAAU,MACxC,KAAK,IAAOnyB,EAASsxB,EAASa,UAAYb,EAASQ,QAAS,MAC5D,KAAK,IAAO9xB,GAAS,EAAM,MAC3B,KAAK,IAAOA,EAASsxB,EAASa,SAAU,MAExC,QAAYnyB,GAAS,EAEzB,MAEJ,QACIA,GAAS,EAKjB,MAAO,CACH00B,SAAU,EACVF,UAJYx0B,EAKZmxB,cAAe,cACfoD,MAAQv0B,GDtIC4kC,CAAiBhiB,IACf8R,QAAS,CAChB,GAAI10B,EAAOw0B,SAGP,OAFAA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAP,oBAAmC5iB,EAAOmxB,cAAenxB,EAAOoxB,cAC1E,WAGJ,IAAKpxB,EAAOu0B,MACR,iBAoER,IA/DAv0B,EEnGoB,SAAC4iB,GAAW,IAC5BrnB,EAAmEqnB,EAAnErnB,EAAGuD,EAAgE8jB,EAAhE9jB,EAAG6wB,EAA6D/M,EAA7D+M,UAAWC,EAAkDhN,EAAlDgN,YAAa0B,EAAqC1O,EAArC0O,SAAU6C,EAA2BvR,EAA3BuR,WAAYC,EAAexR,EAAfwR,WAG5D,OAAmB,IAAdzE,GAAqC,KAAhBC,GAAyC,IAAfuE,GAAqC,IAAfC,EAClE9C,EAASK,QACF,CACH+C,SAAU,EACVgC,MAAQ,CAAC,CAACn7B,EAAIA,EAAI,EAAGuD,EAAIA,IACzB01B,UAAW,GAIR,CACHE,SAAU,EACVF,UAAW,EACXrD,cAAe,UACfC,aAAe,CjB4CS,IiBtCjB,IAAdzB,GAAqC,KAAhBC,GAAyC,IAAfuE,GAAqC,IAAfC,EAClE9C,EAASK,QACF,CACH+C,SAAU,EACVgC,MAAQ,CAAC,CAACn7B,EAAIA,EAAI,EAAGuD,EAAGA,IACxB01B,UAAW,GAIR,CACHE,SAAU,EACVF,UAAW,EACXrD,cAAe,UACfC,aAAe,CjByBS,IiBpB7B,CACHsD,SAAU,GFyDDmQ,CAAajiB,IACX8R,UACH10B,EAAOw0B,UACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAP,gBAA+B5iB,EAAOmxB,cAAenxB,EAAOoxB,eAEjEpxB,EAAO02B,OACR12B,EAAO02B,MAAMj5B,OAAS,GACtBuC,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,QAOrC5iB,EGnHgB,SAAC4iB,GAAW,IAC1BrnB,EAAmEqnB,EAAnErnB,EAAGuD,EAAgE8jB,EAAhE9jB,EAAG6wB,EAA6D/M,EAA7D+M,UAAWC,EAAkDhN,EAAlDgN,YAAa0B,EAAqC1O,EAArC0O,SAAU6C,EAA2BvR,EAA3BuR,WAAYC,EAAexR,EAAfwR,WAG1D,OAAmB,IAAdzE,GAAqC,KAAhBC,GAAyC,IAAfuE,GAAqC,IAAfC,EAClE9C,EAASG,IACF,CACHiD,SAAU,EACVgC,MAAQ,CAAC,CAACn7B,EAAIA,EAAGuD,EAAIA,EAAI,IACzB01B,UAAW,GAIR,CACHE,SAAU,EACVF,UAAW,EACXrD,cAAgB,MAChBC,aAAe,ClB0CS,IkBrC7B,CACHsD,SAAU,GH4FDoQ,CAASliB,IACP8R,UACH10B,EAAOw0B,UACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAO,YAAa5iB,EAAOmxB,cAAenxB,EAAOoxB,eAE7DpxB,EAAO02B,OACR12B,EAAO02B,MAAMj5B,OAAS,GACtBuC,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,QAMrC5iB,EIpHoB,SAAC4iB,GAAW,IAC5BrnB,EAAyHqnB,EAAzHrnB,EAAGuD,EAAsH8jB,EAAtH9jB,EAAGqrB,EAAmHvH,EAAnHuH,GAAID,EAA+GtH,EAA/GsH,GAAIoH,EAA2G1O,EAA3G0O,SAAUlB,EAAiGxN,EAAjGwN,SAAUzC,EAAuF/K,EAAvF+K,aAAcgC,EAAyE/M,EAAzE+M,UAAWnD,EAA8D5J,EAA9D4J,YAAaC,EAAiD7J,EAAjD6J,YAAaxrB,EAAoC2hB,EAApC3hB,QAASI,EAA2BuhB,EAA3BvhB,UAAW6zB,EAAgBtS,EAAhBsS,YAGjH,IAAK1F,GAAej0B,EAAGuD,EAAGqrB,EAAID,EAAIsC,EAAaC,EAAaxrB,EAASI,GACjE,MAAO,CACHqzB,SAAU,GAIlB,IAAIxzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IAEpB8U,EAAW6kB,EADNt3B,KAAKuD,MAAMrC,EAAI,IACOoC,GAG/B,GAAmB,IAAdyuB,GAAqBjE,GAAoBld,SAAS6B,GACnD,MAAO,CACHqkB,SAAU,GAIlB,IAAMqQ,EAAa,SAAbA,EAAcxpC,EAAGuD,EAAGqrB,EAAID,EAAI8a,EAAQC,EAAgBC,GAEtD,IAAIhR,EACApE,EACAD,EACAuI,EAEJ,IAAKlE,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACrB,OAAQA,GACJ,KAAK,EACDpE,EAAK3F,EACL0F,EAAK3F,EAAK,EACV,MAEJ,KAAK,EACD4F,EAAK3F,EAAK,EACV0F,EAAK3F,EACL,MAEJ,KAAK,EACD4F,EAAK3F,EACL0F,EAAK3F,EAAK,EACV,MAEJ,KAAK,EACD4F,EAAK3F,EAAK,EACV0F,EAAK3F,EAQb,GAAKsF,GAAej0B,EAAGuD,EAAGgxB,EAAID,EAAIrD,EAAaC,EAAaxrB,EAASI,GAOrE,GAHA+2B,EAAYzK,EAAakC,GAAIC,GAGzBqV,EAAmB32B,SAAS4pB,GAAY,CAExC,IADA,IAAIj6B,EAAQ,EACHhC,EAAI,EAAGA,EAAI6oC,EAAOvnC,OAAQtB,IAC1B6oC,EAAO7oC,GAAGZ,IAAMu0B,GAAQkV,EAAO7oC,GAAG2C,IAAM+wB,GACzC1xB,IAIM,IAAVA,IACA6mC,EAAOlgC,KAAK,CAACvJ,EAAIu0B,EAAIhxB,EAAI+wB,IACzBkV,EAAWxpC,EAAGuD,EAAGgxB,EAAID,EAAImV,EAAQC,EAAgBC,SAKpD,GAAI9M,IAAc3N,GAAe,CAElC,IADA,IAAItsB,EAAQ,EACHhC,EAAI,EAAGA,EAAI8oC,EAAexnC,OAAQtB,IAClC8oC,EAAe9oC,GAAGZ,IAAMu0B,GAAQmV,EAAe9oC,GAAG2C,IAAM+wB,GACzD1xB,IAGM,IAAVA,IACK5C,IAAMu0B,GAAQhxB,IAAM+wB,GACrBoV,EAAengC,KAAK,CAACvJ,EAAIu0B,EAAIhxB,EAAI+wB,UAMxC,GAAIuI,IAAcrN,GAAe,CAElC,IADA,IAAI5sB,EAAQ,EACHhC,EAAI,EAAGA,EAAI+oC,EAASznC,OAAQtB,IAC5B+oC,EAAS/oC,GAAGZ,IAAMu0B,GAAQoV,EAAS/oC,GAAG2C,IAAM+wB,GAC7C1xB,IAGM,IAAVA,IACK5C,IAAMu0B,GAAQhxB,IAAM+wB,GACrBqV,EAASpgC,KAAK,CAACvJ,EAAIu0B,EAAIhxB,EAAI+wB,QAOzCuV,EAAmB,SAACH,EAAgBC,GAEtC,IAAIG,EAAyBJ,EAAepyB,QAAO,SAAAtL,GAAC,OnB9HpB,ImB8HwB6oB,EAAS7oB,EAAEzI,GAAGyI,EAAEhM,MACpE+pC,EAAmBJ,EAASryB,QAAO,SAAAtL,GAAC,OnB/HR,ImB+HY6oB,EAAS7oB,EAAEzI,GAAGyI,EAAEhM,MAE5D,OAAK8pC,EAAuB5nC,OAAS,GAAO6nC,EAAiB7nC,OAAS,EAE5D6zB,EAASjM,MAAMwc,SAAWvQ,EAASC,eAUrC8T,EAAuB5nC,OAAS,GAChC4nC,EAAuBlzB,SAAQ,SAAA5K,GAC3BmvB,EAAM5xB,KAAK,CAACvJ,EAAIgM,EAAEhM,EAAGuD,EAAIyI,EAAEzI,OAI7BwyB,EAASY,OAASZ,EAASK,SAU7BuT,EAASznC,OAAS,GAClBynC,EAAS/yB,SAAQ,SAAA5K,GACbmvB,EAAM5xB,KAAK,CAACvJ,EAAIgM,EAAEhM,EAAGuD,EAAIyI,EAAEzI,OAI5B,CACH41B,SAAU,EACVF,UAAW,EACXkC,MAAQA,IAlBD,CACHhC,SAAU,EACVF,UAAW,EACXrD,cAAgB,mBAChBC,aAAe,CnBlFK,GAPA,GmB0FpBsF,MAAQA,IArBL,CACHhC,SAAU,EACVF,UAAW,EACXD,OAAQ,EACRpD,cAAgB,2BAChBuF,MAAQA,GAiCT,CACHhC,SAAU,IAKlByQ,EAAqB,CAACxa,GAAaC,GAAkBO,IACrD6Z,EAAS,GACTC,EAAiB,GACjBC,EAAW,GACXxO,EAAQ,GACRyM,EAAgBxV,EAAa7uB,GAAGvD,GAChC0V,EAAW0c,EAAazD,GAAIC,GAEhC,OAAIgZ,IAAkB1Y,GACd0a,EAAmB32B,SAASyC,IAC5B8zB,EAAWxpC,EAAGuD,EAAGqrB,EAAID,EAAI8a,EAAQC,EAAgBC,GACpCE,EAAiBH,EAAgBC,InB1IjB,KmB6IxBj0B,EACCqgB,EAASY,OAASZ,EAASK,SAAWL,EAASU,QAAUV,EAAS+E,WAUpE0O,EAAWxpC,EAAGuD,EAAGqrB,EAAID,EAAI8a,EAAQC,EAAgBC,GACpCE,EAAiBH,EAAgBC,IAVvC,CACHxQ,SAAU,EACVF,UAAW,EACXkC,MAAQA,EACRvF,cAAgB,qBAChBC,aAAe,CnB/HK,GAPA,EAKA,EA+BA,KmB4GrB,CACHsD,SAAU,GAKf,CACHA,SAAU,GJlFD6Q,CAAa3iB,IACX8R,UACH10B,EAAOw0B,WACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAP,gBAA+B5iB,EAAOmxB,cAAenxB,EAAOoxB,eAEtEpxB,EAAO02B,OACH12B,EAAO02B,MAAMj5B,OAAS,GACtBuC,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,QAOrC5iB,ELxIqB,SAAC4iB,GAAW,IAIjC5iB,EAFEzE,EAAuBqnB,EAAvBrnB,EAAGuD,EAAoB8jB,EAApB9jB,EAUT,OAV6B8jB,EAAjB+K,aAGgB7uB,GAAGvD,KAOdqvB,GACN,CACH8J,SAAU,IAIlB10B,EAASw4B,GAAkB5V,IAChB8R,UAIX10B,EAASy4B,GAAmB7V,IACjB8R,UAIX10B,EAASg4B,GAAgBpV,IACd8R,UAIX10B,EAASu4B,GAAkB3V,IAChB8R,QAdA10B,EAkBJ,CACH00B,SAAU,GKiGD8Q,CAAc5iB,IACZ8R,UACH10B,EAAOw0B,UACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAO,iBAAkB5iB,EAAOmxB,cAAenxB,EAAOoxB,eAElEpxB,EAAO02B,OACR12B,EAAO02B,MAAMj5B,OAAS,GACtBuC,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,QAMrC5iB,EN5IoB,SAAC4iB,GAAW,IAC5BrnB,EAAsHqnB,EAAtHrnB,EAAGuD,EAAmH8jB,EAAnH9jB,EAAGqrB,EAAgHvH,EAAhHuH,GAAID,EAA4GtH,EAA5GsH,GAAIoH,EAAwG1O,EAAxG0O,SAAU4C,EAA8FtR,EAA9FsR,EAAGvG,EAA2F/K,EAA3F+K,aAAcnB,EAA6E5J,EAA7E4J,YAAaC,EAAgE7J,EAAhE6J,YAAaxrB,EAAmD2hB,EAAnD3hB,QAASI,EAA0CuhB,EAA1CvhB,UAAW0sB,EAA+BnL,EAA/BmL,WAAYiC,EAAmBpN,EAAnBoN,eAEvGmT,EAAgBxV,EAAa7uB,GAAGvD,GAChC0V,EAAW0c,EAAazD,GAAIC,GAI5BuM,EAAQ,GAMZ,OAAIyM,IAAkBvY,GACX,CACH8J,SAAU,EACVF,UAAW,GAZM,CAAC7J,GAAaC,GAAkBO,IAgBlC3c,SAASyC,GACrBwlB,GAAY7T,EAAOrnB,EAAGuD,EAAGqrB,EAAID,EAAIgK,EAAG5C,EAAU,EAAG9E,EAAaC,EAAaxrB,EAASI,EAAWq1B,GAf3F,EAe4G3I,EAAYiC,GTIlG,KSF5B/e,EACCqgB,EAASY,OAASZ,EAASK,SAAWL,EAASU,OAW1CyE,GAAY7T,EAAOrnB,EAAGuD,EAAGqrB,EAAID,EAAIgK,EAAG5C,EAAU,EAAG9E,EAAaC,EAAaxrB,EAASI,EAAWq1B,GA7B/F,EA6BgH3I,EAAYiC,GAV5H,CACH0E,SAAU,EACVF,UAAW,EACXkC,MAAQA,EACRnC,OAAQ,EACRpD,cAAgB,qBAChBC,aAAe,CTeS,GAPA,EAKA,EA+BA,KSpCzB,CACHsD,SAAU,EACVF,UAAW,GMkGNiR,CAAa7iB,IACX8R,QAAS,CAChB,GAAI10B,EAAOw0B,SAUP,OATAA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAO,gBAAiB5iB,EAAOmxB,cAAenxB,EAAOoxB,cAElEpxB,EAAO02B,MAAMj5B,OAAS,GACtBuC,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,MAI7B,WAEK5iB,EAAO02B,MAAMj5B,OAAS,GAC3BuC,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,MASjC,Gf5LgC,Ie4L5BA,EAAMwhB,WACN,iBAKJ,IADApkC,EAASi0B,GAAcrR,IACZ8R,QAAS,CAChB,GAAI10B,EAAOw0B,SAGP,OAFAA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAP,uBAAsC5iB,EAAOmxB,cAAenxB,EAAOoxB,cAC7E,WAEJ,IAAKpxB,EAAOu0B,MACR,iBAEAv0B,EAAO0wB,kBACP9N,EAAM8N,gBAAkB1wB,EAAO0wB,iBAMvC,IADA1wB,EAASu2B,GAAY3T,IACV8R,UACH10B,EAAO02B,OACP12B,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,EAAO+H,OAGhC3qB,EAAOw0B,WACPA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAP,2BAAkCrmB,GAASqmB,EAAM0T,gBAAkBt2B,EAAOmxB,cAAenxB,EAAOoxB,gBAEzGpxB,EAAOu0B,OACR,iBAKR,IADAv0B,EK9KqB,SAAC4iB,GAAW,IAGjC5iB,EAFEmqB,EAA0EvH,EAA1EuH,GAAID,EAAsEtH,EAAtEsH,GAAIoH,EAAkE1O,EAAlE0O,SAAU4C,EAAwDtR,EAAxDsR,EAAGvG,EAAqD/K,EAArD+K,aAAcO,EAAuCtL,EAAvCsL,WAAYuB,EAA2B7M,EAA3B6M,UAAWC,EAAgB9M,EAAhB8M,YAG5Dze,EAAW0c,EAAazD,GAAIC,GAC5BkK,EAASnG,EAAWhE,GAAIC,GAghC5B,OAJgB,MAAXkK,GAA2B,IAANH,IACtBjjB,EAAW6Z,IAGP7Z,GACJ,KAAKwZ,GAA4BzqB,EA/gCX,SAAC4iB,GAAW,IAC1B+M,EAAwC/M,EAAxC+M,UAAWC,EAA6BhN,EAA7BgN,YAAa0E,EAAgB1R,EAAhB0R,YAOhC,OAJmB,IAAd3E,GAAqC,MAAhBC,GAA0C,MAAhB0E,GAChDhD,EAASjM,MAAMgf,sBAGZ,CACH7P,UAAW,EACXD,OAAQ,GAqgC8BmD,CAAkB9U,GAAQ,MACpE,KAAK8H,GAA4B1qB,EAlgCjB,SAAC4iB,GAAW,IACpBrnB,EAAkEqnB,EAAlErnB,EAAGuD,EAA+D8jB,EAA/D9jB,EAAGqrB,EAA4DvH,EAA5DuH,GAAID,EAAwDtH,EAAxDsH,GAAIsC,EAAoD5J,EAApD4J,YAAaC,EAAuC7J,EAAvC6J,YAAaxrB,EAA0B2hB,EAA1B3hB,QAASI,EAAiBuhB,EAAjBvhB,UAAW6yB,EAAMtR,EAANsR,EAGpE,IAAM1E,GAAej0B,EAAGuD,EAAGqrB,EAAID,EAAIsC,EAAaC,EAAaxrB,EAASI,IAAsB,IAAN6yB,EAAU,CAG5F,IAFA,IAAIrE,EAAK3F,EAAK,EAEPmF,GAAWlF,EAAI0F,EAAIrD,EAAaC,IAAc,CACjD,IAAIiZ,EAAY/X,EAAakC,GAAI1F,GAEjC,GAAI,CAACM,GAAeG,GAAkBG,GAAeE,GAAmBC,GAAmBP,GAAaQ,GAAuBH,IAAoBxc,SAASk3B,GACxJ,MAAO,CACHlR,UAAW,EACXD,OAAQ,EACRmC,MAAQ,CAAC,CAACn7B,EAAI4uB,EAAIrrB,EAAG+wB,KAI7BA,IAGJ,MAAO,CACH2E,UAAW,EACXD,OAAQ,GAIhB,MAAO,CACHC,UAAW,EACXD,OAAQ,GAq+B8BkD,CAAY7U,GAAQ,MAC9D,KpB5jCiC,EoB4jCA5iB,EAl+BnB,SAAC4iB,GAGf,OAFmBA,EAAb0O,SAEQC,cASH,CACHiD,UAAW,EACXD,OAAQ,GAVL,CACHC,UAAW,EACXrD,cAAgB,iBAChBC,aAAe,CpBrDS,GoBsDxBmD,OAAQ,GA09B0B4L,CAAUvd,GAAQ,MAC5D,KpB5jCiC,EoB4jCA5iB,EAh9Bb,SAAC4iB,GAAW,IACxBrnB,EAAkDqnB,EAAlDrnB,EAAGuD,EAA+C8jB,EAA/C9jB,EAAGqrB,EAA4CvH,EAA5CuH,GAAID,EAAwCtH,EAAxCsH,GAAIoH,EAAoC1O,EAApC0O,SAAU4D,EAA0BtS,EAA1BsS,YAGhC,GpBhIgC,IoB6H0BtS,EAAbwN,SAGhClG,GAAIC,GACb,MAAO,CACHqK,UAAW,EACXD,OAAQ,GAIhB,IAAIrzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IACpBuzB,EAAKlxB,KAAKuD,MAAMrC,EAAI,GACpBuR,EAAW6kB,EAAYpG,GAAI5tB,GAO/B,GAJiB,KAAbmP,IACAA,EAAW,GAGXihB,EAASqD,aAAatkB,GAAUolB,SAAW,EAAG,CAC9CnE,EAASqD,aAAatkB,GAAUolB,WAChCnE,EAASqD,aAAatkB,GAAUs1B,eAEhC,IAAIC,EAAiB,GAGrB,IAAK1kC,EAAKipB,EAAK,EAAGjpB,GAAMipB,EAAK,EAAGjpB,IAC5B,IAAK4tB,EAAK5E,EAAK,EAAG4E,GAAM5E,EAAK,EAAG4E,IpBxIP,IoByIjBnB,EAAamB,GAAI5tB,IACjB0kC,EAAe9gC,KAAK,CAACvJ,EAAI2F,EAAIpC,EAAIgwB,IAK7C,MAAO,CACH0F,UAAW,EACXkC,MAAQkP,EACRrR,OAAQ,GAIhB,MAAO,CACHC,UAAW,EACXrD,cAAgB,YAChBC,aAAe,CpBpFa,IoBqF5BmD,OAAQ,GAk6B8BsR,CAAgBjjB,GAAQ,MAClE,KpB5jCiC,EoB4jCA5iB,EA/5BZ,SAAC4iB,GAAW,IACzBrnB,EAA0FqnB,EAA1FrnB,EAAGuD,EAAuF8jB,EAAvF9jB,EAAGqrB,EAAoFvH,EAApFuH,GAAID,EAAgFtH,EAAhFsH,GAAIsC,EAA4E5J,EAA5E4J,YAAaC,EAA+D7J,EAA/D6J,YAAayJ,EAAkDtT,EAAlDsT,UAAWD,EAAuCrT,EAAvCqT,eAAgBh1B,EAAuB2hB,EAAvB3hB,QAASI,EAAcuhB,EAAdvhB,UAEpF,IAAMmuB,GAAej0B,EAAGuD,EAAGqrB,EAAID,EAAIsC,EAAaC,EAAaxrB,EAASI,GAClE,MAAO,CACHmzB,UAAW,EACXD,OAAQ,GAIhB,IAAIrzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IACpBuzB,EAAKlxB,KAAKuD,MAAMrC,EAAI,GACpB+zB,EAAQqD,EAAUpH,GAAI5tB,GACtBqZ,EAAUpd,GAAU01B,GACpB/Q,EAAQmU,EAAenH,GAAI5tB,GAG/B,OAAiB,IAAZqZ,GAAkC,IAAZA,GAAkC,IAAZA,GAAkC,KAAZA,IpB7LvC,IoB8LxBuH,EACO,CACH0S,UAAU,EACVD,OAAQ,GAYb,CACHC,UAAW,EACXrD,cAAgB,oBAChBoD,OAAQ,GA23B8BuR,CAAiBljB,GAAQ,MACnE,KpB5jCiC,EoB4jCA5iB,EAx3Bd,SAAC4iB,GAGpB,OAFmBA,EAAb0O,SAEQW,KASP,CACHuC,UAAW,EACXD,OAAQ,GAVD,CACHC,UAAW,EACXrD,cAAgB,OAChBC,aAAe,CpBxJS,IoByJxBmD,OAAQ,GAg3B0BwR,CAAenjB,GAAQ,MACjE,KpB3jCiC,EoB2jCA5iB,EAv2Bb,SAAC4iB,GAGrB,OAFmBA,EAAb0O,SAEQY,MASP,CACHsC,UAAW,EACXD,OAAQ,GAVD,CACHC,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CpBzKS,IoB0KxBmD,OAAQ,GA+1B0ByR,CAAgBpjB,GAAQ,MAClE,KAAK+H,GAA4B3qB,EAr1B1B,CACHw0B,UAAW,EACXD,OAAQ,GAm1BgD,MAC5D,KAAK3J,GAA4B5qB,EAh1BjB,SAAC4iB,GAGjB,OAFmBA,EAAb0O,SAEQa,SASH,CACHqC,UAAW,EACXD,OAAQ,GAVL,CACHC,UAAW,EACXrD,cAAgB,WAChBC,aAAe,CpBjMS,IoBkMxBmD,OAAQ,GAw0B0B0R,CAAYrjB,GAAQ,MAC9D,KAAKiI,GAA4B7qB,EA9zBb,SAAC4iB,GAAW,IAExBsR,EAAgEtR,EAAhEsR,EAAG5C,EAA6D1O,EAA7D0O,SAAU3B,EAAmD/M,EAAnD+M,UAAWC,EAAwChN,EAAxCgN,YAAa4U,EAA2B5hB,EAA3B4hB,WAAYC,EAAe7hB,EAAf6hB,WAErDlQ,GAAQ,EAEZ,QAAQ,GAEJ,KAAoB,IAAd5E,GAAqC,IAAhBC,EAC3B,KAAoB,IAAdD,GAAqC,IAAhBC,EAG3B,KAAoB,IAAdD,GAAqC,KAAhBC,EAC3B,KAAoB,IAAdD,GAAqC,KAAhBC,EAAwB2E,GAAQ,EAAM,MAGjE,KAAoB,IAAd5E,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAGf2E,EAFY,IAAfiQ,GAAqC,IAAfC,GACb,IAANvQ,EAUR,MAGJ,KAAoB,IAAdvE,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAO,MAClE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,MAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,MAAhBC,EAGf2E,EAFY,IAAfiQ,GAAqC,IAAfC,GACb,IAANvQ,EAUR,MAGJ,KAAoB,IAAdvE,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MAGjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAO,MAClE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MAGjE,KAAoB,IAAd5E,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAwB2E,GAAQ,EAAO,MAClE,KAAoB,IAAd5E,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAiD2E,EAAlB,IAANL,GAAmB,IAANA,EAAyC,MAC1G,KAAoB,IAAdvE,GAAqC,KAAhBC,EAG3B,KAAoB,IAAdD,GAAqC,KAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,KAAhBC,EAC3B,KAAoB,IAAdD,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,KAAhBC,EAAiD2E,EAAlB,IAANL,GAAmB,IAANA,EAAyC,MAC1G,KAAoB,IAAdvE,GAAqC,KAAhBC,EAG3B,KAAoB,IAAdD,GAAqC,IAAhBC,EAAwB2E,GAAQ,EAAM,MAGjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAoC2E,EAAL,IAANL,EAAyC,MAC7F,KAAoB,IAAdvE,GAAqC,MAAhBC,EAC3B,KAAoB,IAAdD,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAEnB2E,EADgB,IAAfiQ,GAAqC,IAAfC,GAA4B,IAANvQ,EAMjD,MACJ,KAAoB,IAAdvE,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAO,MAClE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAEnB2E,EADgB,IAAfiQ,GAAqC,IAAfC,EACR,IAANvQ,EAEY,IAAfsQ,GAAqC,IAAfC,EACb,IAANvQ,IAGQ,IAAfsQ,GAAqC,IAAfC,GACP,IAAfD,GAAqC,IAAfC,GAO5B,MACJ,KAAoB,IAAd9U,GAAqC,MAAhBC,EAC3B,KAAoB,IAAdD,GAAqC,MAAhBC,EAC3B,KAAoB,IAAdD,GAAqC,MAAhBC,EAAwB2E,GAAQ,EAAM,MACjE,KAAoB,IAAd5E,GAAqC,MAAhBC,EAAwB2E,EAASjD,EAASY,MAAQ,MAC7E,KAAoB,IAAdvC,GAAqC,MAAhBC,EAAwB2E,EAASjD,EAAS+D,KAAKC,UAAchE,EAAS+D,KAAK8L,cAAgB,EAAI,MAC1H,QACI5M,GAAQ,EACRlwB,QAAQ4O,IAAR,uCAA4C0c,EAA5C,mBAAgEpzB,GAASqzB,KAIjF,MAAO,CACH8E,SAAU,EACVF,UAAW,EACXD,MAAQA,GA0rB8B2R,CAAgBtjB,GAAQ,MAClE,KpBxjCiC,GoBwjCA5iB,EAjoB1B,CACHw0B,UAAW,EACXD,OAAQ,GA+nByD,MACrE,KpBxjCiC,GoBwjCAv0B,EA5nBjB,SAAC4iB,GAAW,IACpBsR,EAAsFtR,EAAtFsR,EAAG34B,EAAmFqnB,EAAnFrnB,EAAGuD,EAAgF8jB,EAAhF9jB,EAAGo3B,EAA6EtT,EAA7EsT,UAAWD,EAAkErT,EAAlEqT,eAAgB3B,EAAkD1R,EAAlD0R,YAAa3E,EAAqC/M,EAArC+M,UAAWC,EAA0BhN,EAA1BgN,YAAa0B,EAAa1O,EAAb0O,SAEjF,GAAU,IAAN4C,EACA,MAAO,CACHM,UAAU,EACVD,OAAQ,GAIhB,GAAoB,MAAhBD,EAuBA,OAAmB,IAAd3E,GAAqC,MAAhBC,EACjB0B,EAASjM,MAAM8gB,oBAQT,CACH3R,UAAW,EACXD,OAAQ,IATZjD,EAASjM,MAAM8gB,sBACR,CACH3R,UAAW,EACXD,OAAQ,IAWT,CACHC,UAAW,EACXD,OAAQ,GAxChB,IAAIrzB,EAAKtD,KAAKuD,MAAM5F,EAAI,IACpBuzB,EAAKlxB,KAAKuD,MAAMrC,EAAI,GACpB+zB,EAAQqD,EAAUpH,GAAI5tB,GACtBqZ,EAAUpd,GAAU01B,GACpB/Q,EAAQmU,EAAenH,GAAI5tB,GAC/B,OAAiB,IAAZqZ,GAAkC,IAAZA,EpBteC,IoBuepBuH,EACO,CACH0S,UAAU,EACVD,OAAQ,GAIL,CACHC,UAAU,EACVrD,cAAgB,cAChBoD,OAAQ,QAXpB,EA4mBsC6R,CAAYxjB,GAAQ,MAC9D,KpBxjCiC,GoByjCjC,KpBxjCiC,GoBwjCA5iB,EA5jB1B,CACHw0B,UAAW,EACXD,OAAQ,GA0jBsD,MAClE,KpBxjCiC,GoBwjCAv0B,EAvjBb,SAAC4iB,GAGrB,OAAU,IAFEA,EAANsR,EAGK,CACHM,UAAW,EACXD,OAAQ,GAIT,CACHC,UAAW,EACXD,OAAQ,GA2iB8B8R,CAAgBzjB,GAAQ,MAClE,KpBxjCiC,GoBwjCA5iB,EAxiBT,SAAC4iB,GAGzB,OAFmBA,EAAb0O,SAEQM,MASH,CACH4C,UAAW,EACXD,OAAQ,GAVL,CACHC,UAAW,EACXrD,cAAgB,QAChBC,aAAe,CpBvfS,GoBwfxBmD,OAAQ,GAgiB0B+R,CAAoB1jB,GAAQ,MACtE,KAAKkI,GAA4B9qB,EAthBjB,SAAC4iB,GAAW,IACpBuH,EAAmDvH,EAAnDuH,GAAID,EAA+CtH,EAA/CsH,GAAIsC,EAA2C5J,EAA3C4J,YAAaC,EAA8B7J,EAA9B6J,YAAayH,EAAiBtR,EAAjBsR,EAAGzE,EAAc7M,EAAd6M,UAE7C,OAAQyE,GAGJ,KAAK,EACD,GACoB,IAAdzE,GAAgC,KAAX4E,EAIvB,MAAO,CACHG,UAAW,EACXD,OAAQ,EACRmC,MAAQ,CAAC,CAACn7B,EAAI4uB,EAAIrrB,EALborB,EAAK,KAQlB,MAGJ,KAAK,EACD,GACoB,IAAduF,GAAgC,MAAX4E,GACP,IAAd5E,GAAgC,KAAX4E,EAIvB,MAAO,CACHG,UAAW,EACXD,OAAQ,EACRmC,MAAQ,CAAC,CAACn7B,EALL4uB,EAAK,EAKQrrB,EAAGorB,KAG7B,MAGJ,KAAK,EACD,GACoB,IAAduF,GAAgC,KAAX4E,GACP,IAAd5E,GAAgC,KAAX4E,GACP,IAAd5E,GAAgC,MAAX4E,EACzB,CAGE,IAFA,IAAIxE,EAAK3F,EAAK,EAEPmF,GAAWlF,EAAI0F,EAAIrD,EAAaC,IAAc,CACjD,IAAIiZ,EAAY/X,EAAakC,GAAI1F,GAEjC,GAAI,CAACM,GAAeG,GAAkBG,GAAeE,GAAmBC,GAAmBP,GAAaQ,GAAuBH,IAAoBxc,SAASk3B,GACxJ,MAAO,CACHlR,UAAW,EACXD,OAAQ,EACRmC,MAAQ,CAAC,CAACn7B,EAAI4uB,EAAIrrB,EAAG+wB,KAM7B,GAAe,KADF3B,EAAW2B,GAAI1F,GAExB,MAAO,CACHqK,UAAW,EACXD,OAAQ,EACRmC,MAAQ,CAAC,CAACn7B,EAAI4uB,EAAIrrB,EAAG+wB,KAI7BA,IAGJ,MAAO,CACH2E,UAAW,EACXD,OAAQ,GAGhB,MAGJ,KAAK,EACD,GACoB,IAAd9E,GAAgC,MAAX4E,GACP,IAAd5E,GAAgC,KAAX4E,EAIvB,MAAO,CACHG,UAAW,EACXD,OAAQ,EACRmC,MAAQ,CAAC,CAACn7B,EALL4uB,EAAK,EAKQrrB,EAAGorB,KAG7B,MAEJ,QACI,MAAO,CACHsK,UAAW,EACXD,OAAQ,GAIpB,MAAO,CACHC,UAAW,EACXD,OAAQ,GAib8BgS,CAAY3jB,GAAQ,MAC9D,KpBxjCiC,GoBwjCA5iB,EA9af,SAAC4iB,GAAW,IACxBrnB,EAAoCqnB,EAApCrnB,EAAGuD,EAAiC8jB,EAAjC9jB,EAAGo1B,EAA8BtR,EAA9BsR,EAAGzE,EAA2B7M,EAA3B6M,UAAWC,EAAgB9M,EAAhB8M,YAE1B,GAAU,IAANwE,EAAS,CACT,GAAmB,IAAdzE,GAAqC,MAAhBC,EACtB,OAAI4B,EAAS+D,KAAKhD,SACdf,EAASjM,MAAMmhB,cACR,CACHhS,UAAW,EACXD,OAAQ,IAIL,CACHC,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CpBhnBC,IoBinBhBmD,OAAQ,GAKpB,GAAmB,IAAd9E,GAAqC,MAAhBC,EACtB,OAAI4B,EAAS+D,KAAKC,UACdhE,EAASjM,MAAMohB,eACR,CACHjS,UAAW,EACXD,OAAQ,IAIL,CACHC,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CpB9nBC,IoB+nBhBmD,OAAQ,GAKpB,GAAmB,IAAd9E,GAAqC,KAAhBC,EACtB,OAAI4B,EAAS+D,KAAK/C,WACdhB,EAASjM,MAAMwP,gBACR,CACHL,UAAW,EACXD,OAAQ,IAIL,CACHC,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CpBnpBC,IoBopBhBmD,OAAQ,GAKpB,GAAmB,IAAd9E,GAAqC,MAAhBC,EACtB,OAAI4B,EAAS+D,KAAK9C,SACdjB,EAASjM,MAAMyP,cACR,CACHN,UAAW,EACXD,OAAQ,IAIL,CACHC,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CpBpqBC,IoBqqBhBmD,OAAQ,GAKpB,GAAmB,IAAd9E,GAAqC,KAAhBC,EACtB,OAAI4B,EAAS+D,KAAK7C,SACdlB,EAASjM,MAAM0P,cACR,CACHP,UAAW,EACXD,OAAQ,EACRmC,MAAQ,CAAC,CAACn7B,EAAIA,EAAI,EAAGuD,EAAGA,EAAI,MAIzB,CACH01B,UAAW,EACXrD,cAAgB,UAChBC,aAAe,CpBtrBC,IoBurBhBmD,OAAQ,GAMxB,MAAO,CACHC,UAAW,EACXD,OAAQ,GA4U8BmS,CAAc9jB,GAAQ,MAChE,KpBvjCiC,GoBujCA5iB,EAzUZ,SAAC4iB,GAAW,IAC3BsR,EAAMtR,EAANsR,EAEN,OAAW,IAANA,GAAmB,IAANA,EACP,CACHM,UAAW,EACXD,OAAQ,GAIT,CACHC,UAAW,EACXD,OAAQ,GA6T8BoS,CAAiB/jB,GAAQ,MACnE,KAAKmI,GAA4B/qB,EA1TjB,SAAC4iB,GAAW,IACtB0O,EAAa1O,EAAb0O,SAEN,OACMA,EAASY,OAETZ,EAASU,QACTV,EAASC,eACTD,EAASK,SACTL,EAAS+E,UAUJ,CACH7B,UAAW,EACXD,OAAQ,GAVL,CACHC,UAAW,EACXrD,cAAgB,SAChBC,aAAe,CpB1uBS,GAFA,EATA,EAIA,EAoCA,IoB8sBxBmD,OAAQ,GA2S0BoD,CAAY/U,GAAQ,MAC9D,KAAKoI,GAA4BhrB,EAhS1B,CACHw0B,UAAW,EACXD,OAAQ,GA8RuD,MACnE,KpBpjCiC,GoBojCAv0B,EA3Rf,SAAC4iB,GAGnB,OAFmBA,EAAb0O,SAEQK,QAQH,CACH6C,UAAW,EACXD,OAAQ,GATL,CACHC,UAAW,EACXrD,cAAgB,UAChBoD,OAAQ,GAoR0BqS,CAAchkB,GAAQ,MAChE,KpBpjCiC,GoBojCA5iB,EAzQ1B,CACHw0B,UAAW,EACXD,OAAQ,GAuQqD,MACjE,KpBpjCiC,GoBojCAv0B,EApQZ,SAAC4iB,GAAW,IAC3B0O,EAAa1O,EAAb0O,SAEN,OACKA,EAASK,SACTL,EAASU,OASH,CACHwC,UAAW,EACXD,OAAQ,GATL,CACHC,UAAW,EACXrD,cAAgB,oBAChBoD,OAAQ,GA0P0BsS,CAAiBjkB,GAAQ,MACnE,KpBpjCiC,GoBojCA5iB,EAhPT,SAAC4iB,GAAW,IAC5BrnB,EAAgCqnB,EAAhCrnB,EAAGuD,EAA6B8jB,EAA7B9jB,EAAGwyB,EAA0B1O,EAA1B0O,SAAU4D,EAAgBtS,EAAhBsS,YAEpBh0B,EAAKtD,KAAKuD,MAAM5F,EAAI,IAEpB8U,EAAW6kB,EADNt3B,KAAKuD,MAAMrC,EAAI,IACOoC,GAO/B,OAJiB,KAAbmP,IACAA,EAAW,GAGXihB,EAASqD,aAAatkB,GAAUukB,KAAO,EAChC,CACHJ,UAAW,EACXD,OAAQ,GAIL,CACHC,UAAW,EACXrD,cAAgB,gBAChBoD,OAAQ,GA0N0BuS,CAAoBlkB,GAAQ,MACtE,KAAKqI,GACL,KAAKC,GAA4BlrB,EApMb,SAAC4iB,GAGrB,OAFmBA,EAAb0O,SAEQW,KAQP,CACHuC,UAAW,EACXD,OAAQ,GATD,CACHC,UAAW,EACXrD,cAAgB,OAChBoD,OAAQ,GA6L0BwD,CAAgBnV,GAAQ,MAClE,KAAKuI,GAA4BnrB,EAnL1B,CACHw0B,UAAW,EACXD,OAAQ,GAiL0D,MACtE,KpBpjCiC,GoBojCAv0B,EA9KV,SAAC4iB,GAAW,IAC7B0O,EAAqC1O,EAArC0O,SAAU3B,EAA2B/M,EAA3B+M,UAAWC,EAAgBhN,EAAhBgN,YAG3B,OACoB,IAAdD,GAAqC,KAAhBC,GACP,IAAdD,GAAqC,IAAhBC,GACP,IAAdD,GAAqC,MAAhBC,GACP,IAAdD,GAAqC,MAAhBC,EAEnB0B,EAASY,OAASZ,EAASU,QAAUV,EAASK,SAAYL,EAAS+E,UAC5D,CACH7B,UAAW,EACXD,OAAQ,GAIL,CACHC,UAAW,EACXrD,cAAgB,mBAChBoD,OAAQ,GAKb,CACHC,UAAW,EACXD,OAAQ,GAmJ8BqD,CAAmBhV,GAAQ,MACrE,KpBpjCiC,GoBojCA5iB,EAhJX,SAAC4iB,GAAW,IAC5BsR,EAA8BtR,EAA9BsR,EAAGzE,EAA2B7M,EAA3B6M,UAAWC,EAAgB9M,EAAhB8M,YAEpB,OAAU,IAANwE,EACmB,IAAdzE,GAAqC,MAAhBC,GAClB4B,EAAS+D,KAAKhD,SAQH,IAAd5C,GAAqC,MAAhBC,GAClB4B,EAAS+D,KAAKC,UAQH,IAAd7F,GAAqC,KAAhBC,GAClB4B,EAAS+D,KAAK/C,WAQH,IAAd7C,GAAqC,MAAhBC,GAClB4B,EAAS+D,KAAK9C,SAQH,IAAd9C,GAAqC,KAAhBC,GAClB4B,EAAS+D,KAAK7C,QAnCP,CACHgC,UAAW,EACXD,OAAQ,GAyCb,CACHC,UAAW,EACXrD,cAAgB,gBAChBoD,OAAQ,GAIT,CACHC,UAAW,EACXD,OAAQ,GAsF8BwS,CAAkBnkB,GAAQ,MACpE,KpBpjCiC,GoBojCA5iB,EAnFb,SAAC4iB,GAErB,GAAe,MAAXyR,EAAiB,CAGjB,GAAmB,IAAd5E,GAAqC,MAAhBC,EAAuB,CAE7C,IAAIpd,EAAQ1U,KAAKuD,MAAMgpB,EAAK,IACxB5X,EAAQ3U,KAAKuD,MAAM+oB,EAAK,GAE5B,OAAe,IAAV5X,GAA2B,IAAVC,EACb+e,EAASC,cAQH,CACHiD,UAAW,EACXD,OAAQ,GATL,CACHC,UAAW,EACXrD,cAAgB,iBAChBoD,OAAQ,GAWT,CACHC,UAAW,EACXD,OAAQ,GAKpB,MAAO,CACHC,UAAW,EACXD,OAAQ,GAIhB,MAAO,CACHC,UAAW,EACXD,OAAQ,GA0C8ByS,GAAwB,MAClE,QACIhnC,EAAS,CAAEw0B,UAAW,EAAMrD,cAAgB,mBAAoBoD,OAAO,GACvElwB,QAAQ4O,IAAR,6CAAkDhC,IAG1D,MAAO,CACHyjB,SAAU,EACVF,SAAWx0B,EAAOw0B,SAClBrD,cAAgBnxB,EAAOmxB,cACvBC,aAAepxB,EAAOoxB,aACtBmD,MAAQv0B,EAAOu0B,MACfmC,MAAQ12B,EAAO02B,OLl5BNuQ,CAAcrkB,IACZ8R,QAAS,CAOhB,GANI10B,EAAO02B,OACP12B,EAAO02B,MAAMvkB,SAAQ,SAAA5K,GACjBkpB,GAAWlpB,EAAEhM,EAAGgM,EAAEzI,EAAG8jB,MAIzB5iB,EAAOw0B,SAGP,OAFAA,GAAW,EACXvD,GAAW11B,EAAGuD,EAAG8jB,EAAP,2BAAkCA,EAAMuhB,eAAiBnkC,EAAOmxB,cAAenxB,EAAOoxB,cAChG,WAEC,IAAKpxB,EAAOu0B,MACb,iBAGA9D,GAAW7N,EAAMuH,GAAIvH,EAAMsH,GAAItH,KAzNlCsR,EAAI,EAAGA,GAAK,EAAGA,IAAK,EAApBA,GA8NT,MAAO,CACHM,SAAUA,IMpPL0S,GAAK,SAAC3rC,EAAGuD,EAAGyxB,EAAYG,GACjC,IACI1wB,EADAw0B,GAAW,GAIfA,GADAx0B,EAASwjC,GAAejoC,EAAGuD,EAAGyxB,IACZiE,SACbx0B,EAAOu0B,SAIZv0B,EAASskC,GAAY/oC,EAAGuD,EAAGyxB,EAAYG,IACvC8D,EAAWA,GAAYx0B,EAAOw0B,UAMdjE,EAAWK,QAAQC,MAAK,SAAAtpB,GAAC,OAAIA,EAAEhM,IAAMA,GAAKgM,EAAEzI,IAAMA,MAG1DmyB,GAAW11B,EAAGuD,EAAGyxB,EAAY,mCANjCD,GAAa/0B,EAAGuD,EAAGyxB,KCfd4W,GAAQ,SAAC5W,GAGlB,GCHgB,SAAC3N,GAAW,IAIxBrnB,EACAuD,EACAb,EACA9B,EACA0E,EAPE+qB,EAA0DhJ,EAA1DgJ,OAAQC,EAAkDjJ,EAAlDiJ,EAAGC,EAA+ClJ,EAA/CkJ,EAAGC,EAA4CnJ,EAA5CmJ,EAAGqb,EAAyCxkB,EAAzCwkB,WAAYzW,EAA6B/N,EAA7B+N,QAASC,EAAoBhO,EAApBgO,QAASyW,EAAWzkB,EAAXykB,OAEjD3W,OAAkB30B,EAQtB,IAAKI,EAAI,EAAGA,EAAIirC,EAAYjrC,IAEA,IAAnBw0B,EAAQlzB,QAAqC,IAAnBmzB,EAAQnzB,UAS5B,KADXoD,GAHA5C,EAAO0yB,EAAQlzB,OAAS,EAAKkzB,EAAUC,GAG/B0W,WAAU,SAAA//B,GAAC,MAAwB,qBAAbA,EAAE2pB,aAE5BrwB,EAAI,GAIRtF,EAAI0C,EAAI4C,GAAGtF,EACXuD,EAAIb,EAAI4C,GAAG/B,EACX4xB,EAAkBzyB,EAAI4C,GAAG6vB,gBACzBzyB,EAAI8U,OAAOlS,EAAG,GACdysB,GAAS1B,EAAQrwB,EAAGuD,EAAG,SAAU+sB,EAAGC,EAAGC,GACvCsb,IACAzkB,EAAMykB,OAASA,EACfH,GAAG3rC,EAAGuD,EAAG8jB,EAAO8N,IDjCpB6W,CAAKhX,GECgB,SAAC3N,GAAW,IACzBykB,EAA6GzkB,EAA7GykB,OAAQG,EAAqG5kB,EAArG4kB,UAAW7W,EAA0F/N,EAA1F+N,QAAS8W,EAAiF7kB,EAAjF6kB,YAAa7W,EAAoEhO,EAApEgO,QAAS8W,EAA2D9kB,EAA3D8kB,YAAalX,EAA8C5N,EAA9C4N,UAAWmX,EAAmC/kB,EAAnC+kB,cAAe/b,EAAoBhJ,EAApBgJ,OAAQC,EAAYjJ,EAAZiJ,EAAGC,EAASlJ,EAATkJ,EAAGC,EAAMnJ,EAANmJ,EAG/G,GAAIsb,GAAUG,EAEV,OADA7T,GAAO/Q,EAAD,wEAAyEykB,KACxE,EAIX,GAAI1W,EAAQlzB,QAAU,IAGlB,OAFA4G,QAAQ4O,IAAI0d,GACZgD,GAAO/Q,EAAD,8EAA+EykB,KAC9E,EAIX,GAAI1W,EAAQlzB,OAAS,EACjB,OAAO,EAIX,GAAuB,IAAnBkzB,EAAQlzB,QACJmzB,EAAQnzB,OAAS,EACjB,IAAK,IAAItB,EAAI,EAAGA,EAAIy0B,EAAQnzB,OAAQtB,IAAK,CACrC,IAAIZ,EAAIq1B,EAAQ,GAAGr1B,EACfuD,EAAI8xB,EAAQ,GAAG9xB,EACf4xB,EAAkBE,EAAQ,GAAGF,gBACjCE,EAAQ1d,QACRoa,GAAS1B,EAAQrwB,EAAGuD,EAAG,SAAU+sB,EAAGC,EAAGC,GACvCnJ,EAAMykB,OAASzkB,EAAMykB,OAAS,EAC9BH,GAAG3rC,EAAGuD,EAAG8jB,EAAO8N,GAM5B,IAAIkX,GAAa,EACbjX,EAAQlzB,SAAWgqC,EAAYhqC,SAC/BmqC,GAAa,GAEjBhlB,EAAM6kB,YAAcxsC,GAAM01B,GAG1B,IAAIkX,GAAa,EACbjX,EAAQnzB,SAAWiqC,EAAYjqC,SAC/BoqC,GAAa,GAEjBjlB,EAAM8kB,YAAczsC,GAAM21B,GAG1B,IAAIkX,GAAe,EAOnB,OANItX,EAAU/yB,SAAWkqC,EAAclqC,SACnCqqC,GAAe,GAEnBllB,EAAM+kB,cAAgB1sC,GAAMu1B,GAGvBsX,GAAiBF,GAAeC,EAMb,IAAnBlX,EAAQlzB,QAAqC,IAAnBmzB,EAAQnzB,SACnCk2B,GAAO/Q,EAAD,kDAAmD+N,EAAQlzB,OAA3D,qBAA8E4pC,KAC7E,IAPP1T,GAAO/Q,EAAD,oCAAqC+N,EAAQlzB,OAA7C,qBAAgEmzB,EAAQnzB,OAAxE,qBAA2F+yB,EAAU/yB,OAArG,+BAAkI4pC,KACjI,GF3DPU,CAAUxX,GAGV,OAFA11B,OAAOmtC,uBAAsB,eAEtB,CACHC,SAAU,EACVjoC,YAASjE,GAOT,GADAlB,OAAOmtC,uBAAsB,eACzBzX,EAAWe,SAASjM,MAAM6b,cAAe,CACzC,IAAIgH,EAAK3X,EAAW2X,GAChBC,EAAKC,YAAYC,MAErB,OADAhkC,QAAQ4O,IAAR,mCAAwCk1B,EAAKD,GAAM,KAAMI,QAAQ,GAAjE,cACO,CACHL,SAAU,EACVjoC,QAAS,GAIb,MAAO,CACHioC,SAAU,EACVjoC,QAAS,IG1BhBuoC,GAAM,SAANA,EAAOhY,GAGhB,IAHgC,IACxBvoB,EAAwEuoB,EAAxEvoB,SAAU4oB,EAA8DL,EAA9DK,QAASjD,EAAqD4C,EAArD5C,aAAcqW,EAAuCzT,EAAvCyT,cAAewE,EAAwBjY,EAAxBiY,sBAE3C,CACT,IAAIC,EAAStB,GAAM5W,GAEnB,IAAKkY,EAAOR,QAAS,CAEjB,IAAIO,EA8GA,OADAnkC,QAAQ4O,IAAI,QACLw1B,EAAOzoC,OA9GQ,IAAD,aAGrB,IAAI0oC,EAAkB,GACtB9X,EAAQze,SAAQ,SAAA5K,GzBYS,KyBXjBomB,EAAapmB,EAAEzI,GAAGyI,EAAEhM,IACpBmtC,EAAgB5jC,KAAKyC,MAM7B,IAAIohC,EAAgB,GACpB/X,EAAQze,SAAQ,SAAA5K,GACRA,EAAE6pB,cAAgB7pB,EAAE6pB,aAAa3zB,OAAS,GAC1C8J,EAAE6pB,aAAajf,SAAQ,SAAA5K,GACnBohC,EAAc7jC,KAAKyC,SAI/B,IvBwGsBtJ,EuBjGlB2qC,GvBiGkB3qC,EuBxG0B,GAAD,OAAK0qC,GvByGzD,aAAI,IAAIE,IAAI5qC,KuBlGiC4U,QAAO,SAAAtX,GAAC,OAAKsI,GAAyB2K,SAASjT,MACnFutC,EAAe,CzB0DK,GADA,GADA,GAGA,GAnBA,GAZA,GyBvBxB,GAJAF,EAAgBA,EAAc/1B,QAAO,SAAAtX,GAAC,OAAKutC,EAAat6B,SAASjT,MAEjE8I,QAAQ4O,IAAR,2BAAgCy1B,EAAgBjrC,OAAhD,2BAAyEmrC,EAAcnrC,WAElFirC,EAAgBjrC,OAAS,GAAOmrC,EAAcnrC,OAAS,GAwExD,OADA4G,QAAQ4O,IAAI,QACN,CAAN,EAAOw1B,EAAOzoC,QA/Dd,IAPA,IAAI7D,EAAIusC,EAAgBjrC,OAAS,EAC7B8J,EAAImhC,EAAgBvsC,GACpBZ,EAAIgM,EAAEhM,EACNuD,EAAIyI,EAAEzI,EACNoC,EAAKtD,KAAKuD,MAAM5F,EAAI,IACpBuzB,EAAKlxB,KAAKuD,MAAMrC,EAAI,GAEfiqC,EAAU,EAAGA,GAAW,GAAIA,IAAW,CAC5C,IAAIztB,EAAU3d,GAAY,EAAGirC,EAAcnrC,OAAO,GAC9CkX,EAAei0B,EAActtB,GAGjC,GAAIotB,EAAgBjrC,QAAU,EAAG,CAC7B,IAAIurC,EAAkB5d,GAAyBvY,QAAO,SAAAtX,GAAC,OAAIqtC,EAAcp6B,SAASjT,MAC9EytC,EAAgBvrC,OAAS,IAEzBkX,EAAeq0B,EADf1tB,EAAU3d,GAAY,EAAGqrC,EAAgBvrC,OAAO,KAUxD4G,QAAQ4O,IAAR,iBAAsBjP,GAAoB2Q,KAM1C,IAHA,IAAIs0B,OAAK,EACLC,OAAK,EACLpzB,GAAS,EACJ6W,EAAK,EAAGA,EAAK3kB,EAASvK,OAAQkvB,IACnC,IAAK,IAAID,EAAK,EAAGA,EAAK1kB,EAAS2kB,GAAIlvB,OAAQivB,IAClC5W,GACG9N,EAAS2kB,GAAID,KAAQ/X,IACS,IAA1BqvB,EAAcrX,GAAID,KAClBuc,EAAQvc,EACRwc,EAAQvc,EACR7W,GAAS,GAO7B,GAAIA,EAAQ,CACR,IAAIwD,EAAOtR,EAAS8mB,GAAI5tB,GACpBqY,EAAOvR,EAASkhC,GAAOD,GAS3B,OARAjhC,EAAS8mB,GAAI5tB,GAAMqY,EACnBvR,EAASkhC,GAAOD,GAAS3vB,EACzB0qB,EAAclV,GAAI5tB,IAAM,EAExBmD,QAAQ4O,IAAR,yBAA8B/R,EAA9B,mBAA2C4tB,EAA3C,YAAiD9qB,GAAoBsV,GAArE,wBAA0F2vB,EAA1F,mBAA0GC,EAA1G,YAAmHllC,GAAoBuV,KAIjI,CAAN,EADagvB,EAAIhY,IAGhB,GAAIwY,GAAW,GAGhB,OAFA1kC,QAAQ4O,IAAR,iBAAsBjP,GAAoB2Q,GAA1C,0BACAtQ,QAAQ4O,IAAI,QACN,CAAN,EAAOw1B,EAAOzoC,QAGdqE,QAAQ4O,IAAR,iBAAsBjP,GAAoB2Q,GAA1C,2BAnGS,wCCU9B,SAASw0B,GAAWC,GAA0D,IAQ7Exd,EAR4Byd,EAAgD,wDAAvBC,EAAuB,wDAiB5Ezd,EAAI,EACJC,EAAI,EACJC,EAAI,EAEJM,EAAoB,GACpBC,EAAoB,GACpBnZ,EAAc,GACdC,EAAc,EAEdoZ,EAAeH,EAAoBlZ,EACnCsZ,EAAeH,EAAoBlZ,GAhBnCwY,EADAyd,EACSjiB,SAASC,eAAe,UAGxBD,SAASmiB,cAAc,WAe7BtmB,MAAa,EAAJ4I,EAAUW,EAAcV,EAAK,EAC7CF,EAAOxF,OAAc,EAAJyF,EAAUY,EAAcV,EAAK,EAQ9C,IA0QIqb,EACAI,EACAgC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/G,EACAuB,EACAhzB,EACAC,EA3RA5J,EAAWohC,EAAQ7f,aACnB2M,EAAYkT,EAAQ5f,OACpBnoB,EAAY+nC,EAAQ/nC,UACpB6zB,EAAckU,EAAQ3f,aACtBsE,EAAaqb,EAAQhgB,QACrB8E,EAAakb,EAAQ/e,QACrBsD,EAAeyb,EAAQhf,UACvBnpB,EAAUmoC,EAAQnoC,QAClBmtB,EAAmBgb,EAAQ1f,cAC3B0gB,EAAehB,EAAQxf,UACvBygB,EAAoBjB,EAAQzf,eAC5B4E,EAAiB6a,EAAQ32B,aACzBgc,EAAqB2a,EAAQ9e,YAC7BC,EAAiB6e,EAAQ7e,eACzBC,EAAc4e,EAAQ5e,YAQtB4F,EAAWh0B,GAAcuxB,EAAalwB,OAAQkwB,EAAa,GAAGlwB,OAAQ,GACtEuyB,EAAiB5zB,GAAc2xB,EAAWtwB,OAAQswB,EAAW,GAAGtwB,OAAQ,GACxEw4B,EAAiB75B,GAAc85B,EAAUz4B,OAAQy4B,EAAU,GAAGz4B,OAAQ,GACtEumC,EAAgB5nC,GAAc85B,EAAUz4B,OAAQy4B,EAAU,GAAGz4B,QAAS6rC,GAQpEhY,EAAW,CACbE,OAAS,EACTU,MAAQ,EACRD,KAAO,EACPD,OAAS,EACTF,QAAU,EACVP,cAAgB,EAChBK,MAAQ,EACRF,SAAW,EACXC,QAAU,EACV0E,UAAY,EACZxE,QAAU,EACVoP,SAAW,EACXxP,IAAM,EACNM,OAAS,EACTI,SAAW,EAEXiD,MAAQ,CACJO,OAAS,EACTE,aAAe,EACfC,IAAM,EACNsL,YAAc,EACdxL,SAAW,EACXxD,SAAW,GAGfiP,MAAQ,CACJG,MAAQ,EACRF,MAAQ,EACRG,MAAQ,GAGZpM,KAAO,CACHhD,QAAU,EACViD,SAAW,EACXhD,UAAY,EACZC,QAAU,EACVC,QAAU,EACV2O,aAAe,GAGnBQ,QAAU,CACNC,UAAY,EACZiB,QAAU,EACVD,OAAS,EACTE,QAAU,EACVC,MAAQ,EACRC,UAAY,EACZlB,UAAY,EACZC,SAAW,EACXC,OAAS,EACTC,MAAQ,EACRC,YAAc,EACdC,SAAW,EACXc,MAAQ,EACRb,eAAiB,GAGrB/c,MAAQ,CACJkd,OAAS,EACTF,MAAQ,EACRiI,MAAQ,EACRzI,QAAU,EACVN,YAAc,EACdG,aAAe,EACf6I,QAAU,EACV/H,eAAiB,EACjBF,cAAgB,EAChB7N,SAAW,EACX+R,YAAc,EACdC,aAAe,EACf5R,cAAgB,EAChBC,YAAc,EACdC,YAAc,EACdmM,cAAgB,EAChBuB,cAAgB,EAChB4B,oBAAsB,EACtB8B,oBAAsB,GAG1Bn2B,MAAQ,CACJmlB,aAAe,GAGnBR,aAAe,CACX,CACIj2B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,GAEpB,CACIh3B,IAAM,EACN62B,QAAU,EACVC,QAAU,EACVZ,KAAO,EACPa,SAAW,EACXT,WAAa,EACbwB,WAAa,EACbmP,aAAe,EACfjQ,cAAgB,KA6H5B,GAvHI2T,IACIjiB,SAASC,eAAe,cAAcxD,UAASyN,EAASE,OAAS,GACjEpK,SAASC,eAAe,eAAexD,UAASyN,EAASE,OAAS,GAClEpK,SAASC,eAAe,aAAaxD,UAASyN,EAASY,MAAQ,GAC/D9K,SAASC,eAAe,YAAYxD,UAASyN,EAASW,KAAO,GAC7D7K,SAASC,eAAe,cAAcxD,UAASyN,EAASU,OAAS,GACjE5K,SAASC,eAAe,eAAexD,UAASyN,EAASQ,QAAU,GACnE1K,SAASC,eAAe,qBAAqBxD,UAASyN,EAASC,cAAgB,GAC/EnK,SAASC,eAAe,sBAAsBxD,UAASyN,EAASC,cAAgB,GAChFnK,SAASC,eAAe,aAAaxD,UAASyN,EAASM,MAAQ,GAC/DxK,SAASC,eAAe,gBAAgBxD,UAASyN,EAASa,SAAW,GACrE/K,SAASC,eAAe,gBAAgBxD,UAASyN,EAASI,SAAW,GACrEtK,SAASC,eAAe,eAAexD,UAASyN,EAASK,QAAU,GACnEvK,SAASC,eAAe,iBAAiBxD,UAASyN,EAAS+E,UAAY,GACvEjP,SAASC,eAAe,eAAexD,UAASyN,EAASO,QAAU,GACnEzK,SAASC,eAAe,WAAWxD,UAASyN,EAASG,IAAM,GAC3DrK,SAASC,eAAe,cAAcxD,UAASyN,EAASS,OAAS,GAEjE3K,SAASC,eAAe,eAAexD,UAASyN,EAAS+D,KAAKhD,QAAU,GACxEjL,SAASC,eAAe,gBAAgBxD,UAASyN,EAAS+D,KAAKC,SAAW,GAC1ElO,SAASC,eAAe,iBAAiBxD,UAASyN,EAAS+D,KAAK/C,UAAY,GAC5ElL,SAASC,eAAe,eAAexD,UAASyN,EAAS+D,KAAK9C,QAAU,GACxEnL,SAASC,eAAe,eAAexD,UAASyN,EAAS+D,KAAK7C,QAAU,GAExEpL,SAASC,eAAe,gBAAgBxD,UAASyN,EAASqQ,QAAQQ,SAAW,GAC7E/a,SAASC,eAAe,eAAexD,UAASyN,EAASjM,MAAMwc,QAAU,IA4B7EwH,GACAjC,EAAanqC,SAASmqB,SAASC,eAAe,cAAc7pB,OAC5DgqC,EAAYvqC,SAASmqB,SAASC,eAAe,aAAa7pB,OAC1DgsC,EAAgBpiB,SAASC,eAAe,wBAAwBxD,QAChE4lB,EAAcriB,SAASC,eAAe,sBAAsBxD,QAC5D6lB,EAAiE,KAAlDtiB,SAASC,eAAe,gBAAgB7pB,MAAeT,GAASqqB,SAASC,eAAe,gBAAgB7pB,YAASzB,EAChI4tC,EAAqE,KAApDviB,SAASC,eAAe,kBAAkB7pB,MAAeP,SAASmqB,SAASC,eAAe,kBAAkB7pB,YAASzB,EACtI6tC,EAASxiB,SAASC,eAAe,UAAUxD,QAC3CgmB,EAA2E,KAAvDziB,SAASC,eAAe,qBAAqB7pB,MAAeP,SAASmqB,SAASC,eAAe,qBAAqB7pB,YAASzB,EAC/I+tC,EAAqE,KAApD1iB,SAASC,eAAe,kBAAkB7pB,MAAeT,GAASqqB,SAASC,eAAe,kBAAkB7pB,YAASzB,EACtIguC,EAAkB3iB,SAASC,eAAe,mBAAmBxD,QAC7DmmB,EAAsB5iB,SAASC,eAAe,uBAAuBxD,QACrEomB,EAAyE,KAAtD7iB,SAASC,eAAe,oBAAoB7pB,MAAe4pB,SAASC,eAAe,oBAAoB7pB,MAAQ,EAClI0sC,EAAa9iB,SAASC,eAAe,cAAcxD,QACnDsmB,EAAmB/iB,SAASC,eAAe,oBAAoBxD,QAC/Duf,EAAqBhc,SAASC,eAAe,sBAAsBxD,QACnE8gB,EAAoBvd,SAASC,eAAe,qBAAqBxD,QACjElS,EAAS1U,SAASmqB,SAASC,eAAe,eAAe7pB,OACzDoU,EAAS3U,SAASmqB,SAASC,eAAe,eAAe7pB,SAGzD4pC,EAAa,IACbI,EAAY,IACZgC,GAAgB,EAChBC,GAAc,EACdC,OAAe3tC,EACf4tC,OAAiB5tC,EACjB6tC,GAAS,EACTC,OAAoB9tC,EACpB+tC,OAAiB/tC,EACjBguC,GAAkB,EAClBC,GAAsB,EACtBC,EAAmB,EACnBC,GAAa,EACbC,GAAmB,EACnB/G,GAAqB,EACrBuB,GAAoB,EACpBhzB,EAAS,EACTC,EAAS,GAITy3B,IACIG,GAAe9b,GAAkB9B,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAakB,EAAcsc,GAC1Fhb,GAASya,IAAezb,GAA2BrC,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAakB,EAAcO,EAAYwb,GACxHza,GAAS0a,IAAiB3b,GAA6BpC,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAakB,EAAcgc,GAChH1a,GAAS4a,IAAoB1b,GAAiCvC,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAakB,EAAcS,EAAkByb,GACzIE,GAAiBzb,GAA+B1C,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAa8B,GAC3Fyb,GAAqBxb,GAAmC5C,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAagC,GACnGyb,GAAYxb,GAA0B9C,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAakB,GACjFwc,GAAkBxb,GAAwB/C,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAakB,EAAc3lB,EAAU/G,EAASI,EAAWkpB,EAAgBC,GACjJif,GAAa3b,GAAqBlC,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAasB,GAC7EkB,GAAS6a,IAAiBzb,GAA2BzC,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,EAAasB,EAAY+b,GAG5G1iB,SAASC,eAAe,cAAcxD,SAAS8H,GAAWC,EAAQC,EAAGC,EAAGC,GACxE3E,SAASC,eAAe,aAAaxD,SAASuI,GAAUR,EAAQC,EAAGC,EAAGC,EAAGM,EAAmBC,GAC5FlF,SAASC,eAAe,aAAaxD,SAAS0I,GAAUX,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,GACtFrF,SAASC,eAAe,gBAAgBxD,SAAS+I,GAAahB,EAAQC,EAAGC,EAAGC,EAAGS,EAAaC,GAC5FrF,SAASC,eAAe,gBAAgBxD,SAASwJ,GAAazB,EAAQC,EAAGC,EAAGC,EAAGM,EAAmBC,EAAmBG,EAAaD,GAGtImG,GAAiB/G,EAAQ+B,EAAcO,EAAYkC,EAAUpoB,EAAU+lB,EAAY9sB,EAASI,EAAWyqB,EAAGC,IAIzG6d,EAAL,CAcA,IAAIrZ,EAAa,CAEb/D,YAAcA,EACdC,YAAcA,EAGdzkB,SAAWA,EACXkuB,UAAYA,EACZ70B,UAAYA,EACZ6zB,YAAcA,EACdnH,WAAaA,EACbG,WAAaA,EACbP,aAAeA,EACf1sB,QAAUA,EACVmtB,iBAAmBA,EACnBgc,aAAeA,EACfC,kBAAoBA,EACpB9b,eAAiBA,EACjBE,mBAAqBA,EAGrB2B,SAAWA,EACXJ,eAAiBA,EACjBiG,eAAiBA,EACjB+N,cAAgBA,EAGhB1S,SAAWA,EACX/G,eAAiBA,EACjBC,YAAcA,EAGdmG,QAAU,GACVC,QAAU,GACVJ,UAAY,GAGZ5E,OAASA,EACTC,EAAIA,EACJC,EAAIA,EACJC,EAAIA,EACJqb,WAAaA,EACbI,UAAYA,EACZC,YAAc,GACdC,YAAc,GACdC,cAAgB,GAChB6C,cAAgB,GAChBC,kBAAoB,EACpBpD,OAAS,EACTqD,iBAAmBT,EAEnB/B,GAAKE,YAAYC,MACjBjF,mBAAqBA,EACrBuB,kBAAoBA,EACpB6D,oBAAsBc,GAGV,IAAX33B,GAA6B,IAAXC,EACnB8hB,GAAWnD,GAGXE,GAAW9e,EAAQC,EAAQ2e,GAe/B,IAAIvwB,EAASuoC,GAAIhY,GACjB,OAAOvwB,G,8CC5eX,WAAwB+kB,EAAMI,EAAMrD,GAApC,iDAAAxC,EAAA,sDACQ9a,EAAIugB,EADZ,SAIQ1gB,QAAQ4O,IAAI,iBAEZ03B,KAAWxlB,EAAM,CAAEylB,QAAQ,IAGvB9oB,EAAM5T,YAAY1Q,OAAO0kB,GAAgC1d,GATrE,MAWiCqmC,OAAOC,QAAQhpB,GAXhD,kEAWkBoB,EAXlB,OAWuB1lB,EAXvB,MAYsBA,MAZtB,sBAewB0lB,EAfxB,OAgByB,gBAhBzB,gEAmByD,qBAAtB6nB,GAAU7nB,GAAKjB,GAnBlD,wBAoBiC8oB,GAAU7nB,GAAKV,aAEF5kB,KAAKG,SAtBnD,UAwBkCgtC,GAAU7nB,GAAKjB,GAAGzd,EAAGhH,EAAMA,OAxB7D,2CAsCQ,GAPAgI,GAAahB,GACTsd,EAAM3T,gBACNA,GAAe3J,GAGfsR,GAAS,EAETgM,EAAMY,aAAc,CAUpB,IARI+lB,EAASpf,GAAe7kB,GACxB+rB,EAAakY,EAAOjrC,OACH,EACjBwtC,EAAkBlpB,EAAM9H,cAAcxc,MAC1CsY,EAASqzB,GAAW5Y,GAFC,EAE2Bya,GAG5ChjC,EAAWuoB,EAAWhH,aACjBzqB,EAAI,EAAGA,EAAI,GAAMA,IACtB,IAASvD,EAAI,EAAGA,EAAI,GAAMA,IAClB2F,EAAS,GAAJ3F,EACLuzB,EAAS,EAAJhwB,EACL1B,EAAI4K,EAASlJ,GAAGvD,GAChBuE,EAAOkB,EAAQE,EAAI4tB,EAAIyB,EAAWtvB,SAClClB,EAASqB,EAAUF,EAAI4tB,EAAIyB,EAAWlvB,WACtCxB,EAAWC,EAAMC,IACjB2E,GAAgBF,EAAG1E,EAAMC,EAAQ3C,GAM7CoI,GAAahB,GACTsd,EAAM3T,gBACNA,GAAe3J,GAhE/B,IAoEYsR,EApEZ,wBAqEYzR,QAAQ4O,IAAI,UArExB,kBAuEmB,CACHg4B,OAAQ,SACRlmB,KAAOvgB,IAzEvB,iCA6EmB,CACHymC,OAAQ,SACRlmB,KAAOvgB,IA/EvB,iEAoFQmkB,MAAM,EAAD,IACLtkB,QAAQ4O,IAAI,kBACZ5O,QAAQC,MAAR,MAtFR,kBAwFe,CACH2mC,OAAQ,SACRlmB,KAAOvgB,IA1FnB,2D,sBA+Fe0mC,O,iDCrBAC,GA5EH,WAAM,4CACd,WAA0BpmB,EAAME,EAAUE,EAAME,EAAOvD,EAAO8G,GAA9D,mBAAAtJ,EAAA,sDACQypB,EAAU,EACVqC,EAAc,EAFtB,YAIWrC,GAAWqC,GAJtB,wBAMY5mC,EAAI,IAAImc,WAAWoE,GAEnBgkB,EAAU,IACV5jB,EAAOxnB,EAAY,EAAG,MATlC,SAY2ButC,GAAS1mC,EAAG2gB,EAAMrD,GAZ7C,UAc8B,WAd9B,OAcmBmpB,OAdnB,wBAeYI,EAAe7mC,EAAGygB,EAAUE,EAAME,EjClBxB,QiCGtB,6BAmBYhhB,QAAQC,MAAR,oCAA2CykC,EAA3C,MACAA,IApBZ,QAuBYA,EAAUqC,GACVziB,MAAM,mEAxBlB,uBA+BIC,IA/BJ,6CADc,sBAmCd,IAAMyiB,EAAiB,SAACtmB,EAAME,EAAUE,EAAME,EAAOimB,GACjD,IAYMC,EAAc,SAASrwC,EAAM+pB,GAC/B,IAAI3F,GACJA,EAAI8H,SAASmiB,cAAc,MACzBiC,KAAOtwC,EACTokB,EAAEmsB,SAAWxmB,EACbmC,SAASskB,KAAKC,YAAYrsB,GAC1BA,EAAE0D,MAAQ,gBACV1D,EAAEgI,QACFhI,EAAEssB,WApBe,SAAS1wC,EAAM+pB,EAAU4mB,GAC1C,IAAIC,EAAMC,EACVD,EAAO,IAAIE,KAAK,CAAC9wC,GAAO,CACpB6U,KAAM87B,IAEVE,EAAMlxC,OAAOoxC,IAAIC,gBAAgBJ,GACjCP,EAAYQ,EAAK9mB,GACjB4D,YAAW,WACP,OAAOhuB,OAAOoxC,IAAIE,gBAAgBJ,KACnC,KAcPK,CAAarnB,EAAD,cAAcumB,EAAd,YAAyBnmB,EAAzB,YAAiCE,EAAjC,QAA8C,6BAG9D,OACI,kBAAC,IAAMgnB,SAAP,KACI,kBAAC,GAAD,CACIznB,UAAW9C,GACX+C,WAlEG,SAAD,iDCElBynB,IAASC,OAEL,kBAAC,GAAD,MAEFnlB,SAASC,eAAe,S1GqHpB,kBAAmBmlB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxoC,GACLD,QAAQC,MAAMA,EAAMsvB,c","file":"static/js/main.198b3130.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GraphicsLink.e6d6e67c.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsAgesGirl.4c0d9754.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsBowwow.ca5add2c.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsBunny.f88a5aa9.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsKirby.5584ad63.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsMarin.8272c1cb.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsMario.32f19826.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsMartha.fe727f3c.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsMeme.a43a4998.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsRichard.c2ae3797.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsRooster.d9ef86d3.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsSubrosian.be070c8a.bin\";","module.exports = __webpack_public_path__ + \"static/media/GraphicsTarin.210ef152.bin\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const clone = data => {\r\n    return JSON.parse(JSON.stringify(data));\r\n};\r\n\r\nexport const isBoolean = (v) => {\r\n    return (typeof v === \"boolean\");\r\n};\r\n\r\nexport const isNumeric = value => {\r\n    return (value || value === 0) && !isNaN(value)\r\n};\r\n\r\nexport const isBetween = (x, min, max) => {\r\n    return x >= min && x <= max;\r\n};\r\n\r\nexport const createArray = (dim, bounds, defaultVal = \"\", _arr = undefined) => {\r\n\r\n    if (typeof _arr === \"undefined\") {\r\n        _arr = [];\r\n    }\r\n\r\n    let len = bounds.slice().reverse()[dim-1];\r\n\r\n    if (dim > 1) {\r\n        for (let i = 0; i < len; i++) {\r\n            _arr[i] = createArray(dim - 1, bounds, defaultVal, _arr[i]);\r\n        }\r\n        return _arr;\r\n    } \r\n    else {\r\n        for (let i = 0; i < len; i++) {\r\n            _arr[i] = clone(defaultVal);\r\n        }\r\n        return _arr;\r\n    }\r\n};\r\n\r\nexport const create1DArray = (length, defaultVal = 0) => {\r\n    return createArray(1, [length], defaultVal);\r\n};\r\n\r\nexport const create2DArray = (rowCount, columnCount, defaultVal = 0) => {\r\n    return createArray(2, [rowCount, columnCount], defaultVal);\r\n};    \r\n\r\nexport const ArrayToMatrix = (arr, width) => {\r\n    return arr.reduce((rows, key, index) => (index % width === 0 ? rows.push([key]) : rows[rows.length-1].push(key)) && rows, []);\r\n};\r\n    \r\nexport const IntToHex = (n, padding = 2) => {\r\n    if (n < 0) {\r\n        return n;\r\n    }\r\n    return Number(n).toString(16).toUpperCase().padStart(padding, '0');\r\n};\r\n\r\nexport const IntToStr = (n) => {\r\n    return n.toString();\r\n};\r\n\r\nexport const HexToInt = (s) => {\r\n    return parseInt(s, 16);\r\n};\r\n\r\nexport const StrToInt = (s) => {\r\n    return parseInt(s);\r\n};\r\n\r\nexport const LowNibble = (b) => {\r\n    let s = IntToHex(b);\r\n    let result = parseInt(s.charAt(0), 16);\r\n    return result;\r\n};\r\n\r\nexport const HighNibble = (b) => {\r\n    let s = IntToHex(b);\r\n    let result = parseInt(s.charAt(1), 16);\r\n    return result;\r\n};\r\n\r\nexport const LeftPad = (value, length = 8, pad = '0') => {\r\n    if (typeof value === 'number') {\r\n        value = IntToStr(value);\r\n    }\r\n    return value.padStart(length, pad);\r\n};\r\n\r\nexport const RightPad = (value, length = 8, pad = '0') => {    \r\n    if (typeof value === 'number') {\r\n        value = IntToStr(value);\r\n    }\r\n    return value.padEnd(length, pad);\r\n};\r\n\r\nexport const YXToInt = (y, x) => {\r\n    return parseInt(IntToHex(y, 1) + IntToHex(x, 1), 16);\r\n};\r\n\r\nexport const parseBigInt = (str, base=10) => {\r\n    base = BigInt(base);\r\n    var bigint = BigInt(0);\r\n    for (var i = 0; i < str.length; i++) {\r\n        var code = str[str.length-1-i].charCodeAt(0) - 48; \r\n        if (code >= 10) \r\n            code -= 39\r\n        bigint += base**BigInt(i) * BigInt(code)\r\n    }\r\n    return bigint;\r\n};\r\n\r\nexport const getDelphiColorToHex = (color) => {\r\n\r\n    if (color !== -1) {\r\n        let hexString = color.toString(16);\r\n        hexString = hexString.padStart(6, 0);\r\n\r\n        let R = hexString.slice(-2);\r\n        let G = hexString.slice(-4, -2);\r\n        let B = hexString.slice(-6, -4);\r\n\r\n        return '#' + (R + G + B);\r\n    }\r\n    else {\r\n        return '';\r\n    }\r\n};\r\n\r\nexport const RandomRange = (min, max) => {\r\n    min = Math.ceil(min); \r\n    max = Math.floor(max); \r\n    let num = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    // console.log(num);\r\n    return num; \r\n};\r\n\r\nexport const GBGetPos = (value, arr) => {\r\n    for (let i = 0; i <= arr.length-1; i++) {\r\n        if (arr[i] === value) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n};\r\n\r\nexport const GBShuffle = (arr) => {\r\n    let len = arr.length;\r\n    let amount = 100;\r\n    for (let count = 1; count <= len * amount; count++) {\r\n        let i1 = RandomRange(0, len-1);\r\n        let i2 = RandomRange(0, len-1);\r\n        let temp = arr[i1];\r\n        arr[i1] = arr[i2];\r\n        arr[i2] = temp;\r\n    }\r\n};\r\n\r\nexport const GB2Dto1DArray = (arr2d) => {\r\n    let arr1d = [].concat.apply([], arr2d);\r\n    return arr1d;\r\n}\r\n\r\nexport const StringOfBytesToByteArray = (s) => {\r\n    let arr = s.trim().split(\" \");\r\n    let arr2 = arr.map(x => HexToInt(x));\r\n    return arr2;\r\n};\r\n\r\nexport const StringOfBytesTo1DHexArray = (s) => {\r\n    let a = s.trim();\r\n    let b = a.replace(/(?:\\r\\n|\\r|\\n)/g, ' ');\r\n    let c = b.replace(/\\t+/g, ' ');\r\n    let d = c.replace(/  +/g, ' ');\r\n    let arr = d.split(' ');\r\n    return arr;\r\n};\r\n\r\nexport const StringOfBytesTo2DHexArray = (s, maxY, maxX) => {\r\n    let arr = StringOfBytesTo1DHexArray(s);\r\n\r\n    let i = 0;\r\n    let x;\r\n    let y;\r\n    let arr2 = create2DArray(maxY, maxX, undefined);\r\n\r\n    for (y = 0; y < maxY; y++) {\r\n        for (x = 0; x < maxX; x++) {\r\n            arr2[y][x] = arr[i];\r\n            i++;\r\n        }\r\n    }\r\n\r\n    return arr2;\r\n};\r\n\r\n\r\n\r\n\r\nexport const BinToInt = (value) => {\r\n    return parseInt(value, 2);\r\n};\r\n\r\nexport const DecToBinStr = (n, digits) => {\r\n    return parseInt(n, 2).toString(2);\r\n\r\n    // var\r\n    //     S        : string;\r\n    //     i        : Integer;\r\n    //     Negative : Boolean;\r\n    //     begin\r\n    //     Negative := false;\r\n    //     if N < 0 then\r\n    //         Negative := True;\r\n    //     N := Abs(N);\r\n    //     for i :=1 to SizeOf(N) * 8 do\r\n    //     begin\r\n    //         if N < 0 then\r\n    //         S := S+ '1'\r\n    //         else\r\n    //         S := S+'0';\r\n    //         N := N shl 1;\r\n    //     end;\r\n    //     Delete(S,1,Pos('1',S)-1);\r\n\r\n    //     while Length(S) < digits do\r\n    //         S := '0' + S;\r\n\r\n    //     if Negative then\r\n    //         S := '-' + S;\r\n    //     Result := S;\r\n    //     end;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//----------------------------------------------------------------------------------------------------\r\n\r\nexport function GBStringify(obj, options = { indent: 4, maxLength: Infinity }) {\r\n\r\n    // https://github.com/lydell/json-stringify-pretty-compact/blob/master/index.js + custom changes\r\n\r\n    function stringify(obj, options) {\r\n        options = options || {};\r\n        var indent = JSON.stringify([1], null, get(options, \"indent\", 2)).slice(\r\n          2,\r\n          -3\r\n        );\r\n        var addMargin = get(options, \"margins\", false);\r\n        var maxLength = indent === \"\" ? Infinity : get(options, \"maxLength\", 80);\r\n      \r\n        return (function _stringify(obj, currentIndent, reserved) {\r\n          if (obj && typeof obj.toJSON === \"function\") {\r\n            obj = obj.toJSON();\r\n          }\r\n      \r\n          var string = JSON.stringify(obj);\r\n      \r\n          if (string === undefined) {\r\n            return string;\r\n          }\r\n      \r\n          var length = maxLength - currentIndent.length - reserved;\r\n      \r\n          if (string.length <= length) {\r\n            if (string[0] !== \"{\") {\r\n              // TGP\r\n              if (!(string[0] === \"[\" && string[1] === \"[\")) {\r\n                // TGP\r\n                if (!(string[0] === \"[\" && string[1] === \"{\")) {\r\n                  // TGP\r\n                  var prettified = prettify(string, addMargin);\r\n                  if (prettified.length <= length) {\r\n                    return prettified;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n      \r\n          if (typeof obj === \"object\" && obj !== null) {\r\n            var nextIndent = currentIndent + indent;\r\n            var items = [];\r\n            var delimiters;\r\n            var comma = function(array, index) {\r\n              return index === array.length - 1 ? 0 : 1;\r\n            };\r\n      \r\n            if (Array.isArray(obj)) {\r\n              for (var index = 0; index < obj.length; index++) {\r\n                items.push(\r\n                  _stringify(obj[index], nextIndent, comma(obj, index)) || \"null\"\r\n                );\r\n              }\r\n              delimiters = \"[]\";\r\n            } else {\r\n              Object.keys(obj).forEach(function(key, index, array) {\r\n                var keyPart = JSON.stringify(key) + \": \";\r\n                var value = _stringify(\r\n                  obj[key],\r\n                  nextIndent,\r\n                  keyPart.length + comma(array, index)\r\n                );\r\n                if (value !== undefined) {\r\n                  items.push(keyPart + value);\r\n                }\r\n              });\r\n              delimiters = \"{}\";\r\n            }\r\n      \r\n            if (items.length > 0) {\r\n              return [\r\n                delimiters[0],\r\n                indent + items.join(\",\\n\" + nextIndent),\r\n                delimiters[1]\r\n              ].join(\"\\n\" + currentIndent);\r\n            }\r\n          }\r\n      \r\n          return string;\r\n        })(obj, \"\", 0);\r\n    }\r\n      \r\n      // Note: This regex matches even invalid JSON strings, but since we’re\r\n      // working on the output of `JSON.stringify` we know that only valid strings\r\n      // are present (unless the user supplied a weird `options.indent` but in\r\n      // that case we don’t care since the output would be invalid anyway).\r\n      var stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,\\][}{]/g;\r\n      \r\n      function prettify(string, addMargin) {\r\n        var m = addMargin ? \" \" : \"\";\r\n        var tokens = {\r\n          \"{\": \"{\" + m,\r\n          \"[\": \"[\" + m,\r\n          \"}\": m + \"}\",\r\n          \"]\": m + \"]\",\r\n          \",\": \", \",\r\n          \":\": \": \"\r\n        };\r\n        return string.replace(stringOrChar, function(match, string) {\r\n          return string ? match : tokens[match];\r\n        });\r\n      }\r\n      \r\n      function get(options, name, defaultValue) {\r\n        return name in options ? options[name] : defaultValue;\r\n      }\r\n\r\n    return stringify(obj, options);\r\n};\r\n\r\n//----------------------------------------------------------------------------------------------------\r\n\r\n/* global BigInt */\r\nexport const ConvertToBase2 = (baseFrom, baseTo, s) => {\r\n    let flagNumber   = BigInt(0); // BigInteger\r\n    let flagBase     = '';\r\n    let flagString   = '';\r\n    let pos          = BigInt(0);\r\n\r\n    let i            = 0;\r\n    let n            = BigInt(0); // BigInteger\r\n    let k            = BigInt(0); // BigInteger\r\n    let baseToBigInt = BigInt(0); // BigInteger\r\n    // let Quotient     = BigInt(0);\r\n    let Remainder    = BigInt(0);\r\n    \r\n    baseFrom = BigInt(baseFrom);\r\n    baseTo = BigInt(baseTo);\r\n    flagBase = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!~';\r\n\r\n    /* Convert to dec */\r\n    flagNumber = BigInt(0);\r\n    for (i = 0; i <= s.length-1; i++) {  \r\n        pos = BigInt(flagBase.indexOf(s[i]));\r\n        flagNumber = flagNumber * baseFrom + pos;\r\n    }\r\n\r\n    if (flagNumber === 0) {\r\n        return '0';\r\n    }\r\n\r\n    flagString = '';\r\n    while (flagNumber > 0) {\r\n        n = flagNumber;\r\n\r\n        baseToBigInt = baseTo;\r\n\r\n        // Quotient = n / baseToBigInt;\r\n        Remainder = n % baseToBigInt;\r\n\r\n        flagString = flagBase[Remainder] + flagString;\r\n\r\n        k = flagNumber / baseTo;\r\n        flagNumber = k;\r\n    }\r\n\r\n    return flagString;\r\n};\r\n\r\nexport const ConvertToBase3 = (number, initial_base, change_base) => {\r\n    if ((initial_base && change_base) <2 || (initial_base && change_base)>36) {\r\n        return 'Base between 2 and 36';\r\n    }\r\n    \r\n    return parseInt(number + '', initial_base).toString(change_base);\r\n};\r\n\r\nexport const GetBankAddress = (bank, address) => {\r\n    return ((bank - 1) * 0x4000) + address;\r\n};\r\n\r\nexport const RoomExists = (uwID, roomID) => {\r\n    let result = true;\r\n\r\n    if ((uwID === 2) && (roomID === 0xFF)) {\r\n        result = false;\r\n    }\r\n\r\n    if ((uwID === 3) && (roomID > 0x15)) {\r\n        result = false;\r\n    }\r\n\r\n    if ((uwID > 3)) {\r\n        result = false;\r\n    }\r\n\r\n    if ((uwID < 0)) {\r\n        result = false;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const GetCodeImage = (i) => {\r\n\r\n    let arr1, arr2, arr3, arr4;\r\n    \r\n    switch (i) {\r\n        case 0x00:\r\n            arr1 = [0x00, 0x00, 0x06, 0x06, 0x0C, 0x0C, 0x08, 0x08];\r\n            arr2 = [0x18, 0x18, 0x34, 0x2C, 0x7E, 0x7E, 0x6E, 0x9F];\r\n            arr3 = [0xEF, 0x9F, 0x8D, 0xFF, 0xFD, 0xFF, 0x7A, 0xFF];\r\n            arr4 = [0x66, 0x7E, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00]; \r\n            break;\r\n    \r\n        case 0x01:\r\n            arr1 = [0x00, 0x00, 0x1C, 0x1C, 0x3E, 0x22, 0x73, 0x4D];\r\n            arr2 = [0xEF, 0xFD, 0xBD, 0xFF, 0xDB, 0xBB, 0xD8, 0xB8];\r\n            arr3 = [0x98, 0xF8, 0x9B, 0xFB, 0xBF, 0xFD, 0xFF, 0xED];\r\n            arr4 = [0x4D, 0x73, 0x22, 0x3E, 0x1C, 0x1C, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x02:\r\n            arr1 = [0x18, 0x18, 0x2C, 0x24, 0x2C, 0x24, 0x2C, 0x24];\r\n            arr2 = [0x2C, 0x24, 0x2C, 0x24, 0x2C, 0x24, 0x2C, 0x24];\r\n            arr3 = [0x2C, 0x24, 0xEF, 0xE7, 0xFF, 0xBD, 0x7E, 0x42];\r\n            arr4 = [0x3C, 0x3C, 0x24, 0x3C, 0x24, 0x3C, 0x18, 0x18];\r\n            break;\r\n    \r\n        case 0x03:\r\n            arr1 = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xE7];\r\n            arr2 = [0xFF, 0xBD, 0xFF, 0x81, 0xFF, 0xBD, 0xE7, 0xBD];\r\n            arr3 = [0xE7, 0xBD, 0xE7, 0xBD, 0xFF, 0x99, 0x7E, 0x42];\r\n            arr4 = [0x3C, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x04:\r\n            arr1 = [0x00, 0x00, 0x0E, 0x0E, 0x1E, 0x12, 0x3E, 0x26];\r\n            arr2 = [0x7A, 0x4A, 0x72, 0x52, 0x72, 0x52, 0x72, 0x52];\r\n            arr3 = [0x72, 0x52, 0x72, 0x52, 0x72, 0x52, 0x7A, 0x4A];\r\n            arr4 = [0x3E, 0x26, 0x1E, 0x12, 0x0E, 0x0E, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x05:\r\n            arr1 = [0x08, 0x08, 0x14, 0x14, 0x2A, 0x22, 0x55, 0x49];\r\n            arr2 = [0x63, 0x5D, 0x36, 0x3E, 0x08, 0x08, 0x08, 0x08];\r\n            arr3 = [0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x1C, 0x1C];\r\n            arr4 = [0x3A, 0x26, 0x22, 0x3E, 0x22, 0x3E, 0x3E, 0x3E];\r\n            break;\r\n    \r\n        case 0x06:\r\n            arr1 = [0x1C, 0x1C, 0x3E, 0x22, 0x7F, 0x63, 0x7F, 0x41];\r\n            arr2 = [0x22, 0x3E, 0x1C, 0x1C, 0x3E, 0x22, 0x3E, 0x36];\r\n            arr3 = [0x1C, 0x1C, 0x1C, 0x14, 0x1C, 0x14, 0x1C, 0x14];\r\n            arr4 = [0x1C, 0x14, 0x1C, 0x14, 0x1C, 0x1C, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x07:\r\n            arr1 = [0x00, 0x00, 0xDB, 0xDB, 0xFF, 0xA5, 0xDB, 0xA5];\r\n            arr2 = [0x76, 0x4A, 0x3C, 0x3C, 0x34, 0x2C, 0x76, 0x4A];\r\n            arr3 = [0xD5, 0x8B, 0xDD, 0x83, 0xFD, 0x83, 0xFD, 0x83];\r\n            arr4 = [0xA9, 0xD7, 0x66, 0x7E, 0x3C, 0x3C, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x08:\r\n            arr1 = [0x00, 0x00, 0x0E, 0x0E, 0x1F, 0x11, 0x3F, 0x21];\r\n            arr2 = [0x3F, 0x29, 0x7F, 0x41, 0x7D, 0x53, 0xFD, 0x83];\r\n            arr3 = [0xF9, 0x97, 0xFA, 0x86, 0xF2, 0xAE, 0xE4, 0x9C];\r\n            arr4 = [0x8C, 0xFC, 0x76, 0x7A, 0x0E, 0x0E, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x09:\r\n            arr1 = [0x07, 0x07, 0x09, 0x0F, 0x11, 0x1F, 0x21, 0x3F];\r\n            arr2 = [0x39, 0x27, 0x75, 0x4B, 0x77, 0x49, 0x6F, 0x51];\r\n            arr3 = [0x6E, 0x56, 0x5E, 0x62, 0x5C, 0x64, 0x78, 0x78];\r\n            arr4 = [0x70, 0x50, 0x70, 0x50, 0x70, 0x50, 0x20, 0x20];\r\n            break;\r\n    \r\n        case 0x0A:\r\n            arr1 = [0x1C, 0x1C, 0x3A, 0x26, 0x7D, 0x5B, 0x7D, 0x5B];\r\n            arr2 = [0x7D, 0x5B, 0x7B, 0x47, 0x3F, 0x3D, 0x3F, 0x25];\r\n            arr3 = [0x7F, 0x59, 0x7F, 0x41, 0xFF, 0x81, 0xFF, 0x91];\r\n            arr4 = [0xEF, 0xA9, 0xC7, 0xC5, 0x03, 0x03, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x0B:\r\n            arr1 = [0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x42, 0x66, 0x7E];\r\n            arr2 = [0x3C, 0x24, 0x3C, 0x24, 0x3C, 0x3C, 0xFF, 0xE7];\r\n            arr3 = [0xFF, 0xA5, 0xDB, 0xBD, 0xC3, 0xBD, 0xE7, 0x99];\r\n            arr4 = [0x7E, 0x42, 0x3C, 0x24, 0x18, 0x18, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x0C:\r\n            arr1 = [0x00, 0x00, 0x7F, 0x7F, 0x5F, 0x41, 0x7F, 0x41];\r\n            arr2 = [0x3F, 0x3F, 0x1F, 0x15, 0x1F, 0x1D, 0x1F, 0x15];\r\n            arr3 = [0x1F, 0x15, 0x3F, 0x3D, 0x7F, 0x41, 0xFF, 0x81];\r\n            arr4 = [0xFF, 0x85, 0x7B, 0x7B, 0x00, 0x00, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x0D:\r\n            arr1 = [0x00, 0x00, 0x06, 0x06, 0x0E, 0x0A, 0x1E, 0x1E];\r\n            arr2 = [0x36, 0x22, 0x7F, 0x79, 0x7F, 0x45, 0xCF, 0x83];\r\n            arr3 = [0xFF, 0x81, 0xEF, 0x9D, 0xFF, 0xBD, 0xFE, 0xA2];\r\n            arr4 = [0xFC, 0xBC, 0xE0, 0xA0, 0xC0, 0xC0, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x0E:\r\n            arr1 = [0x7E, 0x7E, 0x4E, 0x42, 0x7E, 0x7E, 0x2C, 0x24];\r\n            arr2 = [0x2C, 0x24, 0x2C, 0x24, 0x2C, 0x24, 0x2C, 0x24];\r\n            arr3 = [0x7E, 0x42, 0xCF, 0x81, 0xA5, 0xDF, 0x8D, 0xFF];\r\n            arr4 = [0xB9, 0xFF, 0x42, 0x7E, 0x3C, 0x3C, 0x00, 0x00];\r\n            break;\r\n    \r\n        case 0x0F:\r\n            arr1 = [0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x17, 0x19];\r\n            arr2 = [0x2D, 0x33, 0x5A, 0x66, 0xB4, 0xCC, 0xF8, 0x88];\r\n            arr3 = [0xF8, 0x88, 0xB4, 0xCC, 0x5A, 0x66, 0x2D, 0x33];\r\n            arr4 = [0x17, 0x19, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00];\r\n            break;\r\n\r\n        default:\r\n            throw new Error(\"GetCodeImage - Invalid index provided.\")\r\n    }\r\n\r\n    return {\r\n        arr1 : arr1,\r\n        arr2 : arr2, \r\n        arr3 : arr3, \r\n        arr4 : arr4\r\n    };\r\n};\r\n\r\nexport const RandomizeDamageValue = (original, minDamage, maxDamage) => {\r\n    let randDamage = 0;\r\n    let newDamage  = 0;\r\n    let b          = 0;\r\n    let result;\r\n\r\n    randDamage = RandomRange(minDamage, maxDamage);\r\n\r\n    while (randDamage % 4 > 0) {\r\n        randDamage = randDamage - 1;\r\n    }\r\n\r\n    newDamage = original + randDamage;\r\n\r\n    /* Bounds */\r\n    if (newDamage < 0x00) {\r\n        newDamage = 0x00;\r\n    }\r\n    if (newDamage > 0xF0) {\r\n        newDamage = 0xF0;\r\n    }\r\n  \r\n    b = newDamage;\r\n    result = b;\r\n\r\n    return result;\r\n};\r\n\r\nexport const Transpose8By8Graphic = (arr) => {\r\n    let result = [];\r\n    let s      = \"\";\r\n    let i, j   = 0;\r\n    let arr2   = [];\r\n    let sArr1  = []; //2d\r\n    let sArr2  = []; //2d\r\n    let len    = 0;\r\n\r\n    len = arr.length;\r\n\r\n    sArr1 = create2DArray(len, len, \"\");\r\n    sArr2 = create2DArray(len, len, \"\");\r\n\r\n    for (i = 0; i <= len-1; i++) {\r\n        s = DecToBinStr(arr[i], 8);\r\n        for (j = 0; j <= 7; j++) {\r\n            if (s.length < (j+1)) {\r\n                sArr1[i][j] = '0';\r\n            }\r\n            else {\r\n                sArr1[i][j] = s[j+1];\r\n            }\r\n        } \r\n    } \r\n\r\n    //  (* Debug *)\r\n    //  GBDebug('Original:');\r\n    //  s := '';\r\n    //  for i := 0 to len-1 do\r\n    //    s := s + IntToHex(arr[i], 2) + ', ';\r\n    //  GBDebug(s);\r\n    //\r\n    //  (* Debug*)\r\n    //  for i := 0 to len-1 do\r\n    //    GBDebug(sArr1[i, 0] + sArr1[i, 1] + sArr1[i, 2] + sArr1[i, 3] + sArr1[i, 4] + sArr1[i, 5] + sArr1[i, 6] + sArr1[i, 7]);\r\n    //  GBDebug('');\r\n\r\n    for (i = 0; i <= len-1; i++) {\r\n        for (j = 0; j <= 7; j++) {\r\n            sArr2[i][j] = sArr1[j][sArr1.length - 1 - i];\r\n        }\r\n    }\r\n\r\n    //  (* Debug *)\r\n    //  GBDebug('Transposed:');\r\n    //  for i := 0 to len-1 do\r\n    //    GBDebug(sArr2[i, 0] + sArr2[i, 1] + sArr2[i, 2] + sArr2[i, 3] + sArr2[i, 4] + sArr2[i, 5] + sArr2[i, 6] + sArr2[i, 7]);\r\n    //  GBDebug('');\r\n\r\n    for (i = 0; i <= len-1; i++) {\r\n        s = '';\r\n        for (j = 0; j <= len-1; j++) {\r\n            s = s + sArr2[i][j];\r\n        }\r\n        arr2[i] = BinToInt(s);\r\n    }\r\n\r\n    //  (* Debug *)\r\n    //  GBDebug('Transposed Hex:');\r\n    //  s := '';\r\n    //  for i := 0 to len-1 do\r\n    //    s := s + IntToHex(arr2[i], 2) + ', ';\r\n    //  GBDebug(s);\r\n    //  GBDebug('');\r\n\r\n    result = arr2;\r\n    return result;\r\n};\r\n\r\n\r\n\r\n\r\n// let x = parseBigInt('11010011010110100001010011111010010111011111000010010111000111110011111011111000001100000110000011000001100111010100111010101110100010001011010101110011110000011000001100000110000011001001100000110000011000001100000110000111000011100000110000011000001100000110000011000010101100011001110101101001100110100100000110000011000001100000110001001101011110110010001011010001101011010100011001001110001110010100111011011111010000110001110010101010001111010010000101100001000001100001011000011011111000011110001110111110011111111000100011110110101000101100000110000011000001100000110000011010011101010110101101001111101001010010111101011000011101100110010011001001111101', 2);\r\n// let y = parseBigInt('1NAOLcol8qW', 62);\r\n// let z = ConvertToBase2(10, 2, y.toString());\r\n// debugger;\r\n\r\n// let x = parseBigInt('~~~~~~~~y0', 62);\r\n// let y =  x.toString(62);\r\n// // let z = ConvertToBase2(10, 2, y.toString());\r\n// debugger;\r\n\r\n\r\n// debugger;\r\n// let a = ConvertToBase2(64, 2, 'z');\r\n// let b = ConvertToBase2(64, 2, '~');\r\n// let x = ConvertToBase2(64, 2, '~~~~~~yyy0');\r\n// let y = ConvertToBase2(2, 64, x);\r\n// debugger;\r\n\r\n\r\n\r\n// debugger;\r\n// let a = parseBigInt('~~~~~~yyy0');\r\n// let b = ConvertToBase2(64, 2, a);\r\n// let x = ConvertToBase2(64, 2, '~~~~~~yyy0');\r\n// let y = ConvertToBase2(2, 64, x);\r\n// debugger;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* For the visualizer result */\r\n\r\nexport const GetUWID = (x, y, uwIDArr) => {\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n\r\n    return uwIDArr[yy][xx];\r\n};\r\n\r\nexport const GetRoomID = (x, y, roomIDArr) => {\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n\r\n    return roomIDArr[yy][xx];\r\n};\r\n\r\n\r\n\r\n\r\n","export const ADDR_ROM_CHECKSUM             = 0x014E;\r\nexport const ADDR_ROM_VERSION              = 0x014C;\r\n\r\n/* Link moves faster */\r\nexport const ADDR_SPEEDUP_v10              = 0x842F;\r\nexport const ADDR_SPEEDUP_v12              = 0x8437;\r\n\r\n/* Spike / Lava damage */\r\nexport const ADDR_LAVA_DMG                 = 0x929F;\r\nexport const ADDR_SPIKE_DMG                = 0xB671;\r\n\r\n/* Rooster cave pit transition */\r\nexport const ADDR_ROOSTERCAVE_PITTRANS_V10 = 0x9176;\r\nexport const ADDR_ROOSTERCAVE_PITTRANS_V12 = 0x9196;\r\n\r\n/* Acorn / PoP */\r\nexport const ADDR_PowerUp_Text1_V10        = 0xE405; // Remove Acorn / PoP Animation and Text\r\nexport const ADDR_PowerUp_Text2_V10        = 0xE408;\r\nexport const ADDR_PowerUp_Music1_V10       = 0xE414; // Remove Acorn / PoP Music\r\nexport const ADDR_PowerUp_Music2_V10       = 0xE41D;\r\n\r\nexport const ADDR_PowerUp_Text1_V12        = 0xE401; // Remove Acorn / PoP Animation and Text\r\nexport const ADDR_PowerUp_Text2_V12        = 0xE404;\r\nexport const ADDR_PowerUp_Music1_V12       = 0xE410; // Remove Acorn / PoP Music\r\nexport const ADDR_PowerUp_Music2_V12       = 0xE419;\r\n\r\n/* Swordless music */\r\nexport const ADDR_SwordlessMusic1          = 0x8156;\r\nexport const ADDR_SwordlessMusic2_V10      = 0xBAF4;\r\nexport const ADDR_SwordlessMusic2_V12      = 0xBB47;\r\n\r\n/* Low health beeping */\r\nexport const ADDR_LowHealthBeep_V10        = 0xA326;\r\nexport const ADDR_LowHealthBeep_V12        = 0xA347;\r\n\r\n/* Sprite indices */\r\nexport const ADDR_SpriteIndices_V10        = 0x830D3;\r\nexport const ADDR_SpriteIndices_V12        = 0x830DB;\r\n\r\n/* Prevent stealing */\r\nexport const ADDR_ShopCustomStart          = 0x2E58B;\r\nexport const ADDR_ShopCustomEnd            = 0x2E597;\r\n\r\n/* Remove chest dialog */\r\nexport const ADDR_NoChestDialog_V10        = 0x1FCD5;\r\nexport const ADDR_NoChestDialog_V12        = 0x1FD11;\r\n\r\n/* Deathl arm damage */\r\nexport const ADDR_DeathlArmDamage_V10      = 0x572FE;\r\nexport const ADDR_DeathlArmDamage_V12      = 0x57300;\r\n\r\n/* Four chest room index - chests */\r\nexport const FOUR_CHEST_ROOM               = 256 + 256 + 242;\r\n\r\n/* Chest in starting house */\r\n// export const ADDR_LinksHouseChest          = 0x50803;\r\nexport const ADDR_LinksHouseChestCollision = 0x2E5EC;\r\n\r\n/* Enemies */\r\nexport const boss_AddrArr              = [0x5865A, 0x5873D, 0x5889A, 0x58CA1, 0x589C3, 0x58B4E, 0x5912C, 0x58DBC];\r\nexport const boss_SpirteSetAddrArr1_V0 = [0x831D9, 0x831FE, 0x8322D, 0x832C2, 0x83258, 0x8328F, 0x833BB, 0x83307];\r\nexport const boss_SpirteSetAddrArr2_V0 = [0x00000, 0x00000, 0x00000, 0x832D2, 0x00000, 0x00000, 0x833CB, 0x00000];\r\nexport const boss_SpirteSetAddrArr1_V2 = [0x831E1, 0x83206, 0x83235, 0x832CA, 0x83260, 0x83297, 0x833C3, 0x8330F];\r\nexport const boss_SpirteSetAddrArr2_V2 = [0x00000, 0x00000, 0x00000, 0x832DA, 0x00000, 0x00000, 0x833D3, 0x00000];\r\n//  export const boss_SpirteSetAddrArr2 = [0x831E6, 0x83208, 0x00000, 0x832DA, 0x00000, 0x00000, 0x833D3, 0x00000];\r\n\r\nexport const miniboss_AddrArr = [0x58693, 0x5872A, 0x587ED, 0x588E2, 0x58A2D, 0x58B95, 0x58D88, 0x58DF5];\r\n\r\n/* Special Tiles for pointers */\r\n// 0 - 0x0E Dungeon 7\r\n// 1 - 0x8C Dungeon 6\r\n// 2 - 0x79 Castle Entrance\r\n// 3 - 0x06 Wind Fish Egg\r\n// 4 - 0x1B Above Dungeon 4\r\n// 5 - 0x2B Dungeon 4\r\n\r\nexport const TPointerAddressesV10 = {\r\n    RoomData_SpecialTiles     : [0x031C1, 0x031D1, 0x031E1, 0x031F1, 0x03201, 0x03211] // diff\r\n};\r\n\r\nexport const TDataAddresses = {\r\n    TileProperties            : [0x20AD4, 0x20BD4, 0x20CD4, 0x20CD4],\r\n    Events                    : [0x00000, 0x50000, 0x50100, 0x50200],\r\n    SubmapDefinitions         : [0x50220],\r\n    Chests                    : [0x50560, 0x50660, 0x50760, 0x50860],\r\n    RoomData_SpecialTiles     : [0x24496, 0x247EC, 0x24C0F, 0x2509A, 0x26513, 0x6834E],\r\n\r\n    // ChestRange                : [0x50560, 0x5087F],\r\n    SpriteDamage              : [0x0C7F0, 0x0C826],\r\n    Music                     : [0x08000, 0x08119],\r\n    Text0                     : [0x2668E, 0x27FFF],\r\n    Text1                     : [0x51944, 0x53FFF], // REMOVING ENDING CREDITS CRASHES GAME // 0x5C48A);\r\n    Text2                     : [0x59700, 0x5BFA8],\r\n    Text3                     : [0x70B2A, 0x73FFF],\r\n    Text4                     : [0x74000, 0x76A1D],\r\n                                                    // Ignore removing the path of the egg\r\n    Text4_2                   : [0x76BD6, 0x77FFF],\r\n\r\n    RoomData_Overworld_TOP    : [0x24200, 0x2668D],\r\n    RoomData_Underworld1      : [0x28200, 0x2BB76],\r\n    RoomData_ColorDungeon     : [0x2BBB7, 0x2BFFF],\r\n    RoomData_Underworld2      : [0x2C200, 0x2FFFF],\r\n    RoomData_Overworld_BOTTOM : [0x68000, 0x69E7F],\r\n\r\n    Overlay                   : [0x98000, 0x9D03F],\r\n    DeadSpriteArea            : [0x5BFA9, 0x5BFFE],\r\n\r\n    TileGraphicsOverworld1    : [0x98000, 0x9BFBF],\r\n    TileGraphicsOverworld2    : [0x9C000, 0x9D03F],\r\n    TileGraphicsOverworldSpec : [0x9D040, 0x9D21F],\r\n};\r\n\r\nexport const TPointerAddresses = {\r\n    RoomData_SpecialTiles     : [0x031C4, 0x031D4, 0x031E4, 0x031F4, 0x03204, 0x03214],\r\n    Overlay_SpecialTiles      : [0x82DCA, 0x82DDA, 0x82DEA, 0x82DFA, 0x82E0A, 0x82E1A],\r\n\r\n    RoomData_Overworld_TOP    : [0x24000, 0x240FF],\r\n    RoomData_Overworld_BOTTOM : [0x24100, 0x241FF],\r\n    RoomData_Underworld1      : [0x28000, 0x281FF],\r\n    RoomData_ColorDungeon     : [0x2BB77, 0x2BBA2],\r\n    RoomData_Leftover         : [0x2BBA3, 0x2BBB8],\r\n    RoomData_Underworld2      : [0x2C000, 0x2C1FF],\r\n\r\n    ScreenWallTempletesCode   : [0x50880, 0x508A0],\r\n    ScreenWallTempletes       : [0x508A1, 0x50916],\r\n\r\n    Sprite_Overworld          : [0x58000, 0x581FF],\r\n    Sprite_Underworld1        : [0x58200, 0x583FF],\r\n    Sprite_Underworld2        : [0x58400, 0x585FF],\r\n    Sprite_ColorDungeon       : [0x58600, 0x5862B],\r\n    Sprite_Leftover           : [0x5862C, 0x5863F],\r\n\r\n    Text1                     : [0x70000, 0x70148],\r\n    Text2                     : [0x70149, 0x70210],\r\n                                                                                // REMOVING ENDING CREDITS CRASHES GAME // 0x5C480);\r\n    Text3                     : [0x70211, 0x70320],\r\n    Text4                     : [0x70321, 0x7049C],\r\n    Text0                     : [0x7049D, 0x70560],\r\n\r\n    Palette_Overworld         : [0x842B1, 0x842EE],\r\n    Palette_Dungeon           : [0x843EF, 0x84400],\r\n    Palette_DungeonSideView   : [0x84401, 0x84412],\r\n    Palette_CavesAndHouses    : [0x84413, 0x8443E],\r\n    Palette_CavesAndHousesIdx : [0x8443F, 0x84484],\r\n    Palette_OddDungeonRooms   : [0x851F6, 0x85239],\r\n\r\n    DungeonOwlStatues         : [0xD89FC, 0xD89FB],\r\n    Unknown8Things1           : [0xD8A14, 0xD8A23],\r\n    DungeonOwlStatuesMap      : [0xD8A24, 0xD8A3B],\r\n    Unknown8Things2           : [0xD8A3C, 0xD8A4B],\r\n};","/* eslint-disable no-unused-vars */\r\n \r\n//============================================================================\r\n//\r\n//                               General\r\n//\r\n//============================================================================\r\n\r\nexport const CHECKSUM_10                    = 'E3FD';\r\nexport const CHECKSUM_12                    = '0135';\r\n\r\nexport const POINTER_OFFSET                 = 0x4000;\r\nexport const BANK_LENGTH                    = 0x4000;\r\nexport const ROM_LENGTH                     = 0xFFFFF;\r\n\r\nexport const UW_0                           = 0;\r\nexport const UW_1                           = 1;\r\nexport const UW_2                           = 2;\r\nexport const UW_3                           = 3;\r\n\r\nexport const VIEWID_E0                      = 0xE0;\r\nexport const VIEWID_E1                      = 0xE1;\r\nexport const VIEWID_E2                      = 0xE2;\r\n\r\nexport const UNDERWORLD_SIZE_X              = 0x0F;\r\nexport const UNDERWORLD_SIZE_Y              = 0x0F;\r\n\r\nexport const SUBMAP_SIZE_X                  = 0x07;\r\nexport const SUBMAP_SIZE_Y                  = 0x07;\r\n\r\nexport const ROOM_SIZE_X                    = 0x09;\r\nexport const ROOM_SIZE_Y                    = 0x07;\r\n\r\n//============================================================================\r\n//\r\n//                              Game General\r\n//\r\n//============================================================================\r\n\r\n// Directions\r\nexport const DIRECTION_LEFT           = 1;\r\nexport const DIRECTION_UP             = 2;\r\nexport const DIRECTION_RIGHT          = 3;\r\nexport const DIRECTION_DOWN           = 4;\r\nexport const DIRECTION_UPLEFT         = 5;\r\nexport const DIRECTION_UPRIGHT        = 6;\r\nexport const DIRECTION_DOWNRIGHT      = 7;\r\nexport const DIRECTION_DOWNLEFT       = 8;\r\n\r\nexport const DIRECTION_UPUPLEFT       = 9;\r\nexport const DIRECTION_UPUP           = 10;\r\nexport const DIRECTION_UPUPRIGHT      = 11;\r\n\r\nexport const DIRECTION_UPLEFTx2       = 12;\r\nexport const DIRECTION_UPLEFTx3       = 13;\r\nexport const DIRECTION_UPLEFTx4       = 14;\r\nexport const DIRECTION_UPLEFTx5       = 15;\r\n\r\nexport const DIRECTION_UPRIGHTx2      = 16;\r\nexport const DIRECTION_UPRIGHTx3      = 17;\r\nexport const DIRECTION_UPRIGHTx4      = 18;\r\nexport const DIRECTION_UPRIGHTx5      = 19;\r\n\r\n//============================================================================\r\n//\r\n//                                Other\r\n//\r\n//============================================================================\r\n\r\n//  miniboss_SpriteArr : array [0..7] of integer = (\r\n//    0x38 0x81 0x36 0x82,   // Guy with pillar\r\n//    0x25 0x89            // arm guy orange\r\n//    0x23 0x60 0x25 0x60    // dodongos\r\n//    0x11 0x8E            // shellfish guy\r\n//    0x12 0x5E 0x42 0x5E    // gohma\r\n//    0x35 0x92            // ball dog        // ball dog...same info as arm guy???\r\n//    0x04 0xBC            // skullkid        //   35 92 arm guy 58D3F\r\n//    0x35 0xBE            // blaino\r\n//  );\r\n\r\nexport const enemy_byteArr = [\r\n    0x08, 0x04, 0x04, 0x08, 0x08, 0x18, 0x08, 0x04, 0x08, 0x10, 0x08, 0x10, 0x08, 0x08, 0x04, 0x08,\r\n    0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x00, 0x00, 0x08, 0x08, 0x08, 0x0C, 0x0C, 0x14, 0x10,\r\n    0x20, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x14, 0x08, 0x04, 0x08, 0x04, 0x04, 0x08,\r\n    0x08, 0x04, 0x04, 0x04, 0x08, 0x08, 0x02\r\n];\r\n\r\nexport const enemy_changeArr = [\r\n    0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1,\r\n    1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1,\r\n    1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,\r\n    1, 0, 0, 0, 0, 0, 0\r\n];\r\n\r\n//============================================================================\r\n//\r\n//                                Other\r\n//\r\n//============================================================================\r\n\r\n// Tile graphics overworld \r\nexport const LA_TILEGRAPHICS_POT            = 0x20;\r\nexport const LA_TILEGRAPHICS_GRASS          = 0x5C;\r\nexport const LA_TILEGRAPHICS_PIT            = 0xE8;\r\n\r\n// Overworld \r\nexport const LA_TILE_STAIRCASE1             = 0xC2;\r\nexport const LA_TILE_STAIRCASE2             = 0xC6;\r\nexport const LA_TILE_SPECIALGRASS           = 0xD3;\r\nexport const LA_TILE_EGGWALL                = 0xAA; //0xCB;\r\nexport const LA_TILE_GRASS                  = 0x5C;\r\nexport const LA_TILE_WELL                   = 0x61;\r\nexport const LA_TILE_KEYHOLE                = 0xC0;\r\nexport const LA_TILE_KEYWALL                = 0xC2;\r\nexport const LA_TILE_BRIDGE                 = 0xDB;\r\nexport const LA_TILE_TRANSITION0            = 0xE1;\r\nexport const LA_TILE_TRANSITION1            = 0xE2;\r\nexport const LA_TILE_PIT                    = 0xE8;\r\n\r\n// Underworld Common? \r\n\r\nexport const LA_TILE_Chest1                 = 0xA0;\r\nexport const LA_TILE_Chest2                 = 0xA1;\r\nexport const LA_TILE_POT                    = 0x20;\r\nexport const LA_TILE_FORESTCIRCLE           = 0x6E;\r\nexport const LA_TILE_MOUNTAINROCK           = 0xC8;\r\nexport const LA_TILE_SIGN                   = 0xD4;\r\nexport const LA_TILE_LEFTLEDGE              = 0xF0;\r\nexport const LA_TILE_RIGHTLEDGE             = 0xF3;\r\n\r\n// Underworld 1 and 2 \r\n\r\nexport const LA_TILE_STAIRS1                = 0x2D;\r\nexport const LA_TILE_STAIRS2                = 0x37;\r\nexport const LA_TILE_STAIRS3                = 0xBE;\r\nexport const LA_TILE_STAIRS4                = 0xBF;\r\nexport const LA_TILE_STAIRS5                = 0xCB;\r\nexport const LA_TILE_STAIRS6                = 0xA2;\r\nexport const LA_TILE_STAIRS7                = 0xA3;\r\nexport const LA_TILE_STAIRS8                = 0xA8;\r\nexport const LA_TILE_STAIRS9                = 0xFD;\r\n\r\nexport const LA_TILE_PITTRANSITION1         = 0x1C;\r\nexport const LA_TILE_PITTRANSITION2         = 0x1D;\r\nexport const LA_TILE_PITTRANSITION3         = 0x1E;\r\nexport const LA_TILE_PITTRANSITION4         = 0x1F;\r\n\r\nexport const LA_TILE_MINIDUNGEONHEAD1       = 0x8F;\r\nexport const LA_TILE_MINIDUNGEONHEAD2       = 0xD9;\r\nexport const LA_TILE_D5LADDER1              = 0x9E;\r\nexport const LA_TILE_D5LADDER2              = 0x9F;\r\n\r\nexport const LA_TILE_PART_TOPLEFT           = 0x96;\r\nexport const LA_TILE_PART_TOPRIGHT          = 0x95;\r\nexport const LA_TILE_PART_BOTTOMRIGHT       = 0x93;\r\nexport const LA_TILE_PART_BOTTOMLEFT        = 0x94;\r\n\r\nexport const LA_TILE_PART_SOLID_TOPLEFT     = 0x17;\r\nexport const LA_TILE_PART_SOLID_TOPRIGHT    = 0x16;\r\nexport const LA_TILE_PART_SOLID_BOTTOMRIGHT = 0x14;\r\nexport const LA_TILE_PART_SOLID_BOTTOMLEFT  = 0x15;\r\n\r\nexport const LA_TILE_PART_SOLID_LEFT        = 0x11;\r\nexport const LA_TILE_PART_SOLID_TOP         = 0x12;\r\nexport const LA_TILE_PART_SOLID_RIGHT       = 0x10;\r\nexport const LA_TILE_PART_SOLID_BOTTOM      = 0x13;\r\n\r\nexport const LA_TILE_PUSH_TRIGGER_POT       = 0x8E;\r\nexport const LA_TILE_BLOCK                  = 0xA6;\r\nexport const LA_TILE_PUSHBLOCK              = 0xA7;\r\nexport const LA_TILE_PUSH_TRIGGER           = 0xAA;\r\nexport const LA_TILE_UNLIT_TORCH            = 0xAB;\r\n\r\nexport const LA_TILE_KEYDOOR_1              = 0xEC;\r\nexport const LA_TILE_KEYDOOR_2              = 0xED;\r\nexport const LA_TILE_KEYDOOR_3              = 0xEE;\r\nexport const LA_TILE_KEYDOOR_4              = 0xEF;\r\nexport const LA_TILE_DOOR_LOCKS_1           = 0xF0;                                         // open door that locks\r\nexport const LA_TILE_DOOR_LOCKS_2           = 0xF1;                                         // open door that locks\r\nexport const LA_TILE_DOOR_LOCKS_3           = 0xF2;                                         // open door that locks\r\nexport const LA_TILE_DOOR_LOCKS_4           = 0xF3;                                         // open door that locks\r\nexport const LA_TILE_OPENDOOR_1             = 0xF4;\r\nexport const LA_TILE_OPENDOOR_2             = 0xF5;\r\nexport const LA_TILE_OPENDOOR_3             = 0xF6;\r\nexport const LA_TILE_OPENDOOR_4             = 0xF7;\r\nexport const LA_TILE_NIGHTMARE_DOOR         = 0xF8;\r\n//                             = 0xF9;\r\nexport const LA_TILE_ONEWAYDOOR_CAN         = 0xFA;                                         // one way door can go through\r\nexport const LA_TILE_ONEWAYDOOR_CANNOT      = 0xFB;                                         // one way door cant go through\r\nexport const LA_TILE_DUNGEON_ENTRANCE       = 0xFC;\r\nexport const LA_TILE_CAVE_ENTRANCE          = 0xFD;\r\n\r\n//============================================================================\r\n//\r\n//                                TileType\r\n//\r\n//============================================================================\r\n\r\nexport const Z4_TILE_TRANS             = 0;           // 00 - Trans\r\nexport const Z4_TILE_SOLID             = 1;           // 01 - Solid\r\nexport const Z4_TILE_POT               = 2;           // 02 - Pot\r\nexport const Z4_TILE_KEYLOCKED         = 3;           // 03 - key locked\r\nexport const Z4_TILE_DOORCLOSED        = 4;           // 04 - Half door closed\r\nexport const Z4_TILE_BOMBABLE          = 5;           // 05 - Bombable wall\r\nexport const Z4_TILE_DOORONEWAY        = 6;           // 06 - Half Door 1-way\r\nexport const Z4_TILE_SWORDABLE         = 7;           // 07 - breakable\r\nexport const Z4_TILE_PIT               = 8;           // 08 - Jumpable pit lava apike\r\nexport const Z4_TILE_UNKNOWN           = 9;           // 11 - orb block\r\nexport const Z4_TILE_ORBBLOCK          = 11;          // 12 - flippers\r\nexport const Z4_TILE_FLIPPERS          = 12;          // 13 - pushable block\r\nexport const Z4_TILE_PUSHABLEBLOCK     = 13;          // 14 - hookshot\r\nexport const Z4_TILE_HOOKSHOT          = 14;          // 15 - chest\r\nexport const Z4_TILE_CHEST             = 15;          // 16 - stair\r\nexport const Z4_TILE_STAIRS            = 16;          // 17 - walkable but cant go through\r\nexport const Z4_TILE_PARTSOLID         = 17;          // 9 - no idea\r\nexport const Z4_TILE_ONEWAYTOP         = 18;\r\nexport const Z4_TILE_STRANGEOBJECT     = 19;\r\nexport const Z4_TILE_LEDGE             = 20;\r\nexport const Z4_TILE_KEYHOLE           = 21;\r\n    //const  Z4_TILE_LEFTRIGHTONLY     = 22;\r\nexport const Z4_TILE_UPDOWNONLY        = 23;\r\nexport const Z4_TILE_TREE              = 24;\r\nexport const Z4_TILE_HOUSE             = 25;\r\nexport const Z4_TILE_TELEPORTHILL      = 26;\r\nexport const Z4_TILE_GRASS             = 27;\r\nexport const Z4_TILE_RIVERRAPID        = 28;\r\nexport const Z4_TILE_ICECUBE           = 29;\r\nexport const Z4_TILE_MDLADDER          = 30;          // Minidungeon ladder\r\nexport const Z4_TILE_UNLITTORCH        = 31;\r\nexport const Z4_TILE_NIGHTMAREDOOR     = 32;\r\nexport const Z4_TILE_ORBBLOCK1         = 33;\r\nexport const Z4_TILE_ORBBLOCK2         = 34;\r\nexport const Z4_TILE_PITTRANSITION     = 35;\r\nexport const Z4_TILE_SPECIALGRASS      = 36;\r\nexport const Z4_TILE_DUNGEONGATE       = 37;\r\nexport const Z4_TILE_TOMBSTONE         = 38;\r\n\r\nexport const Z4_TILETYPE = [\r\n    [\r\n   // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n      1,  0,  0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  12, 0,  // 0\r\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  1,  // 1\r\n      2,  1,  1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 2\r\n      0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 3\r\n\r\n      1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  20, 1,  1,  1,  1,  1,  // 4\r\n      1,  1,  1,  0,  21, 1,  1,  1,  1,  1,  1,  1,  27, 1,  1,  1,  // 5\r\n      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 6        69 = spike?\r\n      21, 1,  1,  1,  1,  1,  1,  23, 0,  0,  0,  8,  1,  1,  1,  1,  // 7\r\n\r\n      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 8      // 0x8E is grabable, but you can't walk on it\r\n      1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 9\r\n      15, 15, 1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // A\r\n      1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  5,  1,  1,  1,  1,  1,  // B\r\n\r\n      21, 1,  37, 1,  1,  38, 16, 1,  1,  1,  1,  16, 0,  1,  1,  0,  // C\r\n      0,  0,  0,  36, 1,  1,  1,  1,  1,  12, 1,  23, 0,  1,  1,  1,  // D\r\n      23, 16, 16, 16, 1,  1,  1,  1,  8,  1,  1,  28, 28, 28, 28, 8,  // E      // 0xE7 is a transition, but dual transition outside master armos shrine\r\n      20, 1,  1,  20, 1,  1,  1,  1,  1,  1,  5,  1,  1,  1,  9,  9   // F\r\n    ],\r\n    [\r\n   // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n      0,  8,  0,  0,  0,  0,  8,  0,  1,  1,  1,  1,  1,  0,  12, 0,  // 0\r\n      17, 17, 17, 17, 17, 17, 17, 17, 0,  1,  1,  0,  35, 35, 35, 35, // 1\r\n      2,  20, 20, 20, 20, 1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  3,  // 2\r\n      3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  // 3\r\n      5,  5,  5,  0,  0,  6,  6,  5,  5,  5,  5,  12, 0,  0,  19, 19, // 4\r\n\r\n      1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r\n      1,  1,  30, 30, 30, 30, 9,  12, 1,  0,  0,  0,  1,  1,  0,  0,  // 6\r\n\r\n      0,  0,  12, 12, 12, 0,  0,  0,  0,  0,  9,  1,  0,  0,  12, 0,  // 7\r\n      12, 12, 0,  12, 12, 1,  1,  1,  19, 9,  29, 0,  9,  0,  2,  14, // 8\r\n      5,  9,  1,  17, 17, 17, 17, 0,  0,  1,  1,  1,  1,  9,  14, 14, // 9\r\n      15, 15, 16, 16, 9,  9,  1,  13, 16, 5,  0,  31, 1,  1,  8,  8,  // A\r\n      8,  9,  9,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  16, 16, // B\r\n      1,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  16, 11, 17, 1,  0,  // C\r\n      0,  0,  0,  1,  0,  9,  9,  9,  9,  14, 0,  33, 34, 7,  3,  0,  // D\r\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  3,  3,  3,  3,  // E\r\n      4,  4,  4,  4,  0,  0,  0,  0,  32, 9,  0,  18, 0,  16, 9,  9   // F\r\n    ],\r\n    [\r\n   // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n      0,  8,  0,  0,  0,  0,  8,  0,  1,  1,  1,  1,  1,  0,  12, 0,  // 0\r\n      17, 17, 17, 17, 17, 17, 17, 17, 0,  1,  1,  0,  35, 35, 35, 35, // 1\r\n      2,  20, 20, 20, 20, 1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  3,  // 2\r\n      3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  // 3\r\n      5,  5,  5,  0,  0,  6,  6,  5,  5,  5,  5,  12, 0,  0,  19, 19, // 4\r\n\r\n      1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  // 5\r\n      1,  1,  30, 30, 30, 30, 9,  12, 1,  0,  0,  0,  1,  1,  0,  0,  // 6\r\n\r\n      0,  0,  12, 12, 12, 0,  0,  0,  0,  0,  9,  1,  0,  0,  12, 0,  // 7\r\n      12, 12, 0,  12, 12, 1,  1,  1,  19, 9,  29, 0,  9,  0,  2,  14, // 8\r\n      5,  9,  1,  17, 17, 17, 17, 0,  0,  1,  1,  1,  1,  9,  14, 14, // 9\r\n      15, 15, 16, 16, 9,  9,  1,  13, 16, 5,  0,  31, 1,  1,  8,  8,  // A\r\n      8,  9,  9,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  16, 16, // B\r\n      1,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  16, 11, 17, 1,  0,  // C\r\n      0,  0,  0,  1,  0,  9,  9,  9,  9,  14, 0,  33, 34, 7,  3,  0,  // D\r\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  3,  3,  3,  3,  // E\r\n      4,  4,  4,  4,  0,  0,  0,  0,  32, 9,  0,  18, 0,  16, 9,  9   // F\r\n    ],\r\n    [\r\n   // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n      0,  8,  0,  0,  0,  0,  8,  0,  1,  1,  1,  1,  1,  0,  12, 0,  // 0\r\n      17, 17, 17, 17, 17, 17, 17, 17, 0,  1,  1,  0,  8,  8,  8,  8,  // 1\r\n      2,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  3,  3,  3,  // 2\r\n      3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  // 3\r\n      5,  5,  5,  0,  0,  6,  6,  5,  5,  5,  5,  12, 0,  0,  7,  19, // 4\r\n\r\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  8,  0,  0,  0,  0,  8,  // 5\r\n      0,  0,  0,  0,  8,  0,  0,  12, 1,  0,  0,  0,  1,  1,  0,  0,  // 6\r\n\r\n      0,  0,  12, 12, 12, 0,  0,  0,  0,  0,  9,  3,  0,  0,  12, 0,  // 7\r\n      12, 12, 0,  12, 12, 1,  1,  1,  19, 9,  29, 0,  9,  0,  2,  14, // 8\r\n      5,  9,  1,  17, 17, 17, 17, 0,  0,  1,  1,  1,  1,  9,  14, 14, // 9\r\n      15, 15, 16, 16, 9,  9,  1,  13, 16, 5,  0,  1,  1,  1,  8,  8,  // A\r\n      8,  9,  9,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  16, 16, // B\r\n      1,  0,  0,  9,  9,  1,  1,  1,  1,  1,  1,  16, 11, 17, 1,  0,  // C\r\n      0,  0,  0,  1,  0,  9,  9,  9,  9,  14, 0,  33, 34, 7,  3,  0,  // D\r\n      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  3,  3,  3,  3,  // E\r\n      4,  4,  4,  4,  0,  0,  0,  0,  32, 9,  0,  18, 0,  16, 9,  9   // F\r\n    ]\r\n];\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                            DUNGEON NUMBER\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\n/* Dungeon Number */\r\nconst Z4_DUNGEON_None  = 0;\r\nconst Z4_DUNGEON_1     = 1;\r\nconst Z4_DUNGEON_2     = 2;\r\nconst Z4_DUNGEON_3     = 3;\r\nconst Z4_DUNGEON_4     = 4;\r\nconst Z4_DUNGEON_5     = 5;\r\nconst Z4_DUNGEON_6     = 6;\r\nconst Z4_DUNGEON_7     = 7;\r\nconst Z4_DUNGEON_8     = 8;\r\nconst Z4_DUNGEON_Egg   = 9;\r\nconst Z4_DUNGEON_Color = 10;\r\n   \r\nexport const Z4_DUNGEONNUMBER = [\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 0\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 1\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 2\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 3\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 4\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 5\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 6\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 8\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // A\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // B\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // C\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // D\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // E\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 0\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 4, 4, // 1\r\n        2, 2, 2, 2,   2, 2, 2, 2,   2, 2, 2, 2,   2, 2, 2, 2, // 2\r\n        2, 2, 2, 2,   2, 2, 2, 2,   2, 2, 2, 2,   2, 2, 2, 2, // 3\r\n        3, 3, 3, 3,   3, 3, 3, 3,   3, 3, 3, 3,   3, 3, 3, 3, // 4\r\n        3, 3, 3, 3,   3, 3, 3, 3,   3, 3, 3, 3,   3, 0, 4, 4, // 5\r\n        4, 4, 4, 4,   4, 4, 4, 4,   4, 4, 4, 4,   4, 4, 4, 4, // 6\r\n        4, 4, 4, 4,   4, 4, 4, 4,   4, 4, 4, 4,   4, 4, 0, 0, // 7\r\n        5, 5, 5, 5,   5, 5, 5, 5,   5, 5, 5, 5,   5, 5, 5, 5, // 8\r\n        5, 5, 5, 5,   5, 5, 5, 5,   5, 5, 5, 5,   5, 5, 5, 5, // 9\r\n        5, 5, 5, 5,   5, 5, 5, 5,   5, 5, 3, 3,   0, 0, 0, 0, // A\r\n        6, 6, 6, 6,   6, 6, 6, 6,   6, 6, 6, 6,   6, 6, 6, 6, // B\r\n        6, 6, 6, 6,   6, 6, 6, 6,   6, 6, 6, 6,   6, 6, 6, 6, // C\r\n        6, 6, 6, 6,   6, 6, 6, 6,   6, 6, 6, 6,   6, 6, 0, 0, // D\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 4, // E\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 4  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 7, 7, 7,   7, 7, 7, 7,   7, 7, 7, 7,   7, 7, 7, 7, // 0\r\n        7, 7, 7, 7,   7, 7, 7, 7,   7, 7, 7, 7,   7, 7, 7, 7, // 1\r\n        7, 7, 7, 7,   7, 7, 7, 7,   7, 7, 7, 7,   7, 7, 7, 0, // 2\r\n        8, 8, 8, 0,   8, 8, 0, 8,   8, 8, 8, 8,   8, 8, 8, 8, // 3\r\n        8, 8, 8, 8,   8, 8, 8, 8,   8, 8, 8, 8,   8, 8, 8, 8, // 4\r\n        8, 8, 8, 8,   8, 8, 8, 8,   8, 8, 8, 8,   8, 8, 8, 8, // 5\r\n        8, 8, 8, 8,   8, 8, 8, 8,   8, 8, 8, 8,   0, 0, 0, 0, // 6\r\n        9, 9, 9, 9,   9, 9, 9, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 8\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // A\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // B\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // C\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // D\r\n        0, 0, 0, 0,   0, 0, 0, 0,   7, 0, 0, 0,   0, 0, 0, 0, // E\r\n        0, 0, 0, 0,   0, 0, 0, 0,   7, 0, 0, 0,   0, 0, 0, 0  // F\r\n    ],\r\n    [\r\n    //  0,  1,  2,  3,    4,  5,  6,  7,    8,  9,  A,  B,    C,  D,  E,  F\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 0\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 1\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 2\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 3\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 4\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 5\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 6\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 7\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 8\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // 9\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // A\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // B\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // C\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // D\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10, // E\r\n        10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10,   10, 10, 10, 10  // F\r\n    ]\r\n];\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                             MAP CATEGORY\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\n/* Map Category */\r\nconst Z4_MAPCATEGORY_Overworld = 0;\r\nconst Z4_MAPCATEGORY_Cave      = 1;\r\nconst Z4_MAPCATEGORY_Side      = 2;\r\n    \r\nexport const Z4_MAPCATEGORY = [\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 0\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 1\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 2\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 3\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 4\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 5\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 6\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 8\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // A\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // B\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // C\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // D\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // E\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 0\r\n        1, 1, 1, 1,   1, 1, 1, 1,   2, 2, 2, 2,   1, 1, 2, 2, // 1\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 2\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 2, 2,   2, 2, 2, 2, // 3\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 4\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 2, 2, // 5\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 6\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   2, 2, 1, 1, // 7\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 8\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 9\r\n        1, 1, 2, 2,   2, 2, 2, 2,   2, 2, 2, 2,   1, 1, 1, 1, // A\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // B\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // C\r\n        1, 1, 1, 1,   1, 1, 1, 1,   2, 2, 2, 2,   2, 2, 1, 1, // D\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 2,   2, 1, 1, 2, // E\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 2  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 0\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 1\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 2\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 3\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 4\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 5\r\n        2, 2, 2, 2,   2, 2, 2, 2,   2, 2, 2, 2,   1, 1, 1, 1, // 6\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 7\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 8\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 9\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // A\r\n        1, 2, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // B\r\n        2, 2, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // C\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // D\r\n        1, 1, 1, 1,   1, 1, 1, 1,   2, 2, 1, 1,   1, 1, 1, 1, // E\r\n        1, 1, 1, 1,   1, 2, 1, 1,   2, 1, 1, 1,   1, 2, 1, 1  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 0\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 1\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 2\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 3\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 4\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 5\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 6\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 7\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 8\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 9\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // A\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // B\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // C\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // D\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // E\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1  // F\r\n    ]\r\n];\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                              ROOM TYPE\r\n//\r\n//----------------------------------------------------------------------------\r\n  \r\n/* Room Type */\r\nconst ROOMTYPE_BLANK   = 0;\r\nconst ROOMTYPE_DUNGEON = 1;\r\nconst ROOMTYPE_1WAY    = 2;\r\nconst ROOMTYPE_2WAYIN  = 3;\r\nconst ROOMTYPE_2WAYOUT = 4;\r\n    \r\nexport const Z4_ROOMTYPES = [\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        1, 0, 1, 4,   0, 0, 0, 0,   0, 0, 0, 0,   0, 4, 2, 4, // 0\r\n        0, 0, 0, 3,   0, 4, 0, 0,   4, 0, 0, 0,   0, 0, 0, 0, // 1\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 2,   0, 0, 0, 0, // 2\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 3\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 4\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 5\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   1, 0, 0, 0, // 6\r\n        0, 0, 0, 0,   0, 0, 0, 2,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   2, 0, 0, 0, // 8\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   4, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // A\r\n        0, 0, 0, 0,   0, 2, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // B\r\n        0, 0, 0, 0,   2, 0, 4, 0,   0, 0, 0, 0,   0, 0, 0, 0, // C\r\n        0, 0, 0, 2,   0, 0, 0, 0,   0, 2, 0, 0,   0, 0, 0, 0, // D\r\n        0, 0, 0, 0,   0, 0, 2, 4,   0, 0, 0, 0,   0, 0, 0, 0, // E\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 0\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 1\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 2\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 3\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 4\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 0, 1, 1, // 5\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 6\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 0, 0, // 7\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 8\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 9\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   2, 0, 0, 0, // A\r\n        4, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // B\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // C\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 0, 0, // D\r\n        2, 2, 2, 2,   2, 4, 3, 4,   2, 4, 3, 4,   3, 0, 4, 1, // E\r\n        4, 3, 2, 2,   2, 2, 3, 3,   2, 2, 2, 2,   2, 2, 3, 1  // F\r\n    ],\r\n    [\r\n       //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 0\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 1\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 0, // 2\r\n        1, 1, 1, 0,   1, 1, 0, 1,   1, 1, 4, 1,   1, 4, 1, 1, // 3\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 4\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 5\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   0, 0, 0, 2, // 6\r\n        1, 1, 1, 1,   1, 1, 1, 0,   0, 0, 2, 2,   2, 2, 2, 2, // 7\r\n        3, 3, 3, 3,   4, 3, 3, 4,   3, 3, 3, 4,   3, 3, 4, 2, // 8\r\n        3, 3, 3, 4,   3, 4, 3, 2,   2, 2, 3, 2,   2, 2, 0, 2, // 9\r\n        2, 2, 2, 2,   2, 3, 4, 2,   2, 2, 2, 4,   3, 2, 3, 4, // A\r\n        2, 2, 2, 2,   2, 2, 3, 3,   3, 3, 3, 4,   4, 3, 2, 2, // B\r\n        3, 4, 3, 3,   0, 3, 3, 3,   3, 4, 3, 2,   2, 2, 2, 2, // C\r\n        3, 4, 3, 3,   0, 4, 3, 2,   3, 2, 2, 2,   2, 2, 3, 4, // D\r\n        2, 2, 2, 2,   2, 2, 2, 2,   1, 2, 4, 3,   3, 3, 3, 3, // E\r\n        2, 3, 4, 3,   2, 2, 2, 2,   1, 3, 4, 2,   2, 2, 2, 0  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 0\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 1\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 2\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 3\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 4\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 5\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 6\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 7\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 8\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // 9\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // A\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // B\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // C\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // D\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1, // E\r\n        1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1,   1, 1, 1, 1  // F\r\n    ]\r\n];\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                            CONNECTOR TYPE\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\n/* Connectors */\r\nexport const Z4_ConnectorTYPES = [\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 0\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 1\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 2\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 3\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 4\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 5\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 6\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 8\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // A\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // B\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // C\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // D\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // E\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 0\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 1\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 2\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 3\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 4\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 5\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 6\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 8\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // A\r\n        20,0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // B\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // C\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // D\r\n        0, 0, 0, 0,   0, 1, 1, 2,   0, 3, 3, 4,   4, 0, 5, 0, // E\r\n        6, 0, 0, 0,   0, 0, 1, 2,   0, 0, 0, 0,   0, 0, 5, 0  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 0\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 1\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 2\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 21,0,   0, 22,0, 0, // 3\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 4\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 5\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 6\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        7, 7, 7, 8,   8, 8, 8, 8,   9, 9, 9, 9,   10,10,10,0, // 8\r\n        11,11,11,11,  11,11,11,0,   0, 0, 10,0,   0, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 12,  12,0, 0, 0, // A\r\n        0, 0, 0, 0,   0, 0, 13,13,  13,13,13,13,  13,12,0, 0, // B\r\n        0, 0, 14,14,  0, 15,0, 0,   16,16,16,0,   0, 0, 0, 0, // C\r\n        0, 0, 14,14,  0, 15,0, 0,   16,0, 0, 0,   0, 0, 17,17, // D\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 18,18,  18,18,18,18, // E\r\n        0, 19,19,19,  0, 0, 0, 0,   0, 19,19,0,   0, 0, 0, 0  // F\r\n    ],\r\n    [\r\n    //  0, 1, 2, 3,   4, 5, 6, 7,   8, 9, A, B,   C, D, E, F\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 0\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 1\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 2\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 3\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 4\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 5\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 6\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 7\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 8\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // 9\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // A\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // B\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // C\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // D\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0, // E\r\n        0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0,   0, 0, 0, 0  // F\r\n    ]\r\n];\r\n\r\nexport const LA_TILESET_PITTRANSITIONS = [\r\n    LA_TILE_PITTRANSITION1,\r\n    LA_TILE_PITTRANSITION2,\r\n    LA_TILE_PITTRANSITION3,\r\n    LA_TILE_PITTRANSITION4\r\n];","import { RoomExists } from \"../../utilities\";\r\nimport { CHECKSUM_10, CHECKSUM_12, UW_0, UW_1, UW_2, UW_3 } from \"../Constants/uConstants\";\r\nimport { ReadByteFromFile, WriteBytesToFile, GetChecksum } from \"./ReadRom\";\r\n    \r\n//===================================================================================================\r\n//\r\n//                                          Chests\r\n//\r\n//                                         Constants\r\n//\r\n//===================================================================================================\r\n\r\n// export const UseNewChestAddress        = false;\r\n// export const LA_ADDRESSES_CHESTS       = [0x50560, 0x50660, 0x50760, 0x50860];\r\n// export const UseNewChestAddress        = true;\r\nexport const LA_ADDRESSES_CHESTS       = [0xF8100, 0xF8200, 0xF8300, 0xF8400];\r\n// export const LA_ADDRESSES_CHESTS_RANGE = [0x50560, 0x5087F];\r\n\r\n// Chest items\r\nexport const LA_POWERBRACLET          = 0x00;\r\nexport const LA_MIRRORSHIELD          = 0x01;\r\nexport const LA_BOW                   = 0x02;\r\nexport const LA_HOOKSHOT              = 0x03;\r\nexport const LA_FIREROD               = 0x04;\r\nexport const LA_BOOTS                 = 0x05;\r\nexport const LA_OCARINA               = 0x06;\r\nexport const LA_FEATHER               = 0x07;\r\nexport const LA_SHOVEL                = 0x08;\r\nexport const LA_POWDER                = 0x09;\r\nexport const LA_BOMB                  = 0x0A;\r\nexport const LA_SWORDv0               = 0x0B;\r\nexport const LA_FLIPPERS              = 0x0C;\r\nexport const LA_TRADINGITEM           = 0x0D;\r\nexport const LA_FakeSword1            = 0x0E; // get yoshi doll?\r\nexport const LA_FakeSword2            = 0x0F; // get seashell?\r\nexport const LA_Mecidine              = 0x10;\r\nexport const LA_TailKey               = 0x11;\r\nexport const LA_AngularKey            = 0x12;\r\nexport const LA_FaceKey               = 0x13;\r\nexport const LA_BirdKey               = 0x14;\r\nexport const LA_GoldenLeaf            = 0x15;\r\nexport const LA_Map                   = 0x16;\r\nexport const LA_Compass               = 0x17;\r\nexport const LA_OwlBeak               = 0x18;\r\nexport const LA_NightmareKey          = 0x19;\r\nexport const LA_SmallKey              = 0x1A;\r\nexport const LA_50Rupees              = 0x1B;\r\nexport const LA_20Rupees              = 0x1C;\r\nexport const LA_100Rupees             = 0x1D;\r\nexport const LA_200Rupees             = 0x1E;\r\nexport const LA_500Rupees             = 0x1F;\r\nexport const LA_SeaShell              = 0x20;\r\nexport const LA_HookshotNote          = 0x21;\r\nexport const LA_Gel                   = 0x22;\r\n\r\nexport const LA_Tunic                 = 0x23;\r\nexport const LA_SONG3                 = 0x24;\r\nexport const LA_SONG2                 = 0x25;\r\nexport const LA_SONG1                 = 0x26;\r\nexport const LA_BOOMERANG             = 0x27;\r\nexport const LA_HeartPiece            = 0x28;\r\n\r\n// Equipment items only found once\r\nexport const LA_ITEMS_UNIQUE_SET  = [\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_FLIPPERS\r\n];\r\n\r\n// Items only available in dungeons\r\nexport const LA_ITEMS_DUNGEONONLY_SET = [\r\n    LA_Map,\r\n    LA_Compass,\r\n    LA_OwlBeak,\r\n    LA_NightmareKey,\r\n    LA_SmallKey,\r\n    LA_HookshotNote\r\n];\r\n\r\n// Keys on the overworld that unlock areas\r\nexport const LA_ITEMS_OVERWORLD_KEYS = [\r\n    LA_TailKey,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    LA_GoldenLeaf,\r\n];\r\n\r\n// Does not exist in the original game\r\nexport const LA_ITEM_NOTEXISTANT_SET = [\r\n    LA_POWDER,\r\n    LA_SWORDv0,\r\n    LA_TRADINGITEM,\r\n    LA_FakeSword1,\r\n    LA_FakeSword2,\r\n    LA_GoldenLeaf\r\n];\r\n\r\n// Rupees \r\nexport const LA_ITEM_RUPEE_SET = [\r\n    LA_50Rupees,\r\n    LA_20Rupees,\r\n    LA_100Rupees,\r\n    LA_200Rupees,\r\n    LA_500Rupees\r\n];\r\n\r\n// Other small items\r\nexport const LA_ITEM_OTHER_SET = [\r\n    LA_Mecidine,\r\n    LA_SeaShell,\r\n    LA_BOMB\r\n];\r\n\r\n// Overworld keys\r\nexport const LA_ITEM_OVERWORLDKEYS_SET = [\r\n    LA_TailKey,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    LA_GoldenLeaf\r\n];\r\n\r\n// Equipment items that originally were found only in dungeons\r\nexport const LA_ITEMS_DUNGEONUNIQUE_SET = [\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_FEATHER,\r\n    LA_FLIPPERS\r\n];\r\n\r\n// Items that are in dungeons\r\nexport const LA_ITEMS_DUNGEON_SET =\r\n    LA_ITEMS_DUNGEONUNIQUE_SET +\r\n    LA_ITEMS_DUNGEONONLY_SET;\r\n\r\n\r\n// 0  Does not exist\r\n// 1  Exists\r\n// 2  Heart piece\r\n// 3  Overworld key\r\n// 4  Trading\r\nexport const LA_CHESTS_VALID_SET = [\r\n    [\r\n     // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n        2,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 0\r\n        0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  // 1\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 2\r\n        0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 3\r\n        0,  1,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 4\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  // 5\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  // 6\r\n        0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 7\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 8\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 9\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // A\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // B\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // C\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // D\r\n        0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // E\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // F\r\n    ],\r\n    [\r\n     // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n        0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  1,  1,  1,  0,  // 0\r\n        0,  0,  0,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  // 1\r\n        1,  1,  1,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  1,  0,  // 2\r\n        0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  // 3\r\n        0,  0,  1,  0,  1,  0,  1,  1,  0,  0,  0,  0,  1,  0,  1,  1,  // 4\r\n        1,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 5\r\n        1,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  1,  1,  0,  // 6\r\n        0,  1,  0,  0,  0,  1,  1,  0,  1,  1,  0,  1,  0,  0,  0,  0,  // 7\r\n        0,  0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  1,  1,  // 8\r\n        0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  1,  0,  0,  1,  0,  // 9\r\n        1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // A\r\n        1,  1,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  0,  0,  1,  0,  // B\r\n        1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  1,  1,  // C\r\n        0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // D\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  // E\r\n        0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  // F\r\n    ],\r\n    [\r\n     // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n        0,  1,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  // 0\r\n        0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  // 1\r\n        1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 2\r\n        0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  1,  0,  0,  1,  0,  0,  // 3\r\n        1,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  1,  // 4\r\n        0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  1,  0,  0,  1,  // 5\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 6\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  3,  // 7\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  // 8\r\n        0,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  // 9\r\n        0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  2,  0,  0,  1,  1,  // A\r\n        0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  2,  1,  0,  1,  1,  1,  // B\r\n        0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  1,  0,  0,  // C\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  // D\r\n        0,  0,  0,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // E\r\n        0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  // F\r\n    ],\r\n    [\r\n     // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  A,  B,  C,  D,  E,  F}\r\n        0,  0,  1,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  // 0\r\n        0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 1\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 2\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 3\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 4\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 5\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 6\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 7\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 8\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // 9\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // A\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // B\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // C\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // D\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // E\r\n        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  // F\r\n    ]\r\n];\r\n\r\nexport const GetChestContentName = (chestID) => {\r\n    switch (chestID) {\r\n        case LA_POWERBRACLET : return 'Power Bracelet';\r\n        case LA_MIRRORSHIELD : return 'Mirror Shield';\r\n        case LA_BOW          : return 'Bow';\r\n        case LA_HOOKSHOT     : return 'Hookshot';\r\n        case LA_FIREROD      : return 'Fire Rod';\r\n        case LA_BOOTS        : return 'Pegasus Boots';\r\n        case LA_OCARINA      : return 'Ocarina';\r\n        case LA_FEATHER      : return 'Rocs Feather';\r\n        case LA_SHOVEL       : return 'Shovel';\r\n        case LA_POWDER       : return 'Magic Powder but looks like Mushroom';\r\n        case LA_BOMB         : return 'Bomb';\r\n        case LA_SWORDv0      : return 'Sword (Your sword) Lv. 0';\r\n        case LA_FLIPPERS     : return 'Flippers';\r\n        case LA_TRADINGITEM  : return 'Magnifying Lens (or next trading item?)';\r\n        case LA_FakeSword1   : return 'Sword (A new sword)';\r\n        case LA_FakeSword2   : return 'Sword (A new sword)';\r\n        case LA_Mecidine     : return 'Medicine';\r\n        case LA_TailKey      : return 'Tail Key';\r\n        case LA_AngularKey   : return 'Angular Key';\r\n        case LA_FaceKey      : return 'Face Key';\r\n        case LA_BirdKey      : return 'Bird Key';\r\n        case LA_GoldenLeaf   : return 'Leaf';\r\n        case LA_Map          : return 'Map';\r\n        case LA_Compass      : return 'Compass';\r\n        case LA_OwlBeak      : return 'Owl Beak';\r\n        case LA_NightmareKey : return 'Nightmare Key';\r\n        case LA_SmallKey     : return 'Small key';\r\n        case LA_50Rupees     : return '50 Rupees';\r\n        case LA_20Rupees     : return '20 Rupees';\r\n        case LA_100Rupees    : return '100 Rupees';\r\n        case LA_200Rupees    : return '200 Rupees';\r\n        case LA_500Rupees    : return '500 Rupees';\r\n        case LA_SeaShell     : return 'Seashell';\r\n        case LA_HookshotNote : return 'Hookshot note';\r\n        case LA_Gel          : return 'Gel';\r\n        default              : return ''; //'Dialouge Text Appears, Varies by value, changes music';\r\n    }\r\n}\r\n    \r\n//===================================================================================================\r\n//\r\n//                                            ROM\r\n//\r\n//===================================================================================================\r\n\r\nexport const GetChestAddress = (uwID, roomID) => {\r\n\r\n    let startAddr = 0;\r\n    let addr = 0;\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return addr;\r\n    }\r\n\r\n    switch (uwID) {\r\n        case UW_0 : startAddr = LA_ADDRESSES_CHESTS[0]; break;\r\n        case UW_1 : startAddr = LA_ADDRESSES_CHESTS[1]; break;\r\n        case UW_2 : startAddr = LA_ADDRESSES_CHESTS[2]; break;\r\n        case UW_3 : startAddr = LA_ADDRESSES_CHESTS[3]; break;\r\n        default   : console.error(\"[Error] Function GetChestAddress: Invalid uwID\");\r\n    }\r\n\r\n    addr = startAddr + roomID;\r\n    return addr;\r\n};\r\n\r\nexport const GetChestContent = (f, uwID, roomID) => {\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return -1;\r\n    }\r\n\r\n    let addr = GetChestAddress(uwID, roomID);\r\n    let b = ReadByteFromFile(f, addr);\r\n    return b;\r\n};\r\n\r\nexport const SetChestContent = (f, uwID, roomID, b) => {\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return;\r\n    }\r\n\r\n    let addr = GetChestAddress(uwID, roomID);\r\n    WriteBytesToFile(f, addr, [b]);\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                            Util\r\n//\r\n//===================================================================================================\r\n\r\nexport const GetChestInformation = (f, uwID, roomID) => {\r\n\r\n    let addr     = GetChestAddress(uwID, roomID);\r\n    let b        = GetChestContent(f, uwID, roomID);\r\n    let name     = GetChestContentName(b);\r\n    let valid    = ChestValid(f, uwID, roomID, b).valid;\r\n    let newChest = ChestValid(f, uwID, roomID, b).new\r\n\r\n    return {\r\n        addr : addr,\r\n        data : b,\r\n        name : name,\r\n        valid : valid,\r\n        newChest : newChest,\r\n        uwID : uwID,\r\n        roomID : roomID,\r\n    };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const ChestValid = (f, uwID, roomID) => {\r\n\r\n    let checksum = GetChecksum(f);\r\n\r\n    // Original ROM has multiple power bracelets, amoung other things like shovel and bow\r\n    if ((checksum === CHECKSUM_10) || (checksum === CHECKSUM_12)) {\r\n        return {\r\n            new : false,\r\n            valid : [1].indexOf(LA_CHESTS_VALID_SET[uwID][roomID]) > -1,\r\n            // isHeart : [2].indexOf(LA_CHESTS_VALID_SET[uwID][roomID]) > -1,\r\n            // isOverworldKey : [3].indexOf(LA_CHESTS_VALID_SET[uwID][roomID]) > -1,\r\n        };\r\n    }\r\n    else {\r\n        let b = GetChestContent(f, uwID, roomID);\r\n        return {\r\n            new : !([1].indexOf(LA_CHESTS_VALID_SET[uwID][roomID]) > -1),\r\n            valid : b !== LA_Gel,\r\n        };\r\n    }\r\n};\r\n\r\nexport const GetChestsInformation = (f, options = {}) => {\r\n\r\n    let b;\r\n    let roomID;\r\n    let arr = [];\r\n    let arr2 = [];\r\n    let valid;\r\n    let uwID;\r\n    let count = 0;\r\n    let newChest;\r\n\r\n    let o = {\r\n        uwID_start   : (typeof options.uwID !== 'undefined') ? options.uwID : 0, \r\n        uwID_end     : (typeof options.uwID !== 'undefined') ? options.uwID : 3, \r\n        roomID_start : (typeof options.roomID !== 'undefined') ? options.roomID : 0, \r\n        roomID_end   : (typeof options.roomID !== 'undefined') ? options.roomID : 0xFF, \r\n        id           : (typeof options.id !== 'undefined') ? options.id : -1, \r\n        ignoreID     : (typeof options.ignoreID !== 'undefined') ? options.ignoreID : -1, \r\n        allowInvalid : true, //(typeof options.allowInvalid !== 'undefined') ? options.allowInvalid : false\r\n    }\r\n\r\n    for (uwID = o.uwID_start; uwID <= o.uwID_end; uwID++) {\r\n        for (roomID = o.roomID_start; roomID <= o.roomID_end; roomID++) {\r\n\r\n            if (!RoomExists(uwID, roomID)) {\r\n                continue;\r\n            }\r\n\r\n            b = GetChestContent(f, uwID, roomID);\r\n            valid = ChestValid(f, uwID, roomID, b).valid;\r\n            newChest = ChestValid(f, uwID, roomID, b).new\r\n\r\n            if (b === -1) {\r\n                continue;\r\n            }\r\n\r\n            if ((!valid) && (!o.allowInvalid)) {\r\n                continue;\r\n            }   \r\n            \r\n            if (b === o.ignoreID) {\r\n                continue;\r\n            }\r\n            \r\n            if ((o.id !== -1) && (b !== o.id)) {\r\n                continue;\r\n            }\r\n\r\n            arr.push(b);\r\n            arr2.push({\r\n                uwID : uwID, \r\n                roomID : roomID, \r\n                value : b, \r\n                valid: valid,\r\n                new : newChest\r\n            });\r\n            count++;\r\n        }\r\n    }\r\n\r\n    return {\r\n        data : arr,\r\n        count : count,   \r\n        detailed : arr2,\r\n    };\r\n};\r\n\r\n","import { ADDR_ROM_VERSION, ADDR_ROM_CHECKSUM } from \"../Constants/uAddresses\";\r\nimport { BANK_LENGTH, ROM_LENGTH, CHECKSUM_10, CHECKSUM_12 } from \"../Constants/uConstants\";\r\nimport { IntToHex, HexToInt } from \"../../utilities\";\r\nimport { \r\n    LA_POWERBRACLET,\r\n    LA_SWORDv0,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_POWDER,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_BOOTS,\r\n} from \"./Chests\";\r\n\r\n//===================================================================================================\r\n//\r\n//                                           General\r\n//\r\n//===================================================================================================\r\n\r\nexport const ReadByteFromFile = (f, addr) => {\r\n    return f[addr];\r\n};\r\n\r\nexport const ReadBytesFromFile = (f, addr, amount) => {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < amount; i++) {\r\n        result.push(f[addr]);\r\n        addr++;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const WriteByteToFile = (f, addr, b) => {\r\n    f[addr] = b;\r\n};\r\n\r\nexport const WriteBytesToFile = (f, addr, arr) => {\r\n    if (arr.length === 0) {\r\n        console.error(\"WriteBytesToFile: arr length was 0.\")\r\n    }\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        f[addr] = arr[i];\r\n        addr++;\r\n    }\r\n};\r\n\r\nexport const WriteBytesToFileVersion = (f, addr0, addr2, arr) => {\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : if (!addr0) { console.error('WriteBytesToFileVersion: You cant write to 0!  Did you forget an address?'); return; } break;\r\n        case 2  : if (!addr2) { console.error('WriteBytesToFileVersion: You cant write to 0!  Did you forget an address?'); return; } break;\r\n        default : break;\r\n    }\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : WriteBytesToFile(f, addr0, arr); break;\r\n        case 2  : WriteBytesToFile(f, addr2, arr); break;\r\n        default : break;\r\n    }\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                           General\r\n//\r\n//===================================================================================================\r\n\r\nexport const GetBankStartAddress = (n) => {\r\n    return n * BANK_LENGTH;\r\n};\r\n\r\nexport const GetBankEndAddress = (n) => {\r\n    return (n+1) * BANK_LENGTH - 1;\r\n};\r\n\r\n// export const GetBankFromAddress = (addr) => {\r\n//     return Math.floor(addr / BANK_LENGTH);\r\n// };\r\n\r\nexport const GetROMVersion = (f) => {\r\n    let b = ReadByteFromFile(f, ADDR_ROM_VERSION);\r\n    return b;\r\n};\r\n\r\nexport const isOriginalROM = (f) => {\r\n    let originalROM = false;\r\n    let checksum = GetChecksum(f);\r\n    if ((checksum === CHECKSUM_10) || (checksum === CHECKSUM_12)) {\r\n        originalROM = true;\r\n    }\r\n    return originalROM;\r\n};\r\n\r\nexport const GetChecksum = (f) => {\r\n    let b1 = ReadByteFromFile(f, ADDR_ROM_CHECKSUM);\r\n    let b2 = ReadByteFromFile(f, ADDR_ROM_CHECKSUM + 1);\r\n    let checksum = IntToHex(b1, 2) + IntToHex(b2, 2);\r\n    return checksum;\r\n};\r\n\r\nexport const SetChecksum2 = (f) => {\r\n    /* Global checksum - Contains a 16 bit checksum (upper byte first) across the\r\n    whole cartridge ROM. Produced by adding all bytes of the cartridge (except\r\n    for the two checksum bytes). The Gameboy doesn't verify this checksum. */\r\n    let arr = ReadBytesFromFile(f, 0x00000, ROM_LENGTH+1);\r\n\r\n    let sum = 0;\r\n    for (let i = 0; i <= arr.length-1; i++) {\r\n        sum = sum + arr[i];\r\n    }\r\n    sum = sum - arr[ADDR_ROM_CHECKSUM];\r\n    sum = sum - arr[ADDR_ROM_CHECKSUM+1];\r\n\r\n    let sumText = IntToHex(sum);\r\n    let b2 = HexToInt(sumText.slice(-2));\r\n    let b1 = HexToInt(sumText.slice(-4, -2));\r\n    WriteBytesToFile(f, ADDR_ROM_CHECKSUM, [b1, b2]);\r\n};\r\n\r\nexport const GetImportantShopItems = (f) => {\r\n    let b1 = LA_SHOVEL;\r\n    let b2 = LA_BOW;\r\n\r\n    const EquipItemToChestItem = (value) => {\r\n\r\n        let result;\r\n\r\n        switch (value) {\r\n            case 0x03 : result = LA_POWERBRACLET; break;\r\n            case 0x01 : result = LA_SWORDv0; break;\r\n            case 0x04 : result = LA_MIRRORSHIELD; break;\r\n            case 0x05 : result = LA_BOW; break;\r\n            case 0x06 : result = LA_HOOKSHOT; break;\r\n            case 0x07 : result = LA_FIREROD; break;\r\n            case 0x0C : result = LA_POWDER; break;\r\n            case 0x09 : result = LA_OCARINA; break;\r\n            case 0x0A : result = LA_FEATHER; break;\r\n            case 0x0B : result = LA_SHOVEL; break;\r\n            case 0x08 : result = LA_BOOTS; break;\r\n            default : \r\n                result = 0;\r\n                console.error('[ERROR] EquipItemToChestItem given invalid byte!');\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : b1 = ReadByteFromFile(f, ((0x04-1) * 0x4000) + 0x7AAA); break;\r\n        case 2  : b1 = ReadByteFromFile(f, ((0x04-1) * 0x4000) + 0x7AB6); break;\r\n        default : break;\r\n    }\r\n    \r\n    switch (GetROMVersion(f)) {\r\n        case 0  : b2 = ReadByteFromFile(f, ((0x04-1) * 0x4000) + 0x7A74); break;\r\n        case 2  : b2 = ReadByteFromFile(f, ((0x04-1) * 0x4000) + 0x7A80); break;\r\n        default : break;\r\n    }\r\n\r\n    return {\r\n        shovelSlot : EquipItemToChestItem(b1),\r\n        bowSlot : EquipItemToChestItem(b2),\r\n    }\r\n};","import { WriteBytesToFileVersion } from \"../../../data/Read/ReadRom\";\r\nimport { ADDR_SPEEDUP_v10, ADDR_SPEEDUP_v12 } from  \"../../Constants/uAddresses\";\r\n\r\nconst CharacterSpeedUp = (f) => {\r\n    WriteBytesToFileVersion(f, ADDR_SPEEDUP_v10, ADDR_SPEEDUP_v12, [0x00]);\r\n};\r\n\r\nexport default CharacterSpeedUp;","import { ReadByteFromFile, WriteBytesToFile, GetBankStartAddress } from \"./ReadRom\";\r\nimport { IntToHex, HexToInt, LowNibble, HighNibble, RoomExists } from \"../../utilities\";\r\nimport { UW_0, UW_1, UW_2, UW_3, POINTER_OFFSET } from \"../Constants/uConstants\";\r\n\r\n//===================================================================================================\r\n//\r\n//         ######   #######  ##    ##  ######  ########    ###    ##    ## ########  ######  \r\n//        ##    ## ##     ## ###   ## ##    ##    ##      ## ##   ###   ##    ##    ##    ## \r\n//        ##       ##     ## ####  ## ##          ##     ##   ##  ####  ##    ##    ##       \r\n//        ##       ##     ## ## ## ##  ######     ##    ##     ## ## ## ##    ##     ######  \r\n//        ##       ##     ## ##  ####       ##    ##    ######### ##  ####    ##          ## \r\n//        ##    ## ##     ## ##   ### ##    ##    ##    ##     ## ##   ###    ##    ##    ## \r\n//         ######   #######  ##    ##  ######     ##    ##     ## ##    ##    ##     ###### \r\n//\r\n//===================================================================================================\r\n\r\nexport const LA_Sprite_Overworld          = [0x58000, 0x581FF];\r\nexport const LA_Sprite_Underworld1        = [0x58200, 0x583FF];\r\nexport const LA_Sprite_Underworld2        = [0x58400, 0x585FF];\r\nexport const LA_Sprite_ColorDungeon       = [0x58600, 0x5862B];\r\nexport const LA_Sprite_Leftover           = [0x5862C, 0x5863F];\r\n\r\nexport const LA_SPRITE_Octorock            = 0x09;\r\nexport const LA_SPRITE_Moblin              = 0x0B;\r\nexport const LA_SPRITE_Tektite             = 0x0D;\r\nexport const LA_SPRITE_Leever              = 0x0E;\r\nexport const LA_SPRITE_Armos               = 0x0F;\r\n\r\nexport const LA_SPRITE_GRAVEGHOST          = 0x10;\r\nexport const LA_SPRITE_GRAVEGHOSTBIG       = 0x11;\r\nexport const LA_SPRITE_GHOST               = 0x12;\r\nexport const LA_SPRITE_MOBLIN_SWORD        = 0x14;\r\nexport const LA_SPRITE_ANTIFAIRY           = 0x15;\r\nexport const LA_SPRITE_Spark1              = 0x16;\r\nexport const LA_SPRITE_Spark2              = 0x17;\r\nexport const LA_SPRITE_POLSVOICE           = 0x18;\r\nexport const LA_SPRITE_KEESE               = 0x19;\r\nexport const LA_SRRITE_STALFOS2            = 0x1A;\r\nexport const LA_SRRITE_REDGEL              = 0x1B;\r\nexport const LA_SPRITE_SMALL_REDGEL        = 0x1C;\r\nexport const LA_SPRITE_STALFOS_RUNAWAY     = 0x1E;\r\nexport const LA_SPRITE_GIBDO               = 0x1F;\r\n\r\nexport const LA_SPRITE_HARDHATBETTLE       = 0x20;\r\nexport const LA_SPRITE_WIZZROBE            = 0x21;\r\nexport const LA_SPRITE_LIKELIKE            = 0x23;\r\nexport const LA_SPRITE_STAFLOS_THROWER     = 0x24;\r\nexport const LA_SPRITE_TRAP                = 0x27;\r\nexport const LA_SPRITE_ARMMIMIC            = 0x28;\r\nexport const LA_SPRITE_MINIMOLDORM         = 0x29;\r\nexport const LA_SPRITE_BEAMOS              = 0x2A;\r\nexport const LA_SPRITE_SPIKEYBETTLE        = 0x2C;\r\nexport const LA_SPRITE_HEART_HIDDEN        = 0x2D;\r\nexport const LA_SPRITE_RUPEE_HIDDEN        = 0x2E;\r\nexport const LA_SPRITE_FAIRY_HIDDEN        = 0x2F;\r\n\r\nexport const LA_SPRITE_KEY                 = 0x30; // bird key, angular key, small key in minidungeon\r\nexport const LA_SPRITE_SPRITE_SWORD        = 0x31;\r\nexport const LA_SPRITE_HEART_PIECE         = 0x35;\r\nexport const LA_SPRITE_ARROW_HIDDEN        = 0x37;\r\nexport const LA_SPRITE_BOMB_HIDDEN         = 0x38;\r\nexport const LA_SPRITE_INSTRUMENT          = 0x39;\r\nexport const LA_SPRITE_MUSHROOM            = 0x3A;\r\nexport const LA_SPRITE_POWDER_HIDDEN       = 0x3B;\r\nexport const LA_SPRITE_SLIME_KEY_HIDDEN    = 0x3C;\r\nexport const LA_SPRITE_SEASHELL_HIDDEN     = 0x3D;\r\nexport const LA_SPRITE_MARIN               = 0x3E;\r\nexport const LA_SPRITE_TARIN               = 0x3F;\r\n\r\nexport const LA_SPRITE_WITCH               = 0x40;\r\nexport const LA_SPRITE_OWL                 = 0x41;\r\nexport const LA_SPRITE_DUNGEONOWLSTATUE    = 0x42;\r\nexport const LA_SPRITE_TREE_NPC            = 0x43;\r\nexport const LA_SPRITE_GHOST_NPC_GRAVE     = 0x44;\r\nexport const LA_SPRITE_BLOCK_VERTICAL1     = 0x46;\r\nexport const LA_SPRITE_BLOCK_VERTICAL2     = 0x47;\r\nexport const LA_SPRITE_BLOCK_HORIZONTAL1   = 0x48;\r\nexport const LA_SPRITE_BLOCK_HORIZONTAL2   = 0x49;\r\nexport const LA_SPRITE_SHOP_NPC            = 0x4D;\r\nexport const LA_SPRITE_TRENDY_NPC          = 0x4F;\r\n\r\nexport const LA_SPRITE_TRACKINGGHOST       = 0x50;\r\nexport const LA_SPRITE_BALLANDCHAINTROOPER = 0x51;\r\nexport const LA_SPRITE_VACUUM              = 0x52;\r\nexport const LA_SPRITE_ANTIVACUUM          = 0x53;\r\nexport const LA_SPRITE_NPC_FISHINGGAME     = 0x54;\r\nexport const LA_SPRITE_BOMB_ENEMY          = 0x55;\r\nexport const LA_SPRITE_BOMB_STALKER_ENEMY  = 0x56;\r\nexport const LA_SPRITE_PARIODD             = 0x57;\r\nexport const LA_SPRITE_D1_BOSS             = 0x59;\r\nexport const LA_SPRITE_D6_BOSS             = 0x5A;\r\nexport const LA_SPRITE_D3_BOSS             = 0x5B;\r\nexport const LA_SPRITE_D2_BOSS             = 0x5C;\r\nexport const LA_SPRITE_D5_BOSS             = 0x5D;\r\nexport const LA_SPRITE_D5_MINIBOSS         = 0x5E; // Gohma\r\nexport const LA_SPRITE_D5_MINIBOSS2        = 0x5F; // Master Stalfos\r\n\r\nexport const LA_SPRITE_D3_MINIBOSS         = 0x60; // Dodongo\r\nexport const LA_SPRITE_DUNGEONWARP         = 0x61;\r\nexport const LA_SPRITE_D8_BOSS             = 0x62;\r\nexport const LA_SPRITE_D7_BOSS             = 0x63;\r\nexport const LA_SPRITE_D4_BOSS             = 0x65;\r\nexport const LA_SPRITE_CRYSTAL_ORB         = 0x66;\r\nexport const LA_SPRITE_PULL_LEVER          = 0x69;\r\nexport const LA_SPRITE_RAFT                = 0x6A;\r\nexport const LA_SPRITE_CUCCO               = 0x6C;\r\nexport const LA_SPRITE_BOWWOW              = 0x6D;\r\nexport const LA_SPRITE_BUTTERFLY           = 0x6E;\r\nexport const LA_SPRITE_CAT                 = 0x6F;\r\n\r\nexport const LA_SPRITE_NPC_KID1            = 0x70;\r\nexport const LA_SPRITE_NPC_KID2            = 0x71;\r\nexport const LA_SPRITE_NPC_KID3            = 0x72;\r\nexport const LA_SPRITE_NPC_KID4            = 0x73;\r\nexport const LA_SPRITE_MOTHERWITHBABY      = 0x74;\r\nexport const LA_SPRITE_GRANDMA             = 0x75;\r\nexport const LA_SPRITE_CHRISTINEANDWRITE   = 0x76; // duplicate npcs\r\nexport const LA_SPRITE_GRANDPA             = 0x77;\r\nexport const LA_SPRITE_MINI_BOWWOW_NPC     = 0x78;\r\nexport const LA_SPRITE_MADAMMEOWMEOW       = 0x79;\r\nexport const LA_SPRITE_CROW                = 0x7A;\r\nexport const LA_SPRITE_CRAZYTRACY          = 0x7B;\r\nexport const LA_SPRITE_SWAMP_FLOWER_L      = 0x7C;\r\nexport const LA_SPRITE_SWAMP_FLOWER_S      = 0x7E;\r\nexport const LA_SPRITE_TURTLE_ROCK_SNAKE   = 0x7F;\r\n\r\nexport const LA_SPRITE_TELEPHONE           = 0x80;\r\nexport const LA_SPRITE_D1_MINIBOSS         = 0x81; // Rolling bones\r\nexport const LA_SPRITE_D1_MINIBOSS2        = 0x82; // Rolling bones Pillar\r\nexport const LA_SPRITE_DREAMBED            = 0x83;\r\nexport const LA_SPRITE_BIRD                = 0x85;\r\nexport const LA_SPRITE_POWDERONWINGS       = 0x86;\r\nexport const LA_SPRITE_LANMOLA             = 0x87;\r\nexport const LA_SPRITE_ARMOSMINIBOSS       = 0x88;\r\nexport const LA_SPRITE_D2_MINIBOSS         = 0x89; // Hinnox\r\nexport const LA_SPRITE_TOUCHTILES_EVENT1   = 0x8A;\r\nexport const LA_SPRITE_TOUCHTILES_EVENT2   = 0x8B;\r\nexport const LA_SPRITE_D4_MINIBOSS         = 0x8E; // Shellcrab\r\nexport const LA_SPRITE_NPC_MOBLIN          = 0x8F; // duplicate\r\nexport const LA_SPRITE_MASKMIMIC           = 0x8F; // duplicate\r\n\r\nexport const LA_SPRITE_DECKOFCARDS         = 0x90;\r\nexport const LA_SPRITE_ANTIKIRBY           = 0x91;\r\nexport const LA_SPRITE_D6_MINIBOSS         = 0x92; // Smasher\r\nexport const LA_SPRITE_MADBOMBER           = 0x93;\r\nexport const LA_SPRITE_SOLDIERINWALL       = 0x94;                                          // should handle in sprites\r\nexport const LA_SPRITE_RICHARD             = 0x95;\r\nexport const LA_SPRITE_RICHARDFROG         = 0x96;\r\nexport const LA_SPRITE_DIVEINWATER_EVENT   = 0x97;\r\nexport const LA_SPRITE_HORSEHEAD           = 0x98;\r\nexport const LA_SPRITE_WATER_TEKTITE       = 0x99;\r\nexport const LA_SPRITE_RAISINGTILES_EVENT  = 0x9A;\r\nexport const LA_SPRITE_GREENGEL_HIDDEN     = 0x9B;\r\nexport const LA_SPRITE_STAR_ENEMY          = 0x9C;\r\nexport const LA_SPRITE_ELEPHANTSTATUE      = 0x9D;\r\nexport const LA_SPRITE_GOOMBA              = 0x9F;\r\nexport const LA_SPRITE_TORCH_FIREBALLER    = 0x9E;\r\n\r\nexport const LA_SPRITE_PEAHAT              = 0xA0;\r\nexport const LA_SPRITE_ROPE                = 0xA1;\r\nexport const LA_SPRITE_MD_Plant            = 0xA2;\r\nexport const LA_SPRITE_MD_LR_PLATFORM      = 0xA3; // platforms that go left and right\r\nexport const LA_SPRITE_MD_UD_PLATFORM      = 0xA4; // platforms that go up and down\r\nexport const LA_SPRITE_MD_POT_PLATFORM     = 0xA5; // platforms that go down but need pot\r\nexport const LA_SPRITE_MD_WEIGHT           = 0xA6;\r\nexport const LA_SPRITE_D7PILLAR            = 0xA7;\r\nexport const LA_SPRITE_MD_JELLYFISH        = 0xA9;\r\nexport const LA_SPRITE_MD_FISH1            = 0xAA;\r\nexport const LA_SPRITE_MD_FISH2            = 0xAB;\r\nexport const LA_SPRITE_MD_FISH3            = 0xAC;\r\nexport const LA_SPRITE_KIKITHEMONKEY_NPC   = 0xAD;\r\nexport const LA_SPRITE_OCTOROKONWINGS      = 0xAE;\r\nexport const LA_SPRITE_MAGNIFYINGLENS      = 0xAF;\r\n\r\nexport const LA_SPRITE_PINCERFROMPIT       = 0xB0;\r\nexport const LA_SPRITE_EYE_BLOCK           = 0xB1; // D8 Block with an eye\r\nexport const LA_SPRITE_SPIDERSFROMPIT      = 0xB2;\r\nexport const LA_SPRITE_HONEYCOMB           = 0xB3;\r\nexport const LA_SPRITE_TARINWITHBESS       = 0xB4;\r\nexport const LA_SPRITE_BEARCHEF            = 0xB5;\r\nexport const LA_SPRITE_PAPAHL              = 0xB6;\r\nexport const LA_SPRITE_MERMAID             = 0xB7;\r\nexport const LA_SPRITE_FISHERMAN           = 0xB8;\r\nexport const LA_SPRITE_BUZZBLOB            = 0xB9;\r\nexport const LA_SPRITE_FLYINGBOMBDROPPER   = 0xBA;\r\nexport const LA_SPRITE_CRABINROCK          = 0xBB;\r\nexport const LA_SPRITE_D7_MINIBOSS         = 0xBC; // Skeleton guy with keese\r\nexport const LA_SPRITE_VIRE                = 0xBD;\r\nexport const LA_SPRITE_D8_MINIBOSS         = 0xBE; // Blaino\r\nexport const LA_SPRITE_SPAWNZOMBIEEVENT    = 0xBF;\r\n\r\nexport const LA_SPRITE_SIGNMAZEEVENT       = 0xC0;\r\nexport const LA_SPRITE_BEACHMARIN          = 0xC1;\r\nexport const LA_SPRITE_MARINTALTALHEIGHTS  = 0xC2;\r\nexport const LA_SPRITE_MAMU                = 0xC3; // Giant frog, also his little frogs\r\nexport const LA_SPRITE_WALRUS              = 0xC4;\r\nexport const LA_SPRITE_SEAORCHIN           = 0xC5;\r\nexport const LA_SPRITE_CRAB                = 0xC6;\r\nexport const LA_SPRITE_MAMBO               = 0xC7; // Giant fish\r\nexport const LA_SPRITE_MADBATTERWELL       = 0xCA;\r\nexport const LA_SPRITE_ZORA                = 0xCB;\r\nexport const LA_SPRITE_SHARK1              = 0xCC;\r\nexport const LA_SPRITE_MERMAIDSTATUE       = 0xCE;\r\nexport const LA_SPRITE_CROCODILE_NPC       = 0xCD;\r\n\r\nexport const LA_SPRITE_BUNNY_LISTENING_NPC = 0xD0;\r\nexport const LA_SPRITE_BEAR_LISTENING_NPC  = 0xD1;\r\nexport const LA_SPRITE_CROW_LISTENING_NPC  = 0xD2;\r\nexport const LA_SPRITE_BUNNY_NPC           = 0xD3;\r\nexport const LA_SPRITE_MD_POT              = 0xD6;\r\nexport const LA_SPRITE_MD_SmallTwomp       = 0xD7;\r\nexport const LA_SPRITE_MD_BIGFALLBLOCK     = 0xD8;\r\nexport const LA_SPRITE_MD_TWOMP            = 0xD9;\r\nexport const LA_SPRITE_MD_Fireball         = 0xDA;\r\nexport const LA_SPRITE_MD_GiantSpark       = 0xDB;\r\nexport const LA_SPRITE_ROOSTERSTATUE       = 0xDC; // duplicate\r\nexport const LA_SPRITE_ROOSTERSKELETON     = 0xDC; // duplicate\r\nexport const LA_SPRITE_LUIGI               = 0xDC; // duplicate\r\nexport const LA_SPRITE_BOOK                = 0xDD;\r\n\r\nexport const LA_SPRITE_RAT                 = 0xE1;\r\nexport const LA_SPRITE_FLAMETHROWER        = 0xE2;\r\nexport const LA_SPRITE_CACTUS_ENEMY        = 0xE3;\r\nexport const LA_SPRITE_KINGMOBLIN          = 0xE4;\r\nexport const LA_SPRITE_HEARTONWINGS        = 0xE5;\r\nexport const LA_SPRITE_D9_BOSS             = 0xE6;\r\nexport const LA_SPRITE_CASTLEGATE_EVENT    = 0xE7;\r\nexport const LA_SPRITE_COLOR_ORB_RED       = 0xE9;\r\nexport const LA_SPRITE_COLOR_ORB_GREEN     = 0xEA;\r\nexport const LA_SPRITE_COLOR_ORB_GOLD      = 0xEB;\r\nexport const LA_SPRITE_COLOR_SLIME1        = 0xEC;\r\nexport const LA_SPRITE_COLOR_SLIME2        = 0xED;\r\nexport const LA_SPRITE_COLOR_SLIME3        = 0xEE;\r\nexport const LA_SPRITE_COLOR_SPINNER_RED   = 0xEF;\r\n\r\nexport const LA_SPRITE_COLOR_SPINNER_GOLD  = 0xF0;\r\nexport const LA_SPRITE_COLOR_SPINNER_BLUE  = 0xF1;\r\nexport const LA_SPRITE_COLOR_FLYING_BOMBER = 0xF2;\r\nexport const LA_SPRITE_COLOR_HOPPER        = 0xF3;\r\nexport const LA_SPRITE_COLOR_GOLEM         = 0xF4;\r\nexport const LA_SPRITE_SKELETON_NPC_BLUE   = 0xF6;\r\nexport const LA_SPRITE_SKELETON_NPC_RED    = 0xF7;\r\nexport const LA_SPRITE_COLOR_BUZZBLOB_BOSS = 0xF8;\r\nexport const LA_SPRITE_COLOR_BOSS          = 0xF9;\r\nexport const LA_SPRITE_MOUSE               = 0xFA; // duplicate\r\nexport const LA_SPRITE_CAMERABOOK          = 0xFA; // duplicate\r\n\r\n// Bosses\r\nexport const LA_BOSS_SPRITES_SET = [\r\n    LA_SPRITE_D1_BOSS,\r\n    LA_SPRITE_D2_BOSS,\r\n    LA_SPRITE_D3_BOSS,\r\n    LA_SPRITE_D4_BOSS,\r\n    LA_SPRITE_D5_BOSS,\r\n    LA_SPRITE_D6_BOSS,\r\n    LA_SPRITE_D7_BOSS,\r\n    LA_SPRITE_D8_BOSS,\r\n    LA_SPRITE_D9_BOSS\r\n];\r\n\r\n// Minibosses\r\nexport const LA_MINIBOSS_SPRITES_SET = [\r\n    LA_SPRITE_D1_MINIBOSS,\r\n    LA_SPRITE_D2_MINIBOSS,\r\n    LA_SPRITE_D3_MINIBOSS,\r\n    LA_SPRITE_D4_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS2,\r\n    LA_SPRITE_D6_MINIBOSS,\r\n    LA_SPRITE_D7_MINIBOSS,\r\n    LA_SPRITE_D8_MINIBOSS\r\n];\r\n\r\n// Enemies that are killable under the 'Kill All' room event\r\nexport const LA_ENEMIES_KILLABLE_SET = [\r\n    LA_SPRITE_Octorock,\r\n    LA_SPRITE_Moblin,\r\n    LA_SPRITE_Tektite,\r\n    LA_SPRITE_Leever,\r\n    LA_SPRITE_Armos,\r\n\r\n    LA_SPRITE_MOBLIN_SWORD,\r\n    LA_SPRITE_POLSVOICE,\r\n    LA_SPRITE_KEESE,\r\n    LA_SRRITE_STALFOS2,\r\n    LA_SRRITE_REDGEL,\r\n    LA_SPRITE_SMALL_REDGEL,\r\n    LA_SPRITE_STALFOS_RUNAWAY,\r\n    LA_SPRITE_GIBDO,\r\n\r\n    LA_SPRITE_HARDHATBETTLE,\r\n    LA_SPRITE_WIZZROBE,\r\n    LA_SPRITE_LIKELIKE,\r\n    LA_SPRITE_STAFLOS_THROWER,\r\n    LA_SPRITE_ARMMIMIC,\r\n    LA_SPRITE_MINIMOLDORM,\r\n    LA_SPRITE_SPIKEYBETTLE,\r\n\r\n    LA_SPRITE_TRACKINGGHOST,\r\n    LA_SPRITE_BALLANDCHAINTROOPER,\r\n    //LA_SPRITE_VACUUM,\r\n    LA_SPRITE_ANTIVACUUM,\r\n    LA_SPRITE_BOMB_ENEMY,\r\n    LA_SPRITE_BOMB_STALKER_ENEMY,\r\n    LA_SPRITE_PARIODD,\r\n    LA_SPRITE_D1_BOSS,\r\n    LA_SPRITE_D6_BOSS,\r\n    LA_SPRITE_D3_BOSS,\r\n    LA_SPRITE_D2_BOSS,\r\n    LA_SPRITE_D5_BOSS,\r\n    LA_SPRITE_D5_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS2,\r\n\r\n    LA_SPRITE_D3_MINIBOSS,\r\n    LA_SPRITE_D8_BOSS,\r\n    LA_SPRITE_D7_BOSS,\r\n    LA_SPRITE_D4_BOSS,\r\n\r\n    LA_SPRITE_CROW,\r\n    LA_SPRITE_SWAMP_FLOWER_L,\r\n    LA_SPRITE_SWAMP_FLOWER_S,\r\n    LA_SPRITE_TURTLE_ROCK_SNAKE,\r\n\r\n    LA_SPRITE_D1_MINIBOSS,\r\n    LA_SPRITE_D1_MINIBOSS2,\r\n    LA_SPRITE_LANMOLA,\r\n    LA_SPRITE_ARMOSMINIBOSS,\r\n    LA_SPRITE_D2_MINIBOSS,\r\n    LA_SPRITE_D4_MINIBOSS,\r\n\r\n    LA_SPRITE_DECKOFCARDS,\r\n    LA_SPRITE_ANTIKIRBY,\r\n    LA_SPRITE_D6_MINIBOSS,\r\n    LA_SPRITE_MADBOMBER,\r\n    LA_SPRITE_SOLDIERINWALL,\r\n    LA_SPRITE_WATER_TEKTITE,\r\n    //LA_SPRITE_RAISINGTILES_EVENT,\r\n    LA_SPRITE_GREENGEL_HIDDEN,\r\n    LA_SPRITE_STAR_ENEMY,\r\n    LA_SPRITE_GOOMBA,\r\n\r\n    LA_SPRITE_PEAHAT,\r\n    LA_SPRITE_ROPE,\r\n    LA_SPRITE_MD_Plant,\r\n    LA_SPRITE_MD_LR_PLATFORM,\r\n    LA_SPRITE_MD_UD_PLATFORM,\r\n    LA_SPRITE_MD_POT_PLATFORM,\r\n    LA_SPRITE_MD_JELLYFISH,\r\n    LA_SPRITE_MD_FISH1,\r\n    LA_SPRITE_MD_FISH2,\r\n    LA_SPRITE_MD_FISH3,\r\n    LA_SPRITE_OCTOROKONWINGS,\r\n\r\n    LA_SPRITE_PINCERFROMPIT,\r\n    LA_SPRITE_BUZZBLOB,\r\n    LA_SPRITE_FLYINGBOMBDROPPER,\r\n    LA_SPRITE_CRABINROCK,\r\n    LA_SPRITE_D7_MINIBOSS,\r\n    LA_SPRITE_VIRE,\r\n    LA_SPRITE_D8_MINIBOSS,\r\n    LA_SPRITE_MASKMIMIC,\r\n\r\n    LA_SPRITE_SEAORCHIN,\r\n    LA_SPRITE_CRAB,\r\n    LA_SPRITE_ZORA,\r\n    LA_SPRITE_SHARK1,\r\n    LA_SPRITE_CACTUS_ENEMY,\r\n    LA_SPRITE_KINGMOBLIN,\r\n    LA_SPRITE_D9_BOSS,\r\n\r\n    LA_SPRITE_COLOR_ORB_RED,\r\n    LA_SPRITE_COLOR_ORB_GREEN,\r\n    LA_SPRITE_COLOR_ORB_GOLD,\r\n    LA_SPRITE_COLOR_SLIME1,\r\n    LA_SPRITE_COLOR_SLIME2,\r\n    LA_SPRITE_COLOR_SLIME3,\r\n    LA_SPRITE_COLOR_SPINNER_RED,\r\n\r\n    LA_SPRITE_COLOR_SPINNER_GOLD,\r\n    LA_SPRITE_COLOR_SPINNER_BLUE,\r\n    LA_SPRITE_COLOR_FLYING_BOMBER,\r\n    LA_SPRITE_COLOR_HOPPER,\r\n    LA_SPRITE_COLOR_GOLEM,\r\n    LA_SPRITE_COLOR_BUZZBLOB_BOSS,\r\n    LA_SPRITE_COLOR_BOSS\r\n];\r\n\r\nexport const LA_SPRITES_IMPASSABLE_SET = [\r\n    LA_SPRITE_BEAMOS,\r\n    LA_SPRITE_MARIN,\r\n    LA_SPRITE_TARIN,\r\n    LA_SPRITE_WITCH,\r\n    LA_SPRITE_DUNGEONOWLSTATUE,\r\n    LA_SPRITE_SHOP_NPC,\r\n    LA_SPRITE_TRENDY_NPC,\r\n    LA_SPRITE_NPC_FISHINGGAME,\r\n    LA_SPRITE_CRYSTAL_ORB,\r\n    LA_SPRITE_PULL_LEVER,\r\n    LA_SPRITE_RAFT,\r\n    LA_SPRITE_NPC_KID1,\r\n    LA_SPRITE_NPC_KID2,\r\n    LA_SPRITE_NPC_KID3,\r\n    LA_SPRITE_NPC_KID4,\r\n    LA_SPRITE_MOTHERWITHBABY,\r\n    LA_SPRITE_GRANDMA,\r\n    LA_SPRITE_CHRISTINEANDWRITE,\r\n    LA_SPRITE_GRANDPA,\r\n    LA_SPRITE_MADAMMEOWMEOW,\r\n    LA_SPRITE_CRAZYTRACY,\r\n    //LA_SPRITE_TELEPHONE,\r\n    LA_SPRITE_DREAMBED,\r\n    LA_SPRITE_FISHERMAN,\r\n    LA_SPRITE_BEARCHEF,\r\n    LA_SPRITE_MAMU,\r\n    LA_SPRITE_MADBATTERWELL,\r\n    LA_SPRITE_MAMBO,\r\n    LA_SPRITE_CROCODILE_NPC,\r\n    LA_SPRITE_COLOR_SPINNER_RED,\r\n    LA_SPRITE_COLOR_SPINNER_GOLD,\r\n    LA_SPRITE_COLOR_SPINNER_BLUE\r\n];\r\n\r\n//===================================================================================================\r\n//\r\n//                             ########  ########    ###    ########  \r\n//                             ##     ## ##         ## ##   ##     ## \r\n//                             ##     ## ##        ##   ##  ##     ## \r\n//                             ########  ######   ##     ## ##     ## \r\n//                             ##   ##   ##       ######### ##     ## \r\n//                             ##    ##  ##       ##     ## ##     ## \r\n//                             ##     ## ######## ##     ## ########  \r\n//\r\n//===================================================================================================\r\n\r\nexport const GetSpritePointer = (f, uwID, roomID) => {\r\n    let startAddr = 0;\r\n    let addr;\r\n    let b1, b2;\r\n    let s1, s2;\r\n    let result = 0;\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    switch (uwID) {\r\n        case UW_0 : startAddr = LA_Sprite_Overworld[0]; break;\r\n        case UW_1 : startAddr = LA_Sprite_Underworld1[0]; break;\r\n        case UW_2 : startAddr = LA_Sprite_Underworld2[0]; break;\r\n        case UW_3 : startAddr = LA_Sprite_ColorDungeon[0]; break;\r\n        default   : \r\n            console.error(\"[Error] function GetSpritePointer\");\r\n            return result;\r\n    }\r\n\r\n    /* Address */\r\n    addr = startAddr + (roomID * 2);\r\n\r\n    /* Data */\r\n    b1 = ReadByteFromFile(f, addr);\r\n    b2 = ReadByteFromFile(f, addr + 1);\r\n\r\n    /* Room data address */\r\n    s1 = IntToHex(b1, 2);\r\n    s2 = IntToHex(b2, 2);\r\n    result = HexToInt('0x' + s2[0] + s2[1] + s1[0] + s1[1]);\r\n\r\n    return result;\r\n};\r\n\r\nexport const GetSpriteStartAddress = (f, uwID, roomID) => {\r\n    let pAddr;\r\n    let result = 0;\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n    \r\n    pAddr = GetSpritePointer(f, uwID, roomID);\r\n    result = GetBankStartAddress(22) - POINTER_OFFSET + pAddr;\r\n    return result;\r\n};\r\n\r\nexport const GetSpriteEndAddress = (f, uwID, roomID) => {\r\n    let currAddr;\r\n    let b;\r\n    let result = 0;\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    currAddr = GetSpriteStartAddress(f, uwID, roomID);\r\n\r\n    if (currAddr === 0) {\r\n        return result;\r\n    }\r\n  \r\n    b = 0x00;\r\n    while (b !== 0xFF) {\r\n        b = ReadByteFromFile(f, currAddr);\r\n        currAddr++;\r\n    }\r\n  \r\n    return currAddr - 1;\r\n};\r\n\r\nexport const GetSpriteObjects = (f, uwID, roomID) => {\r\n    let b1, b2;\r\n    let addr;\r\n    let result = [];\r\n    let sprite;\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    addr = GetSpriteStartAddress(f, uwID, roomID);\r\n\r\n    do {\r\n        b1 = ReadByteFromFile(f, addr);\r\n        b2 = ReadByteFromFile(f, addr + 1);\r\n\r\n        /* End of objects */\r\n        if (b1 === 0xFF) {\r\n            break;\r\n        }\r\n\r\n        /* 2 byte objects */\r\n        sprite = {};\r\n\r\n        sprite.data    = [b1, b2];\r\n        sprite.y       = LowNibble(b1);\r\n        sprite.x       = HighNibble(b1);\r\n        sprite.yx      = parseInt(LowNibble(b1) + '' + HighNibble(b1), 16);\r\n        sprite.id      = b2;\r\n        sprite.address = addr;\r\n\r\n        result.push(sprite);\r\n        addr = addr + 2;\r\n    }\r\n    while (b1 !== 0xFF);\r\n\r\n    return result;\r\n};\r\n\r\nexport const HasSpriteID = (f, uwID, roomID, spriteID) => {\r\n    let o;\r\n    let arr = GetSpriteObjects(f, uwID, roomID);\r\n\r\n    for (let i = 0; i <= arr.length-1; i++) {\r\n        o = arr[i];\r\n        if (o.id === spriteID) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport const GetSpriteInformation = (f, uwID, roomID) => {\r\n    let pointer       = GetSpritePointer(f, uwID, roomID);\r\n    let startAddr     = GetSpriteStartAddress(f, uwID, roomID);\r\n    let endAddr       = GetSpriteEndAddress(f, uwID, roomID);\r\n    let length        = RoomExists(uwID, roomID) ? endAddr - startAddr + 1 : 0;\r\n    let data          = GetSpriteObjects(f, uwID, roomID);\r\n    let amount        = data.length;\r\n    let hasHeartPiece = HasSpriteID(f, uwID, roomID, LA_SPRITE_HEART_PIECE);\r\n\r\n    return {\r\n        pointer       : pointer,\r\n        startAddr     : startAddr,\r\n        endAddr       : endAddr,\r\n        length        : length,\r\n        data          : data,\r\n        amount        : amount,\r\n        hasHeartPiece : hasHeartPiece,\r\n        uwID          : uwID,\r\n        roomID        : roomID\r\n    };\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                             ########  ########    ###    ########  \r\n//                             ##     ## ##         ## ##   ##     ## \r\n//                             ##     ## ##        ##   ##  ##     ## \r\n//                             ########  ######   ##     ## ##     ## \r\n//                             ##   ##   ##       ######### ##     ## \r\n//                             ##    ##  ##       ##     ## ##     ## \r\n//                             ##     ## ######## ##     ## ########  \r\n//\r\n//===================================================================================================\r\n\r\nexport const SetSpritePointer = (f, uwID, roomID, yx, id) => {\r\n    let startAddr = 0;\r\n    let addr;\r\n    let result = false;\r\n    \r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    switch (uwID) {\r\n        case UW_0 : startAddr = LA_Sprite_Overworld[0]; break;\r\n        case UW_1 : startAddr = LA_Sprite_Underworld1[0]; break;\r\n        case UW_2 : startAddr = LA_Sprite_Underworld2[0]; break;\r\n        case UW_3 : startAddr = LA_Sprite_ColorDungeon[0]; break;\r\n        default   : \r\n            console.error(\"[Error] function GetSpritePointer\");\r\n            return false;\r\n    }\r\n\r\n    /* Address */\r\n    addr = startAddr + (roomID * 2);\r\n\r\n    /* Data */\r\n    WriteBytesToFile(f, addr, [yx, id]);\r\n\r\n    return true;\r\n};\r\n\r\nexport const ReadSprite = (f, uwID, roomID, spriteID, sprite) => {\r\n    let o;\r\n    let arr = GetSpriteObjects(f, uwID, roomID);\r\n\r\n    for (let i = 0; i <= arr.length-1; i++) {\r\n        o = arr[i];\r\n        if (o.id === spriteID) {\r\n            sprite.address = o.address;\r\n            sprite.yx = o.yx;\r\n            sprite.id = o.id; \r\n            sprite.y  = o.y;\r\n            sprite.x  = o.x;\r\n            sprite.id = o.id;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport const WriteSprite = (f, sprite) => {\r\n    let b1;\r\n    let b2;\r\n    let addr;\r\n\r\n    addr = sprite.address;\r\n    b1 = sprite.yx;\r\n    b2 = sprite.id;\r\n    WriteBytesToFile(f, addr, [b1, b2]);\r\n};\r\n\r\nexport const WriteSpriteID = (f, uwID, roomID, id, newID) => {\r\n    let result = false;\r\n    let sprite = {};\r\n\r\n    if (ReadSprite(f, uwID, roomID, id, sprite)) {\r\n        sprite.id = newID;\r\n        WriteSprite(f, sprite);\r\n        result = true;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const WriteSpriteXY = (f, uwID, roomID, id, newYX) => {\r\n    let result = false;\r\n    let sprite = {};\r\n\r\n    if (ReadSprite(f, uwID, roomID, id, sprite)) {\r\n        sprite.yx = newYX;\r\n        WriteSprite(f, sprite);\r\n        result = true;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const ReplaceSprite = (f, uwID, roomID, spriteID, newSpriteID) => {\r\n    let sprite = {};\r\n\r\n    /* Does sprite exist? */\r\n    if (!ReadSprite(f, uwID, roomID, spriteID, sprite)) {\r\n        console.error('ERROR: Could not find sprite!');\r\n        return;\r\n    }\r\n\r\n    /* Replace sprite with hidden sprite */\r\n    // sprite.yx = 0x00;\r\n    sprite.id = newSpriteID;\r\n    WriteSprite(f, sprite);\r\n};","import { WriteBytesToFileVersion, WriteBytesToFile, GetROMVersion } from '../../../data/Read/ReadRom';\r\nimport { StringOfBytesToByteArray } from '../../../utilities';\r\n\r\nconst NewChestCode = (f) => {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //===============================================================================================================================================================\r\n    const SETROOM10          = \"C3 22 50 \";    // jp   5022    ; Add equip and room event $10 set\r\n    const ADDEQUIP_SETROOM10 = \"C3 34 50 \";    // jp   5034    ; Add equip and room event $10 set\r\n\r\n    let chest00_POWERBRACELET = StringOfBytesToByteArray(\r\n        // If power bracelet level <> 02...\r\n        \"FA 43 DB \" +                    // ld   a,(DB43)\r\n        \"FE 02 \" +                       // cp   a,02\r\n        \"28 04 \" +                       // jr   z,510B      \r\n\r\n        // Increase powerBraceletLevel by 01 \r\n        \"21 43 DB \" +                    // ld   hl,DB43      \r\n        \"34 \" +                          // inc  (hl)     \r\n\r\n        \"16 03 \" +                       // ld   d,03\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n\r\n    let chest01_SHIELD = StringOfBytesToByteArray(\r\n        // If shield level <> 02...\r\n        \"FA 44 DB \" +                    // ld   a,(DB44)\r\n        \"FE 02 \" +                       // cp   a,02\r\n        \"28 04 \" +                       // jr   z,510B      \r\n\r\n        // Increase shieldLevel by 01 \r\n        \"21 44 DB \" +                    // ld   hl,DB44      \r\n        \"34 \" +                          // inc  (hl)     \r\n\r\n        \"16 04 \" +                       // ld   d,04\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n\r\n    let chest02_Bow = StringOfBytesToByteArray(\r\n        // Increase arrowAmount by 10 \r\n        \"21 45 DB \" +                    // ld   hl,(DB45)\r\n        \"7E \" +                          // ld   a,(hl)\r\n        \"C6 0A \" +                       // add  a,0A\r\n        \"27 \" +                          // daa  \r\n        \"30 02 \" +                       // jr   nc,7A94\r\n        \"3E 99 \" +                       // ld   a,99\r\n        \"EA 45 DB \" +                    // ld   (DB45),a\r\n\r\n        \"16 05 \" +                       // ld   d,05\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );    \r\n    \r\n    let chest03_Hookshot = StringOfBytesToByteArray(\r\n        \"16 06 \" +                       // ld   d,06\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n    \r\n    let chest04_Firerod = StringOfBytesToByteArray(\r\n        \"16 07 \" +                       // ld   d,07\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n    \r\n    let chest05_Boots = StringOfBytesToByteArray(\r\n        \"16 08 \" +                       // ld   d,08\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n    \r\n    let chest06_Ocarina = StringOfBytesToByteArray(\r\n        \"16 09 \" +                       // ld   d,05\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n    \r\n    let chest07_Feather = StringOfBytesToByteArray(\r\n        \"16 0A \" +                       // ld   d,0A\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n    \r\n    let chest08_Shovel = StringOfBytesToByteArray(\r\n        \"16 0B \" +                       // ld   d,0B\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n\r\n    let chest09_POWDER = StringOfBytesToByteArray(\r\n        // Increase powderAmount by 10 \r\n        \"21 4C DB \" +                    // ld   hl,(DB4C)\r\n        \"7E \" +                          // ld   a,(hl)\r\n        \"C6 0A \" +                       // add  a,0A\r\n        \"27 \" +                          // daa  \r\n        \"77 \" +                          // ld   (hl),a\r\n\r\n        \"16 0C \" +                       // ld   d,0C\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n\r\n    let chest0A_BOMB = StringOfBytesToByteArray(\r\n        // Increase bombAmount by 10 \r\n        \"21 4D DB \" +                    // ld   hl,(DB4D)\r\n        \"7E \" +                          // ld   a,(hl)\r\n        \"C6 0A \" +                       // add  a,0A      ; RANDO changed 01 to 0A\r\n        \"27 \" +                          // daa  \r\n        \"77 \" +                          // ld   (hl),a\r\n\r\n        \"16 02 \" +                       // ld   d,02\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n\r\n    let chest0B_SWORD = StringOfBytesToByteArray(\r\n        // If sword level <> 02...\r\n        \"FA 4E DB \" +                    // ld   a,(DB4E)\r\n        \"FE 02 \" +                       // cp   a,02\r\n        \"28 04 \" +                       // jr   z,510B      \r\n\r\n        // Increase swordLevel by 01 \r\n        \"21 4E DB \" +                    // ld   hl,DB4E      \r\n        \"34 \" +                          // inc  (hl)     \r\n\r\n        \"16 01 \" +                       // ld   d,01\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n\r\n    let chest0C_FLIPPERS = StringOfBytesToByteArray(\r\n        // Increase the item we found [right-side inventory item] \r\n        \"21 0C DB \" +                    // ld   hl,DB0C\r\n        \"34 \" +                          // inc  (hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest0D = StringOfBytesToByteArray(\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest0E = StringOfBytesToByteArray(\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest0F = StringOfBytesToByteArray(\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest10_Medicine = StringOfBytesToByteArray(\r\n        \"3E 01 \" +                       // ld   a,01\r\n        \"EA 0D DB \" +                    //ld   (DB0D),a\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest11_TAILKEY = StringOfBytesToByteArray(\r\n        \"21 11 DB \" +                    // ld   hl,DB11\r\n        \"34 \" +                          // inc  (hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest12_ANGLARKEY = StringOfBytesToByteArray(\r\n        \"21 12 DB \" +                    // ld   hl,DB12\r\n        \"34 \" +                          // inc  (hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest13_FACEKEY = StringOfBytesToByteArray(\r\n        \"21 13 DB \" +                    // ld   hl,DB13\r\n        \"34 \" +                          // inc  (hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest14_BIRDKEY = StringOfBytesToByteArray(\r\n        \"21 14 DB \" +                    // ld   hl,DB14\r\n        \"34 \" +                          // inc  (hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest15_GOLDENLEAF = StringOfBytesToByteArray(\r\n        \"21 15 DB \" +                    // ld   hl,DB15\r\n        \"34 \" +                          // inc  (hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest16_MAP = StringOfBytesToByteArray( \r\n        \"21 CC DB \" +                    // ld   hl,DBCC     \r\n        \"34 \" +                          // inc  (hl)   \r\n\r\n        // Set playerDungeonItems from currentDungeonItems \r\n        \"3E 3E \" +                       // ld   a,3E\r\n        \"EA AF DB \" +                    // ld   (DBAF),a\r\n        \"CD F9 27 \" +                    // call 27F9                                                   // v1.0 2802\r\n\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest17_COMPASS = StringOfBytesToByteArray(\r\n        \"21 CD DB \" +                    // ld   hl,DBCD     \r\n        \"34 \" +                          // inc  (hl)        \r\n        \r\n        // Set playerDungeonItems from currentDungeonItems \r\n        \"3E 3E \" +                       // ld   a,3E\r\n        \"EA AF DB \" +                    // ld   (DBAF),a\r\n        \"CD F9 27 \" +                    // call 27F9                                                   // v1.0 2802\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest18_BEAK = StringOfBytesToByteArray(  \r\n        \"21 CE DB \" +                    // ld   hl,DBCD     \r\n        \"34 \" +                          // inc  (hl)        \r\n        \r\n        // Set playerDungeonItems from currentDungeonItems \r\n        \"3E 3E \" +                       // ld   a,3E\r\n        \"EA AF DB \" +                    // ld   (DBAF),a\r\n        // \"D6 16 \" +                    // sub  a,16\r\n        \"CD F9 27 \" +                    // call 27F9                                                 // v1.0 2802\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest19_NIGHTMAREKEY = StringOfBytesToByteArray( \r\n        \"21 CF DB \" +                    // ld   hl,DBCF     \r\n        \"34 \" +                          // inc  (hl)        \r\n        \r\n        // Set playerDungeonItems from currentDungeonItems \r\n        \"3E 3E \" +                       // ld   a,3E\r\n        \"EA AF DB \" +                    // ld   (DBAF),a\r\n        // \"D6 16 \" +                    // sub  a,16\r\n        \"CD F9 27 \" +                    // call 27F9                                                   // v1.0 2802\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest1A_SMALLKEY = StringOfBytesToByteArray( \r\n        \"21 D0 DB \" +                    // ld   hl,DBD0     \r\n        \"34 \" +                          // inc  (hl)        \r\n        \r\n        // Set playerDungeonItems from currentDungeonItems \r\n        \"3E 3E \" +                       // ld   a,3E\r\n        \"EA AF DB \" +                    // ld   (DBAF),a\r\n        // \"D6 16 \" +                    // sub  a,16\r\n        \"CD F9 27 \" +                    // call 27F9                                                   // v1.0 2802\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest1B_20RUPEE = StringOfBytesToByteArray(\r\n        // Set playerRupeeIncreaseByte01 to data at [a] \r\n        \"3E 14 \" +                       // ld   a,14\r\n        \"EA 90 DB \" +                    // ld   (DB90),a     ; Set rupees [0 – 255] \r\n        \r\n        // Set playerRupeeIncreaseByte00 to data at [a] \r\n        \"3E 00 \" +                       // ld   a,00\r\n        \"EA 8F DB \" +                    // ld   (DB8F),a     ; Set rupees [if > 255]\r\n        \r\n        // Set countdown before executing an action \r\n        \"3E 18 \" +                       // ld   a,18\r\n        \"EA CE C3 \" +                    // ld   (C3CE),a\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest1C_50RUPEE = StringOfBytesToByteArray(\r\n        // Set playerRupeeIncreaseByte01 to data at [a] \r\n        \"3E 32 \" +                       // ld   a,32\r\n        \"EA 90 DB \" +                    // ld   (DB90),a     ; Set rupees [0 – 255] \r\n        \r\n        // Set playerRupeeIncreaseByte00 to data at [a] \r\n        \"3E 00 \" +                       // ld   a,00\r\n        \"EA 8F DB \" +                    // ld   (DB8F),a     ; Set rupees [if > 255]\r\n        \r\n        // Set countdown before executing an action \r\n        \"3E 18 \" +                       // ld   a,18\r\n        \"EA CE C3 \" +                    // ld   (C3CE),a\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest1D_100RUPEE = StringOfBytesToByteArray(\r\n        // Set playerRupeeIncreaseByte01 to data at [a] \r\n        \"3E 64 \" +                       // ld   a,64\r\n        \"EA 90 DB \" +                    // ld   (DB90),a     ; Set rupees [0 – 255] \r\n        \r\n        // Set playerRupeeIncreaseByte00 to data at [a] \r\n        \"3E 00 \" +                       // ld   a,00\r\n        \"EA 8F DB \" +                    // ld   (DB8F),a     ; Set rupees [if > 255]\r\n        \r\n        // Set countdown before executing an action \r\n        \"3E 18 \" +                       // ld   a,18\r\n        \"EA CE C3 \" +                    // ld   (C3CE),a\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest1E_200RUPEE = StringOfBytesToByteArray(\r\n        // Set playerRupeeIncreaseByte01 to data at [a] \r\n        \"3E C8 \" +                       // ld   a,C8\r\n        \"EA 90 DB \" +                    // ld   (DB90),a     ; Set rupees [0 – 255] \r\n        \r\n        // Set playerRupeeIncreaseByte00 to data at [a] \r\n        \"3E 00 \" +                       // ld   a,00\r\n        \"EA 8F DB \" +                    // ld   (DB8F),a     ; Set rupees [if > 255]\r\n        \r\n        // Set countdown before executing an action \r\n        \"3E 18 \" +                       // ld   a,18\r\n        \"EA CE C3 \" +                    // ld   (C3CE),a\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest1F_500RUPEE = StringOfBytesToByteArray(\r\n        // Set playerRupeeIncreaseByte01 to data at [a] \r\n        \"3E F4 \" +                       // ld   a,F4\r\n        \"EA 90 DB \" +                    // ld   (DB90),a     ; Set rupees [0 – 255] \r\n        \r\n        // Set playerRupeeIncreaseByte00 to data at [a] \r\n        \"3E 01 \" +                       // ld   a,01\r\n        \"EA 8F DB \" +                    // ld   (DB8F),a     ; Set rupees [if > 255]\r\n        \r\n        // Set countdown before executing an action \r\n        \"3E 18 \" +                       // ld   a,18\r\n        \"EA CE C3 \" +                    // ld   (C3CE),a\r\n        \r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest20_SEASHELL = StringOfBytesToByteArray(\r\n        // // Show dialog: EF [You found a secret seashell!] \r\n        // \"3E EF \" +                       // ld   a,EF\r\n        // \"CD 7C 23 \" +                    // call 237C\r\n\r\n        // If swordLevel >= 02, a = 1C [20 Rupees]\r\n        \"FA 4E DB \" +                    // ld   a,(DB4E) \r\n        \"FE 02 \" +                       // cp   a,02\r\n        \"20 05 \" +                       // jr   nz,XXXX\r\n        \"3E 1C \" +                       // ld   a,1C\r\n        \"C3 00 40 \" +                    // jp   4000\r\n    \r\n        \"21 0F DB \" +                    // ld   hl,DB0F\r\n        \"7E \" +                          // ld   a,(hl)\r\n        \"C6 01 \" +                       // add  a,01        \r\n        \"27 \" +                          // daa  \r\n        \"77 \" +                          // ld   (hl),a\r\n\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest21_HOOKSHOTNOTE = StringOfBytesToByteArray(\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    let chest22_GEL = StringOfBytesToByteArray(\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    // Tunic\r\n    let chest23_CUSTOM1 = StringOfBytesToByteArray(\r\n        \"21 0F DC \" +                    // ld   hl,DC0F\r\n        \"34 \" +                          // inc  (hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    // Mamu song\r\n    let chest24_CUSTOM1 = StringOfBytesToByteArray(\r\n        \"3E 02 \" +                       // ld   a,02\r\n        \"EA 4A DB \" +                    // ld   (DB4A),a  ; Set ocarinaSongListPointer = 00 [arrow on Mamu's song]\r\n\r\n        \"21 49 DB \" +                    // ld   hl,DB49\r\n        \"CB C6 \" +                       // set  0,(hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    // Manbo song\r\n    let chest25_CUSTOM1 = StringOfBytesToByteArray(\r\n        \"3E 01 \" +                       // ld   a,01\r\n        \"EA 4A DB \" +                    // ld   (DB4A),a  ; Set ocarinaSongListPointer = 01 [arrow on Manbo's song]\r\n\r\n        \"21 49 DB \" +                    // ld   hl,DB49\r\n        \"CB CE \" +                       // set  1,(hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    // Marin song\r\n    let chest26_CUSTOM1 = StringOfBytesToByteArray(\r\n        \"3E 00 \" +                       // ld   a,00\r\n        \"EA 4A DB \" +                    // ld   (DB4A),a  ; Set ocarinaSongListPointer = 02 [arrow on Marin's song]\r\n\r\n        \"21 49 DB \" +                    // ld   hl,DB49\r\n        \"CB D6 \" +                       // set  2,(hl)\r\n        SETROOM10                        // jp   z,5022    ; Room event $10 set\r\n    );\r\n\r\n    // Boomerang\r\n    let chest27_CUSTOM1 = StringOfBytesToByteArray(\r\n        \"16 0D \" +                       // ld   d,0D\r\n        ADDEQUIP_SETROOM10               // jp   z,502C    ; Add equip and room event $10 set\r\n    );\r\n\r\n    // Heart piece\r\n    let chest28 = StringOfBytesToByteArray(\r\n        \"3E 3E \" +    // Set a = bank\r\n        \"EA AF DB \" + // Set savedBank = a\r\n\r\n        \"3E 35 \" + // heart piece\r\n        \"CD 7D 3B \" + \r\n        \"38 1A \" + \r\n        \"F0 98 \" + \r\n        \"21 00 C2 \" + \r\n        \"19 \" + \r\n        \"77 \" + \r\n        \"F0 99 \" + \r\n        \"21 10 C2 \" + \r\n        \"19 \" + \r\n        \"77 \" + \r\n        \"21 10 C3 \" + \r\n        \"19 \" + \r\n        \"36 03 \" + \r\n        \"21 40 C3 \" + \r\n        \"19 \" + \r\n        \"CB A6 \" +    \r\n        \r\n        \"21 54 51 \" +                     // ld   hl,5154      ADDRESS\r\n        \"3E 03 \" +                        // ld   a,03\r\n        \"C3 D0 00 \"                       // jp   00D0\r\n    );\r\n\r\n    // Heart container\r\n    let chest29 = StringOfBytesToByteArray(\r\n        \"3E 3E \" +    // Set a = bank\r\n        \"EA AF DB \" + // Set savedBank = a\r\n\r\n        \"3E 36 \" + // heart container\r\n        \"CD 7D 3B \" + \r\n        \"38 1A \" + \r\n        \"F0 98 \" + \r\n        \"21 00 C2 \" + \r\n        \"19 \" + \r\n        \"77 \" + \r\n        \"F0 99 \" + \r\n        \"21 10 C2 \" + \r\n        \"19 \" + \r\n        \"77 \" + \r\n        \"21 10 C3 \" + \r\n        \"19 \" + \r\n        \"36 03 \" + \r\n        \"21 40 C3 \" + \r\n        \"19 \" + \r\n        \"CB A6 \" +    \r\n        \r\n        \"21 54 51 \" +                     // ld   hl,5154      ADDRESS\r\n        \"3E 03 \" +                        // ld   a,03\r\n        \"C3 D0 00 \"                       // jp   00D0\r\n    );\r\n\r\n    // Instrument\r\n    let chest2A = StringOfBytesToByteArray(\r\n        \"3E 3E \" +    // Set a = bank\r\n        \"EA AF DB \" + // Set savedBank = a\r\n\r\n        \"3E 39 \" + // instrument                                                    NEED A TRANSITION FOR THIS TO WORK\r\n        \"CD 7D 3B \" + \r\n        \"38 1A \" + \r\n        \"F0 98 \" + \r\n        \"21 00 C2 \" + \r\n        \"19 \" + \r\n        \"77 \" + \r\n        \"F0 99 \" + \r\n        \"21 10 C2 \" + \r\n        \"19 \" + \r\n        \"77 \" + \r\n        \"21 10 C3 \" + \r\n        \"19 \" + \r\n        \"36 03 \" + \r\n        \"21 40 C3 \" + \r\n        \"19 \" + \r\n        \"CB A6 \" +      \r\n        \r\n        \"21 54 51 \" +                     // ld   hl,5154      ADDRESS\r\n        \"3E 03 \" +                        // ld   a,03\r\n        \"C3 D0 00 \"                       // jp   00D0\r\n    );\r\n\r\n    //===============================================================================================================================================================\r\n\r\n    let chestArr;\r\n    let len = 0;\r\n    let addrStart = 0x4800;\r\n    let addr = ((0x3E-1) * 0x4000) + addrStart;\r\n\r\n    chestArr = chest00_POWERBRACELET; let chest00_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest01_SHIELD;        let chest01_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest02_Bow;           let chest02_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest03_Hookshot;      let chest03_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest04_Firerod;       let chest04_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest05_Boots;         let chest05_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest06_Ocarina;       let chest06_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest07_Feather;       let chest07_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest08_Shovel;        let chest08_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest09_POWDER;        let chest09_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest0A_BOMB;          let chest0A_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest0B_SWORD;         let chest0B_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest0C_FLIPPERS;      let chest0C_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest0D;               let chest0D_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest0E;               let chest0E_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest0F;               let chest0F_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest10_Medicine;      let chest10_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest11_TAILKEY;       let chest11_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest12_ANGLARKEY;     let chest12_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest13_FACEKEY;       let chest13_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest14_BIRDKEY;       let chest14_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest15_GOLDENLEAF;    let chest15_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest16_MAP;           let chest16_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest17_COMPASS;       let chest17_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest18_BEAK;          let chest18_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest19_NIGHTMAREKEY;  let chest19_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest1A_SMALLKEY;      let chest1A_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest1B_20RUPEE;       let chest1B_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest1C_50RUPEE;       let chest1C_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest1D_100RUPEE;      let chest1D_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest1E_200RUPEE;      let chest1E_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest1F_500RUPEE;      let chest1F_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest20_SEASHELL;      let chest20_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest21_HOOKSHOTNOTE;  let chest21_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest22_GEL;           let chest22_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest23_CUSTOM1;       let chest23_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest24_CUSTOM1;       let chest24_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest25_CUSTOM1;       let chest25_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest26_CUSTOM1;       let chest26_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest27_CUSTOM1;       let chest27_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest28;               let chest28_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest29;               let chest29_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n    chestArr = chest2A;               let chest2A_Address = addrStart + len; WriteBytesToFile(f, addr + len, chestArr); len += chestArr.length; \r\n\r\n    //===============================================================================================================================================================\r\n\r\n    const GetAddress = (addr) => {\r\n        let s = addr.toString(16);\r\n        return s[2] + s[3] + \" \" + s[0] + s[1] + \" \";\r\n    };\r\n\r\n    // Handle ChestID\r\n    let arr_HandleChestID = StringOfBytesToByteArray(\r\n        \"7B \" +                           // ld   a,e\r\n        \"FE 2B \" +                        // cp   a,2B \r\n        \"38 03 \" +                        // jr   c,4008  ; If a >= 31...\r\n        SETROOM10 +                       // jp   z,5000 \r\n        \"C7 \" +                           // rst  00\r\n        GetAddress(chest00_Address) +\r\n        GetAddress(chest01_Address) +\r\n        GetAddress(chest02_Address) +\r\n        GetAddress(chest03_Address) +\r\n        GetAddress(chest04_Address) +\r\n        GetAddress(chest05_Address) +\r\n        GetAddress(chest06_Address) +\r\n        GetAddress(chest07_Address) +\r\n        GetAddress(chest08_Address) +\r\n        GetAddress(chest09_Address) +\r\n        GetAddress(chest0A_Address) +\r\n        GetAddress(chest0B_Address) +\r\n        GetAddress(chest0C_Address) +\r\n        GetAddress(chest0D_Address) +\r\n        GetAddress(chest0E_Address) +\r\n        GetAddress(chest0F_Address) +\r\n        GetAddress(chest10_Address) +\r\n        GetAddress(chest11_Address) +\r\n        GetAddress(chest12_Address) +\r\n        GetAddress(chest13_Address) +\r\n        GetAddress(chest14_Address) +\r\n        GetAddress(chest15_Address) +\r\n        GetAddress(chest16_Address) +\r\n        GetAddress(chest17_Address) +\r\n        GetAddress(chest18_Address) +\r\n        GetAddress(chest19_Address) +\r\n        GetAddress(chest1A_Address) +\r\n        GetAddress(chest1B_Address) +\r\n        GetAddress(chest1C_Address) +\r\n        GetAddress(chest1D_Address) +\r\n        GetAddress(chest1E_Address) +\r\n        GetAddress(chest1F_Address) +\r\n        GetAddress(chest20_Address) +\r\n        GetAddress(chest21_Address) +\r\n        GetAddress(chest22_Address) +\r\n        GetAddress(chest23_Address) +\r\n        GetAddress(chest24_Address) +\r\n        GetAddress(chest25_Address) +\r\n        GetAddress(chest26_Address) +\r\n        GetAddress(chest27_Address) +\r\n        GetAddress(chest28_Address) +\r\n        GetAddress(chest29_Address) +\r\n        GetAddress(chest2A_Address)  \r\n    );\r\n\r\n    WriteBytesToFile(f, ((0x3E-1) * 0x4000) + 0x04000, arr_HandleChestID);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Get mapData address into [hl]\r\n    WriteBytesToFile(f, ((0x3E-1) * 0x4000) + 0x05000, StringOfBytesToByteArray(\r\n        // Get uwID and roomID in [de] \r\n        \"FA A5 DB \" +                     // ld   a,(DBA5)      \r\n        \"57 \" +                           // ld   d,a          \r\n        \"21 00 D8 \" +                     // ld   hl,D800       \r\n        \"F0 F6 \" +                        // ld   a,(ff00+F6)   \r\n        \"5F \" +                           // ld   e,a           \r\n\r\n        // If submapID is FF [color dungeon]...  \r\n        \"F0 F7 \" +                        // ld   a,(ff00+F7)   \r\n        \"FE FF \" +                        // cp   a,FF          \r\n        \"20 07 \" +                        // jr   nz,514A       \r\n\r\n        // Set color dungeon mapData start to [hl] \r\n        \"16 00 \" +                        // ld   d,00         \r\n        \"21 E0 DD \" +                     // ld   hl,DDE0       \r\n        \"18 09 \" +                        // jr   5153      \r\n\r\n        //---------------------------------------------------\r\n\r\n        // If submapID < 1A...   \r\n        \"FE 1A \" +                        // cp   a,1A\r\n        \"30 05 \" +                        // jr   nc,5153    \r\n\r\n        // If submapID >= 06....   \r\n        \"FE 06 \" +                        // cp   a,06\r\n        \"38 01 \" +                        // jr   c,5153    \r\n\r\n        // Increase uwID (if submap is between 07 and 1B) \r\n        \"14 \" +                           // inc  d\r\n\r\n        //---------------------------------------------------\r\n\r\n        // Add uwID + roomID to [hl] \r\n        \"19 \" +                           // add  hl,de\r\n        \"C9\"                              // ret  \r\n    ));\r\n\r\n    // Increase room event by $10 \r\n    WriteBytesToFile(f, ((0x3E-1) * 0x4000) + 0x05022, StringOfBytesToByteArray(\r\n        \"CD 00 50 \" +                     // call 5000              ; Get mapData address into [hl] \r\n        \"7E \" +                           // ld   a,(hl)  \r\n        \"F6 10 \" +                        // or   a,10  \r\n        \"77 \" +                           // ld   (hl),a\r\n        \"E0 F8 \" +                        // ld   (ff00+F8),a  \r\n        \r\n        \"21 54 51 \" +                     // ld   hl,5154      ADDRESS\r\n        \"3E 03 \" +                        // ld   a,03\r\n        \"C3 D0 00 \" +                     // jp   00D0\r\n\r\n        \"C9\"                              // ret\r\n    ));\r\n\r\n    // Add equip item to inventory  (New: give [d] as inventory item, not chest item)\r\n    WriteBytesToFile(f, ((0x3E-1) * 0x4000) + 0x05034, StringOfBytesToByteArray(\r\n        // \"50 \" +                           // ld   d,b\r\n        // \"21 58 50 \" +                     // ld   hl,5058\r\n        // \"19 \" +                           // add  hl,de\r\n        // \"56 \" +                           // ld   d,(hl)\r\n\r\n        \"3E 3E \" +                        // ld   a,3E\r\n        \"EA AF DB \" +                     // ld   (DBAF),a\r\n        // \"53 \" +                           // ld   d,e       ; Put itemID into [d] for the next call\r\n        \"CD 62 3E \" +                     // call 3E62\r\n        SETROOM10                         // jp   z,5022    ; Room event $10 set\r\n    ));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    //*******************************************************************************\r\n    //\r\n    //                                  Chest Content\r\n    //\r\n    //                               Original: Bank 0x14\r\n    //\r\n    //                                Code Insert: 4100\r\n    //\r\n    //                  :+++++++++++++++++++++++++++++++++++++++++++/   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                  sNNNNNh............sNNNNNh............sNNNNNd   \r\n    //                  sNNNNNy   ......`  oNNNNNh   ......`  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy   ------`  oNNNNNh   ------`  oNNNNNd   \r\n    //                  sNNNNNh````````````sNNNNNh````````````oNNNNNd   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                   ````````````````````````````````````````````   \r\n    //                  .------   ...   ---`     `---   ...`  .------   \r\n    //                  +yyyyyo  `+++   oyy:     .yyy   /++.  /yyyyys   \r\n    //                  +yyyyyo  `+++   ymm/     -mmm   /++.  /yyyyys   \r\n    //                  +yyyyyo  `+++   hNNo-----/NNm   /++.  /yyyyys   \r\n    //                  +yyyyyo  `+++   hNNNNNNNNNNNm   /++.  /yyyyys   \r\n    //                  +yyyyyo   ...   -::::::::::::   ...`  /yyyyys   \r\n    //                  +yyyyyo```````````````````````````````/yyyyys   \r\n    //                  +yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyys   \r\n    //                  .:::::::::::::::::::::::::::::::::::::::::::-   \r\n    //\r\n    //*******************************************************************************\r\n\r\n    // Data: Chest Content\r\n    WriteBytesToFile(f, ((0x3E-1) * 0x4000) + 0x04100, StringOfBytesToByteArray(\r\n        \"00 00 00 00 1B 00 00 1B 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 1B 1D 00 00 00 20 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 1B 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 11 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 1C 1C 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00 \" +\r\n        \"00 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 1B 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \r\n        \"00 00 00 00 00 00 00 00 19 00 18 00 20 1C 1A 00 \" +\r\n        \"00 00 00 1A 16 17 1A 00 00 00 00 00 00 07 00 00 \" +\r\n        \"00 1C 1A 00 00 00 16 19 00 00 00 00 00 00 18 00 \" +\r\n        \"00 00 00 00 00 00 1B 17 1A 1A 00 00 00 00 00 00 \" +\r\n        \"00 00 17 00 1B 00 05 19 00 00 00 00 18 00 1E 22 \" +\r\n        \"16 1A 00 1A 1A 1A 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"0C 00 00 00 00 1A 00 00 1A 1A 16 00 00 22 1B 00 \" +\r\n        \"00 1A 00 00 00 1B 19 00 17 18 00 1A 00 00 00 00 \" +\r\n        \"00 00 00 16 00 00 19 00 1B 00 00 00 00 00 1B 1A \" +\r\n        \"00 00 00 00 00 00 21 1A 00 00 00 18 00 00 17 00 \" +\r\n        \"1E 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"1D 1E 00 17 00 00 19 00 00 18 00 00 00 00 1A 00 \" +\r\n        \"16 00 00 00 00 00 00 00 00 1D 00 00 00 00 00 1B \" +\r\n        \"00 10 00 00 00 00 00 1B 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 1E 20 00 00 \" +\r\n        \r\n        \"00 20 00 00 1A 00 00 00 00 18 00 00 00 00 00 00 \" +\r\n        \"00 17 16 00 00 00 00 00 00 00 01 00 0A 00 00 00 \" +\r\n        \"10 00 00 00 19 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 19 00 00 10 00 04 00 00 1B 00 00 1A 00 00 \" +\r\n        \"1A 00 00 00 00 00 1A 00 00 00 00 00 00 1C 00 16 \" +\r\n        \"00 00 00 00 00 1B 00 00 00 22 00 00 17 00 00 18 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 22 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 02 00 00 00 00 00 00 1C 00 00 1C 1B \" +\r\n        \"00 00 00 1B 00 00 00 00 00 00 1B 1B 00 1B 06 1D \" +\r\n        \"00 00 00 00 00 00 00 00 20 00 00 00 00 1B 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n        \"00 00 00 00 00 00 00 00 00 1B 00 00 00 00 00 00 \" +\r\n        \"00 00 1C 00 1B 00 08 00 00 00 00 00 20 00 00 00 \" +\r\n        \r\n        \"00 00 19 00 00 00 16 00 00 00 00 00 00 00 00 17 \" +\r\n        \"00 18 00 00 1A 00 00 00 00 00 00 00 00 00 00 00 \"\r\n    ));\r\n\r\n    //*******************************************************************************\r\n    //\r\n    //                             Code: Get Chest Content\r\n    //\r\n    //                               Original: Bank 0x14\r\n    //\r\n    //                                Code Insert: 4420\r\n    //\r\n    //                  :+++++++++++++++++++++++++++++++++++++++++++/   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                  sNNNNNh............sNNNNNh............sNNNNNd   \r\n    //                  sNNNNNy   ......`  oNNNNNh   ......`  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy  `oooooo.  oNNNNNh   oooooo.  oNNNNNd   \r\n    //                  sNNNNNy   ------`  oNNNNNh   ------`  oNNNNNd   \r\n    //                  sNNNNNh````````````sNNNNNh````````````oNNNNNd   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                  sNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                   ````````````````````````````````````````````   \r\n    //                  .------   ...   ---`     `---   ...`  .------   \r\n    //                  +yyyyyo  `+++   oyy:     .yyy   /++.  /yyyyys   \r\n    //                  +yyyyyo  `+++   ymm/     -mmm   /++.  /yyyyys   \r\n    //                  +yyyyyo  `+++   hNNo-----/NNm   /++.  /yyyyys   \r\n    //                  +yyyyyo  `+++   hNNNNNNNNNNNm   /++.  /yyyyys   \r\n    //                  +yyyyyo   ...   -::::::::::::   ...`  /yyyyys   \r\n    //                  +yyyyyo```````````````````````````````/yyyyys   \r\n    //                  +yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyys   \r\n    //                  .:::::::::::::::::::::::::::::::::::::::::::-   \r\n    //\r\n    //*******************************************************************************\r\n\r\n    // Code RO3E:4420: Chest Content code\r\n    WriteBytesToFile(f, ((0x3E-1) * 0x4000) + 0x04420, StringOfBytesToByteArray(\r\n        \"F0 F6 5F FA A5 DB 57 F0 F7 FE FF 20 07 16 00 21 \" +\r\n        \"00 44 18 0C FE 1A 30 05 FE 06 38 01 14 21 00 41 \" +\r\n        \"19 7E E0 DF C9  \"\r\n    ));\r\n\r\n    //*******************************************************************************\r\n    //\r\n    //                          Sprite Logic 07: Chest opening\r\n    //\r\n    //                                Original: Bank 7\r\n    //\r\n    //                                Code Insert: 7000\r\n    //\r\n    //                 /++++++++++++++++++++++++++++++++++++++++++/   \r\n    //                 dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                 dNN:..:++++++++++++++++++++++++++++++:..:NNd   \r\n    //                 dNN-  -//////////////////////////////-  -NNd   \r\n    //                 dNN-  -//////////////////////////////-  -NNd   \r\n    //                 dNN-  -//////////////////////////////-  -NNd   \r\n    //                 dNN-  -:://////////////////////////::-  -NNd   \r\n    //                 dNN-     -////////////////////////.     -NNd   \r\n    //                 dNN-     `........................`     -NNd   \r\n    //                 dNN-                                    -NNd   \r\n    //                 dNN-                                    -NNd   \r\n    //                 dNNs++++++++++++++++++++++++++++++++++++sNNd   \r\n    //                 dNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNd   \r\n    //                 ````````````````````````````````````````````   \r\n    //                 .--://.  ````  `//:      ://`  ````  .//:--.   \r\n    //                 +oodNN/  .::.  -NNd      dNN-  .::.  /NNdoo+   \r\n    //                 +oodNN/  .::.  -NNd      dNN-  .::.  /NNdoo+   \r\n    //                 +oodNN/  .::.  -NNm------mNN-  .::.  /NNdoo+   \r\n    //                 +oodNN/  .::.  -NNNNNNNNNNNN-  .::.  /NNdoo+   \r\n    //                 +oodNN/  ````  `::::::::::::`  ````  /NNdoo+   \r\n    //                 +oodNN+..............................+NNdoo+   \r\n    //                 +oodNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNdoo+   \r\n    //                 ---/++++++++++++++++++++++++++++++++++++/--- \r\n    //\r\n    //*******************************************************************************\r\n\r\n    // Chest opening sprite logic (See notes)\r\n    WriteBytesToFile(f, ((0x3E-1) * 0x4000) + 0x07000, StringOfBytesToByteArray(\r\n        \"82 15 86 15 88 14 8A 14 8C 14 98 14 90 14 92 14 \" +\r\n        \"96 17 8E 14 80 15 84 17 94 15 9A 10 AE 10 9C 10 \" +\r\n        \"A0 14 C0 14 C2 14 C4 14 C6 14 CA 14 C0 14 C2 15 \" +\r\n        \"C4 14 C6 14 CA 17 A6 15 A6 15 A6 15 A6 15 A6 15 \" +\r\n        \"9E 14 16 14 16 14 A2 14 0E 16 0E 15 0E 14 A4 14 \" +\r\n        \"AD 18 AB 18 90 91 92 93 94 95 96 97 98 99 9A 9B \" +\r\n        \"9C 9D 9E 9F A0 A1 A2 A3 A4 A5 A6 A7 A8 A9 AA AC \" +\r\n        \"AB AD AE AE EF 06 10 10 10 10 10 10 10 10 10 01 \" +\r\n        \"01 10 10 10 10 10 01 10 10 10 10 10 01 01 01 01 \" +\r\n        \"01 01 01 01 01 01 01 01 01 10 10 10 10 10 00 00 \" +\r\n        \"00 00 3E 02 E0 A1 AF EA 37 C1 EA 6A C1 F0 F1 11 \" +\r\n        \"00 70 CD 6E 3C FA 9F C1 A7 C0 3E 07 CD D8 00 21 \" +\r\n        \"D0 C3 09 7E 3C 77 FE 10 20 06 21 50 C2 09 36 00 \" +\r\n        \"FE 08 20 1F F0 F1 5F 50 21 76 70 19 7E A7 28 13 \" +\r\n        \"FE 01 20 06 3E 01 E0 F2 18 09 FE 10 20 05 3E 10 \" +\r\n        \"EA 68 D3 21 D0 C3 09 7E FE 26 20 01 AF FE 28 C0 \" +\r\n        \"21 80 C2 09 70 C9  \"\r\n    ));\r\n\r\n\r\n    //*******************************************************************************\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // Assuming 3E was pasted in, make these addtional changes....\r\n\r\n    //===============================================================================================================================================================\r\n\r\n    /* Set bank and jump to [hl] */\r\n    let arrAA = StringOfBytesToByteArray(\r\n        \"EA 00 21 \" +                     // ld   (2100),a\r\n        \"E9\"                              // jp   hl\r\n    );\r\n    WriteBytesToFileVersion(f, 0x000D0, 0x000D0, arrAA);\r\n        \r\n    // /* Set bank and return */\r\n    // let arrBB = StringOfBytesToByteArray(\r\n    //     \"EA 00 21 \" +                     // ld   (2100),a\r\n    //     \"C9\"                              // ret\r\n    // );\r\n    // WriteBytesToFileVersion(f, 0x000D4, 0x000D4, arrBB);\r\n\r\n    //===============================================================================================================================================================\r\n\r\n    let bank0Addr = 0;\r\n    let bank3EAddr = (0x3E-1) * 0x4000;\r\n    let bank3Addr = (0x03-1) * 0x4000;\r\n    let bank20Addr = (0x20-1) * 0x4000;\r\n    let bank14Addr = (0x14-1) * 0x4000;\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0 :     \r\n            /* Set bank and return */\r\n            WriteBytesToFile(f, 0x000D8, StringOfBytesToByteArray(\r\n                \"EA 00 21 \" +                     // ld   (2100),a\r\n                \"CD 0A 7E \" +                     // call 7E0A\r\n                \"3E 3E \" +                        // ld   a,3E\r\n                \"C3 1D 08\"                        // jp   081D\r\n            ));\r\n\r\n            // Replace chestID checking\r\n            WriteBytesToFile(f, bank3Addr + 0x050AC, StringOfBytesToByteArray(\r\n                \"5F \" +                           // ld   e,a          Save current [a] (chestID) into [e]\r\n                \"3E 3E \" +                        // ld   a,3E         BANK\r\n                \"21 00 40 \" +                     // ld   hl,4000      ADRESS\r\n                \"CD D0 00 \" +                     // call 00D0\r\n                \"C9\"                              // ret\r\n            ));\r\n\r\n            // Bank 0: Move Get Chest Content code\r\n            WriteBytesToFile(f, bank0Addr + 0x020BF, StringOfBytesToByteArray(\r\n                \"3E 3E \" + \r\n                \"EA 00 21 \" + \r\n                \"CD 20 44 \"\r\n            ));\r\n        \r\n            // Bank 0: Move Get Chest Content code\r\n            WriteBytesToFile(f, bank0Addr + 0x029ED, StringOfBytesToByteArray(\r\n                \"3E 3E \" + \r\n                \"EA 00 21 \" + \r\n                \"CD 20 44 \"\r\n            ));\r\n        \r\n            // Bank 0x14: Delete Get Chest Content code\r\n            WriteBytesToFile(f, bank14Addr + 0x05884, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 \"\r\n            ));\r\n\r\n            // Bank 0x14: Delete Get Chest Content code with swordLevel seashell check\r\n            WriteBytesToFile(f, bank14Addr + 0x05900, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 00  \"\r\n            ));\r\n\r\n            // Change Sprite logic pointer - Chest opening\r\n            WriteBytesToFile(f, bank20Addr + 0x04015, StringOfBytesToByteArray(\r\n                \"A2 70 3E\"\r\n            ));\r\n\r\n            // Remove Seashell dialog\r\n            WriteBytesToFile(f, bank3Addr + 0x06368, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00\"\r\n            ));\r\n\r\n            // Remove Heart piece dialog\r\n            WriteBytesToFile(f, bank3Addr + 0x05A8A, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00\"\r\n            ));\r\n\r\n            // Set playerDungeonItems from currentDungeonItems, call\r\n            WriteBytesToFile(f, bank3EAddr + 0x48BF, [0xCD, 0x02, 0x28]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48CE, [0xCD, 0x02, 0x28]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48DD, [0xCD, 0x02, 0x28]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48EC, [0xCD, 0x02, 0x28]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48FB, [0xCD, 0x02, 0x28]);\r\n\r\n            // Part 1 of spawn sprite, call\r\n            WriteBytesToFile(f, bank3EAddr + 0x49B2, [0xCD, 0x86, 0x3B]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x49E0, [0xCD, 0x86, 0x3B]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x4A0E, [0xCD, 0x86, 0x3B]);\r\n\r\n            // Part 2 of spawn sprite, address\r\n            WriteBytesToFile(f, bank3EAddr + 0x49D1, [0x21, 0x55, 0x51]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x49FF, [0x21, 0x55, 0x51]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x4A2D, [0x21, 0x55, 0x51]);\r\n\r\n            // Increase room event, address\r\n            WriteBytesToFile(f, bank3EAddr + 0x502B, [0x21, 0x55, 0x51]);\r\n\r\n            // Add equip item to inventory, address\r\n            WriteBytesToFile(f, bank3EAddr + 0x5039, [0xCD, 0x6B, 0x3E]);\r\n\r\n            // Draw graphic with [de] call\r\n            WriteBytesToFile(f, bank3EAddr + 0x70B2, [0xCD, 0x77, 0x3C]);\r\n\r\n            break;\r\n\r\n        case 2 : \r\n            /* Set bank and return */\r\n            WriteBytesToFile(f, 0x000D8, StringOfBytesToByteArray(\r\n                \"EA 00 21 \" +                     // ld   (2100),a\r\n                \"CD 46 7E \" +                     // call 7E46\r\n                \"3E 3E \" +                        // ld   a,3E\r\n                \"C3 18 08\"                        // jp   0818\r\n            ));\r\n\r\n            // Replace chestID checking\r\n            WriteBytesToFile(f, bank3Addr + 0x050AD, StringOfBytesToByteArray(\r\n                \"5F \" +                           // ld   e,a          Save current [a] (chestID) into [e]\r\n                \"3E 3E \" +                        // ld   a,3E         BANK\r\n                \"21 00 40 \" +                     // ld   hl,4000      ADRESS\r\n                \"CD D0 00 \" +                     // call 00D0\r\n                \"C9\"                              // ret\r\n            ));\r\n\r\n            // Bank 0: Move Get Chest Content code\r\n            WriteBytesToFile(f, bank0Addr + 0x020BF, StringOfBytesToByteArray(\r\n                \"3E 3E \" + \r\n                \"EA 00 21 \" + \r\n                \"CD 20 44 \"\r\n            ));\r\n        \r\n            // Bank 0: Move Get Chest Content code\r\n            WriteBytesToFile(f, bank0Addr + 0x029E4, StringOfBytesToByteArray(\r\n                \"3E 3E \" + \r\n                \"EA 00 21 \" + \r\n                \"CD 20 44 \"\r\n            ));\r\n        \r\n            // Bank 0x14: Delete Get Chest Content code\r\n            WriteBytesToFile(f, bank14Addr + 0x05881, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 \"\r\n            ));\r\n\r\n            // Bank 0x14: Delete Get Chest Content code with swordLevel seashell check\r\n            WriteBytesToFile(f, bank14Addr + 0x058FD, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \" +\r\n                \"00 00 00 00  \"\r\n            ));\r\n\r\n            // Change Sprite logic pointer - Chest opening\r\n            WriteBytesToFile(f, bank20Addr + 0x04015, StringOfBytesToByteArray(\r\n                \"A2 70 3E\"\r\n            ));\r\n\r\n            // Remove Seashell dialog\r\n            WriteBytesToFile(f, bank3Addr + 0x06364, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00\"\r\n            ));\r\n\r\n            // Remove Heart piece dialog\r\n            WriteBytesToFile(f, bank3Addr + 0x05A80, StringOfBytesToByteArray(\r\n                \"00 00 00 00 00\"\r\n            ));\r\n\r\n            // Set playerDungeonItems from currentDungeonItems, call\r\n            WriteBytesToFile(f, bank3EAddr + 0x48BF, [0xCD, 0xF9, 0x27]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48CE, [0xCD, 0xF9, 0x27]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48DD, [0xCD, 0xF9, 0x27]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48EC, [0xCD, 0xF9, 0x27]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x48FB, [0xCD, 0xF9, 0x27]);\r\n\r\n            // Part 1 of spawn sprite, call\r\n            WriteBytesToFile(f, bank3EAddr + 0x49B2, [0xCD, 0x7D, 0x3B]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x49E0, [0xCD, 0x7D, 0x3B]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x4A0E, [0xCD, 0x7D, 0x3B]);\r\n\r\n            // Part 2 of spawn sprite, address\r\n            WriteBytesToFile(f, bank3EAddr + 0x49D1, [0x21, 0x54, 0x51]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x49FF, [0x21, 0x54, 0x51]);\r\n            WriteBytesToFile(f, bank3EAddr + 0x4A2D, [0x21, 0x54, 0x51]);\r\n\r\n            // Increase room event, address\r\n            WriteBytesToFile(f, bank3EAddr + 0x502B, [0x21, 0x54, 0x51]);\r\n\r\n            // Add equip item to inventory, address\r\n            WriteBytesToFile(f, bank3EAddr + 0x5039, [0xCD, 0x62, 0x3E]);\r\n\r\n            // Draw graphic with [de] call\r\n            WriteBytesToFile(f, bank3EAddr + 0x70B2, [0xCD, 0x6E, 0x3C]);\r\n\r\n            break;\r\n            \r\n        default : break;\r\n    }\r\n};\r\n\r\nexport default NewChestCode;","import { WriteBytesToFile, GetROMVersion } from \"../../../data/Read/ReadRom\";\r\n\r\n/* On the overworld select map menu, press Start+B to teleport back to the starting house */\r\nconst MapWarpToStart = (f) => {\r\n    switch (GetROMVersion(f)) {\r\n\r\n        case 0  : \r\n            /* Change the debug map screen transition to always point to the start house */\r\n            WriteBytesToFile(f, 0x57B7, [\r\n                0x00, 0xFA, 0x03, 0x00, 0xA7, 0xF0, 0xCB, 0xFE, 0xA0, 0x20, 0x38,\r\n        \r\n                0x3E, 0x0B,       // normal code\r\n                0xEA, 0x95, 0xDB,\r\n                0xCD, 0x7D, 0x0C,\r\n        \r\n                0x3E, 0x01,       // ViewID - House/Caves\r\n                0xEA, 0x01, 0xD4,\r\n        \r\n                0x3E, 0x10,       // Submap - House\r\n                0xEA, 0x02, 0xD4,\r\n        \r\n                0x3E, 0xA3,       // RoomID - Start House\r\n                0xEA, 0x03, 0xD4,\r\n        \r\n                0x3E, 0x50,       // X\r\n                0xEA, 0x04, 0xD4,\r\n        \r\n                0x3E, 0x78,       // Y\r\n                0xEA, 0x05, 0xD4\r\n            ]);\r\n  \r\n            //------------------------------------------------------------------------\r\n            //\r\n            //                         SAVE & QUIT MENU\r\n            //\r\n            //------------------------------------------------------------------------\r\n  \r\n            /* Add 3rd option */\r\n            WriteBytesToFile(f, 0x4137, [\r\n                0xC3, 0x3F, 0x43\r\n            ]);\r\n    \r\n            /* SSBA on an option selection, jump to new code */\r\n            WriteBytesToFile(f, 0x40BA, [\r\n                0xC3, 0xEC, 0x7F, 0xC9\r\n            ]);\r\n    \r\n            /* Change the debug map screen transition to always point to the start house */\r\n            WriteBytesToFile(f, 0x7FEC, [\r\n                0xFE, 0x00,          // If option 0\r\n                0xCA, 0xBE, 0x40,    // Jump to option 0's code\r\n                0xFE, 0x01,          // If option 1\r\n                0xCA, 0xF9, 0x40,    // Jump to option 1's code\r\n                0xC3, 0xC2, 0x57     // Else jump to custom code to go to start\r\n            ]);\r\n   \r\n            break; \r\n            \r\n        case 2  : \r\n            /* Change the debug map screen transition to always point to the start house */\r\n            WriteBytesToFile(f, 0x57DE, [\r\n                0x00, 0xFA, 0x03, 0x00, 0xA7, 0xF0, 0xCB, 0xFE, 0xA0, 0x20, 0x38,\r\n        \r\n                0x3E, 0x0B,       // normal code\r\n                0xEA, 0x95, 0xDB,\r\n                0xCD, 0x7D, 0x0C,\r\n        \r\n                0x3E, 0x01,       // ViewID - House/Caves\r\n                0xEA, 0x01, 0xD4,\r\n        \r\n                0x3E, 0x10,       // Submap - House\r\n                0xEA, 0x02, 0xD4,\r\n        \r\n                0x3E, 0xA3,       // RoomID - Start House\r\n                0xEA, 0x03, 0xD4,\r\n        \r\n                0x3E, 0x50,       // X\r\n                0xEA, 0x04, 0xD4,\r\n        \r\n                0x3E, 0x78,       // Y\r\n                0xEA, 0x05, 0xD4\r\n            ]);\r\n\r\n            //      (* SSBA on an option selection, jump to new code *)\r\n            //      WriteBytesToFile(f, 0x40BA, [\r\n            //        0xC3, 0xEC, 0x7F, 0xC9\r\n            //      ]);\r\n            //\r\n            //      (* Change the debug map screen transition to always point to the start house *)\r\n            //      WriteBytesToFile(f, 0x7FEC, [\r\n            //        0xFE, 0x00,          // If option 0\r\n            //        0xCA, 0xBE, 0x40,    // Jump to option 0's code\r\n            //        0xFE, 0x01,          // If option 1\r\n            //        0xCA, 0xF9, 0x40,    // Jump to option 1's code\r\n            //        0xC3, 0xC2, 0x57     // Else jump to custom code to go to start\r\n            //      ]);\r\n\r\n            break;\r\n\r\n        default : console.error(\"[Error] function WarpToStart - invalid ROM version\");\r\n    }\r\n};\r\n\r\nexport default MapWarpToStart;","import { WriteSpriteID, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN } from \"../../../data/Read/Sprites\";\r\n\r\nconst RemoveOwls = (f) => {\r\n    /* Replace owls with rupee under condition */\r\n    WriteSpriteID(f, 0, 0xF2, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // Beach\r\n    WriteSpriteID(f, 0, 0x80, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // Woods\r\n    WriteSpriteID(f, 0, 0x41, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // TailKey\r\n    WriteSpriteID(f, 0, 0xD2, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // D1Exit\r\n    WriteSpriteID(f, 0, 0xB6, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // D3Exit\r\n    WriteSpriteID(f, 0, 0xEE, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // Desert\r\n    WriteSpriteID(f, 0, 0x64, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // Grave\r\n    WriteSpriteID(f, 0, 0x9D, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // ToD6\r\n    WriteSpriteID(f, 0, 0x9C, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // D6Exit\r\n    WriteSpriteID(f, 0, 0x17, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // ToD7\r\n    WriteSpriteID(f, 0, 0x08, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // ToD8SaveMarin\r\n    //WriteSpriteID(f, 0, 0x16, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // ToEgg\r\n    WriteSpriteID(f, 0, 0x06, LA_SPRITE_OWL, LA_SPRITE_RUPEE_HIDDEN); // AtEgg\r\n};\r\n\r\nexport default RemoveOwls;","import { ReadByteFromFile, WriteBytesToFile, WriteBytesToFileVersion, GetROMVersion, /* GetBankAddress */ } from \"../../../data/Read/ReadRom\";\r\nimport { HexToInt, IntToHex, HighNibble, GetBankAddress, StringOfBytesToByteArray, RoomExists } from \"../../../utilities\";\r\nimport { LA_BOMB, LA_Gel, LA_POWERBRACLET, GetChestContent, SetChestContent, LA_HOOKSHOT } from \"../../Read/Chests\";\r\nimport { LA_SPRITE_RUPEE_HIDDEN, LA_SPRITE_MARINTALTALHEIGHTS, ReplaceSprite } from \"../../../data/Read/Sprites\";\r\nimport NewChestCode from './NewChestCode';\r\nimport MapWarpToStart from \"./MapWarpToStart\";\r\nimport RemoveOwls from \"./RemoveOwls\";\r\n\r\nconst CoreChanges = (f) => {\r\n\r\n    let b;\r\n    let arr;\r\n    let i;\r\n    let addr;\r\n\r\n    MapWarpToStart(f);\r\n    RemoveOwls(f);\r\n    NewChestCode(f);\r\n    \r\n    // //DEBUG TEST\r\n    // for (let i = 0; i < 0x40; i++) {\r\n    //     let roomID = 0xA0 + i;\r\n    //     let chestContent = 0x00 + i;\r\n    //     SetChestContent(f, 0, roomID, chestContent);\r\n    // }\r\n\r\n    //============================================================================\r\n    //\r\n    //                     Make Non-existent rooms blank\r\n    //\r\n    //  Out of bounds rooms are normally either an empty room with walls or a\r\n    //  copy of D7's topleft room.  Make them all blank. This allows for a\r\n    //  cleaner look for the visualizer, and prevents getting free items\r\n    //  when going out of bounds.\r\n    //\r\n    //============================================================================\r\n\r\n    /* Underworld 1, roomID 0x00 is unused and empty, remove the walls */\r\n    b = ReadByteFromFile(f, 0x28200 + 1);\r\n    b = HexToInt('9' + IntToHex(HighNibble(b), 1));\r\n    WriteBytesToFile(f, 0x28200 + 1, [b]);\r\n\r\n    /* Underworld 2, roomID 0x2F is unused and empty, remove the walls */\r\n    b = ReadByteFromFile(f, 0x2CBFB + 1);\r\n    b = HexToInt('9' + IntToHex(HighNibble(b), 1));\r\n    WriteBytesToFile(f, 0x2CBFB + 1, [b]);\r\n\r\n    /* RoomID 0x00 in Underworld 2 should be an empty room. */\r\n    WriteBytesToFile(f, 0x2C000, [0xFB, 0x4B]);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Color dungeon - RoomData add */\r\n    WriteBytesToFile(f, 0x2BF43, [0x00, 0x9D, 0xFE]);\r\n\r\n    /* Color dungeon - pointer add */\r\n    WriteBytesToFile(f, 0x2BBA3, [0x43, 0x7F]);\r\n\r\n    /* Color dungeon - Replace all nonused rooms with the new blank room */\r\n    for (let addr = 0x504E0; addr <= 0x5051F; addr++) {\r\n        b = ReadByteFromFile(f, addr);\r\n        if ((addr !== 0x504F9) && (b === 0x00)) {\r\n            WriteBytesToFile(f, addr, [0x16]);\r\n        }\r\n    }\r\n\r\n    //============================================================================\r\n    //\r\n    //                     Change Non-existant Chests (12 + 1)\r\n    //\r\n    //  Many rooms contain chest data that is not the default power bracelet,\r\n    //  however they cannot be accessed by any means.  Change them here to\r\n    //  prevent them from being added into the chest shuffle.\r\n    //\r\n    //============================================================================\r\n\r\n    /* Remove 50 rupees chest in overworld that doesn't exist */\r\n    SetChestContent(f, 0, 0x07, LA_POWERBRACLET);\r\n\r\n    /* Remove 100 rupees chest in overworld that doesn't exist */\r\n    SetChestContent(f, 0, 0x19, LA_POWERBRACLET);\r\n\r\n    /* Remove Small key chest in D1 that doesn't exist */\r\n    SetChestContent(f, 1, 0x16, LA_POWERBRACLET);\r\n\r\n    /* Remove Small key chest in D3 that doesn't exist */\r\n    SetChestContent(f, 1, 0x54, LA_POWERBRACLET);\r\n\r\n    /* Remove Small key chest in D3 that doesn't exist */\r\n    SetChestContent(f, 1, 0x55, LA_POWERBRACLET);\r\n\r\n    /* Remove Small key chest in D4 that doesn't exist */\r\n    SetChestContent(f, 1, 0x69, LA_POWERBRACLET);\r\n\r\n    /* Remove Small key chest in D6 that doesn't exist */\r\n    SetChestContent(f, 1, 0xD7, LA_POWERBRACLET);\r\n\r\n    /* Remove Bow Chest */\r\n    SetChestContent(f, 2, 0xA4, LA_POWERBRACLET);\r\n\r\n    /* Remove 20 rupees chest in cave that doesn't exist */\r\n    SetChestContent(f, 2, 0xAB, LA_POWERBRACLET);\r\n\r\n    /* Remove 50 rupees chest in cave that doesn't exist */\r\n    SetChestContent(f, 2, 0xBA, LA_POWERBRACLET);\r\n\r\n    /* Remove 50 rupees chest in cave that doesn't exist - seashell house */\r\n    SetChestContent(f, 2, 0xE9, LA_POWERBRACLET);\r\n\r\n    /* Remove Shovel Chest */\r\n    SetChestContent(f, 2, 0xF6, LA_POWERBRACLET);\r\n\r\n    /* Remove 200 rupees chest in cave that doesn't exist (extra room) */\r\n    WriteBytesToFile(f, 0x5075C, [LA_POWERBRACLET]);\r\n\r\n    /* Turn the chest into a pot so logic does not find this!!! */\r\n    WriteBytesToFile(f, 0x2BA8F, [0x20]);\r\n\r\n    //============================================================================\r\n    //\r\n    //                      Gel Chests into bomb chests\r\n    //\r\n    //   We could leave the gel chests alone, but we are going to change all\r\n    //   out of bounds chests into gel chests instead, allowing for an easier\r\n    //   way to tell if a chest is accessable or not in memory.\r\n    //\r\n    //============================================================================\r\n\r\n    /* Remove gel chests and make them be bomb chests. */\r\n    for (let uwID = 0; uwID <= 3; uwID++) {\r\n        for (let roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                let b = GetChestContent(f, uwID, roomID);\r\n\r\n                if (b === LA_Gel) {\r\n                    SetChestContent(f, uwID, roomID, LA_BOMB);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // for (let addr = TDataAddresses.ChestRange[0]; addr <= TDataAddresses.ChestRange[1]; addr++) {\r\n    //     b = ReadByteFromFile(f, addr);\r\n    //     if (b === LA_Gel) {\r\n    //         WriteBytesToFile(f, addr, [LA_BOMB]);\r\n    //     }\r\n    // }\r\n\r\n    //============================================================================\r\n    //\r\n    //                       Change Out-Of-Bounds Chests\r\n    //\r\n    //  Change all out of bounds chests from the power bracelet into gel chests.\r\n    //  They shouldn't be accessed anyways, but turning them into gel chests\r\n    //  lets us know that these are non-accessable. Do this after changing\r\n    //  non-existant chests and turning regular gel chests into rupee chests.\r\n    //\r\n    //============================================================================\r\n\r\n    /* Empty maps should contain a gel chest, not a power bracelet chest. */\r\n    for (let uwID = 0; uwID <= 3; uwID++) {\r\n        for (let roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                let b = GetChestContent(f, uwID, roomID);\r\n\r\n                if (\r\n                    (b === LA_POWERBRACLET) &&\r\n                    !(\r\n                        ((uwID === 1) && (roomID === 0x20)) ||    // Don't override D2 and D6 Bracelet\r\n                        ((uwID === 1) && (roomID === 0xCE))\r\n                    )\r\n                ) {\r\n                    SetChestContent(f, uwID, roomID, LA_Gel);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // for (let addr = TDataAddresses.ChestRange[0]; addr <= TDataAddresses.ChestRange[1]; addr++) {\r\n    //     b = ReadByteFromFile(f, addr);\r\n    //     if (\r\n    //         (b === LA_POWERBRACLET) &&\r\n    //         (\r\n    //             (addr !== 0x50680) &&    // Don't override D2 and D6 Bracelet\r\n    //             (addr !== 0x5072E)\r\n    //         )\r\n    //     ) {\r\n    //         WriteBytesToFile(f, addr, [LA_Gel]);\r\n    //     }\r\n    // }\r\n\r\n    //============================================================================\r\n    //\r\n    //                     Write \"RANDO\" to title screen\r\n    //\r\n    //============================================================================\r\n\r\n    WriteBytesToFile(f, 0xE1800, [\r\n        0x00, 0x00, 0x7E, 0x00, 0x7F, 0x3E, 0x7F, 0x22, 0x7E, 0x3C, 0x5D, 0x22, 0x55, 0x22, 0x77, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0xFF, 0x00, 0xFF, 0x7F, 0x7F, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38,\r\n        0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7F, 0x3C, 0xFF, 0x7F, 0xFF, 0x00,\r\n  \r\n        0x00, 0x00, 0x7F, 0x00, 0x7F, 0x3E, 0x7F, 0x22, 0x7F, 0x3E, 0x5D, 0x22, 0x55, 0x22, 0x77, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0xC3, 0x00, 0xF3, 0xC1, 0x79, 0xF0, 0xBC, 0x78, 0x5A, 0x3C, 0x5E, 0x3C, 0x3E, 0x1C,\r\n        0x3E, 0x1C, 0x3E, 0x1C, 0x5E, 0x3C, 0x5A, 0x3C, 0xBC, 0x78, 0x79, 0xF0, 0xF3, 0xC1, 0xC3, 0x00,\r\n  \r\n        0x00, 0x00, 0x7F, 0x00, 0x7F, 0x3A, 0x7F, 0x3A, 0x7F, 0x2E, 0x59, 0x26, 0x55, 0x22, 0x77, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFD, 0x7F, 0xF8, 0xBB, 0x7D, 0x7D, 0x3F, 0x5E, 0x3F, 0x3F, 0x1E,\r\n        0x3F, 0x1F, 0x3B, 0x1F, 0x57, 0x3B, 0x7D, 0x33, 0xAB, 0x71, 0x72, 0xE1, 0xFF, 0xF3, 0xFF, 0x00,\r\n  \r\n        0x00, 0x00, 0x7E, 0x00, 0x7F, 0x3C, 0x7F, 0x22, 0x77, 0x22, 0x5D, 0x22, 0x43, 0x3C, 0x7E, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0xF0, 0x00, 0xF0, 0xE0, 0xA0, 0xC0, 0xC0, 0x80, 0x40, 0x80, 0x80, 0x00, 0x80, 0x00,\r\n        0x40, 0x80, 0xC0, 0x80, 0xA0, 0xC0, 0xE0, 0xC0, 0xD0, 0xE0, 0xE8, 0xF0, 0xFC, 0xF8, 0xFC, 0x00,\r\n  \r\n        0x00, 0x00, 0x3E, 0x00, 0x7F, 0x1C, 0x7F, 0x22, 0x77, 0x22, 0x5D, 0x22, 0x63, 0x1C, 0x3E, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n  \r\n    WriteBytesToFile(f, 0xE1C00, [\r\n        0x00, 0x00, 0xFF, 0x00, 0xFF, 0x7F, 0x7F, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38,\r\n        0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7C, 0x38, 0x7F, 0x3C, 0xFF, 0x7F, 0xFF, 0x00,\r\n  \r\n        0x00, 0x00, 0x7E, 0x00, 0x7F, 0x3E, 0x7F, 0x22, 0x7E, 0x3C, 0x5D, 0x22, 0x55, 0x22, 0x77, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0xC3, 0x00, 0xF3, 0xC1, 0x79, 0xF0, 0xBC, 0x78, 0x5A, 0x3C, 0x5E, 0x3C, 0x3E, 0x1C,\r\n        0x3E, 0x1C, 0x3E, 0x1C, 0x5E, 0x3C, 0x5A, 0x3C, 0xBC, 0x78, 0x79, 0xF0, 0xF3, 0xC1, 0xC3, 0x00,\r\n  \r\n        0x00, 0x00, 0x7F, 0x00, 0x7F, 0x3E, 0x7F, 0x22, 0x7F, 0x3E, 0x5D, 0x22, 0x55, 0x22, 0x77, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFD, 0x7F, 0xF8, 0xBB, 0x7D, 0x7D, 0x3F, 0x5E, 0x3F, 0x3F, 0x1E,\r\n        0x3F, 0x1F, 0x3B, 0x1F, 0x57, 0x3B, 0x7D, 0x33, 0xAB, 0x71, 0x72, 0xE1, 0xFF, 0xF3, 0xFF, 0x00,\r\n  \r\n        0x00, 0x00, 0x7F, 0x00, 0x7F, 0x3A, 0x7F, 0x3A, 0x7F, 0x2E, 0x59, 0x26, 0x55, 0x22, 0x77, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0xF0, 0x00, 0xF0, 0xE0, 0xA0, 0xC0, 0xC0, 0x80, 0x40, 0x80, 0x80, 0x00, 0x80, 0x00,\r\n        0x40, 0x80, 0xC0, 0x80, 0xA0, 0xC0, 0xE0, 0xC0, 0xD0, 0xE0, 0xE8, 0xF0, 0xFC, 0xF8, 0xFC, 0x00,\r\n  \r\n        0x00, 0x00, 0x7E, 0x00, 0x7F, 0x3C, 0x7F, 0x22, 0x77, 0x22, 0x5D, 0x22, 0x43, 0x3C, 0x7E, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n  \r\n        0x00, 0x00, 0x3E, 0x00, 0x7F, 0x1C, 0x7F, 0x22, 0x77, 0x22, 0x5D, 0x22, 0x63, 0x1C, 0x3E, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n\r\n    //==============================================================================================================\r\n    //\r\n    //                                 ######## #### ##     ## ########  ######  \r\n    //                                 ##        ##   ##   ##  ##       ##    ## \r\n    //                                 ##        ##    ## ##   ##       ##       \r\n    //                                 ######    ##     ###    ######    ######  \r\n    //                                 ##        ##    ## ##   ##             ## \r\n    //                                 ##        ##   ##   ##  ##       ##    ## \r\n    //                                 ##       #### ##     ## ########  ######\r\n    //\r\n    //  1)  Need stick to trade with Tarin\r\n    //  2)  Change well's transition\r\n    //  3)  Shovel appears with arrows in the shop\r\n    //  3.1) Bombs added to the 4th slot of the shop in swordless phase\r\n    //  4)  Richard ignores bowwow\r\n    //  5)  Only level 1 shield cannot deflect the flamethrower\r\n    //  6)  Ghost will no longer appear after finishing Dungeon 4\r\n    //  6.1) Set seashell in ghost house always\r\n    //  7)  6+ leaves grants access to original Dungeon 3\r\n    //  8)  Access to original color dungeon grave, even with followers\r\n    //  9)  Kiki the monkey ignores bowwow\r\n    //  10) [REMOVED] Always get sword from sword sprite\r\n    //  11) Add bomb walls to two way bomb caves\r\n    //  12) River rapids - waterfalls are no longer flipper required to jump\r\n    //  13) Extended color dungeon's exit point to be a little further down\r\n    //  14) Chest tile graphics were corrected in the house submap\r\n    //  15) Level 2 sword now puts a sword in your inventory if you don't already have one\r\n    //  16) Like-likes currently never can eat the shield.\r\n    //  17) Level 0 shield only gives shield, no level change.\r\n    //  18) Rooster can be retrieve again after beating Dungeon 7\r\n    //  19) D8 doors relock D3 key doors, so remove D3 keydoors (and a key event)\r\n    //  20) Remove medicine chests, as talking to Marin on the beach causes hardlock\r\n    //  21) Dating Marin no longer hardlocks the game if you found a chest potion\r\n    //  22) Dungeon 2 boss Genie no longer drowns in water\r\n    //  23) Heart containers no longer drowns in water or affect doors closed event\r\n    //  24) Sword no longer drowns in water\r\n    //  25) Make D2's boss room's topleft and topright tiles solid for case of Facade\r\n    //\r\n    //==============================================================================================================\r\n\r\n    /* Need stick to trade with Tarin */\r\n    WriteBytesToFile(f, 0x1CEC6, [0x0E, 0xDB, 0xFE, 0x05, 0xDA]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Change well's transition */\r\n\r\n    /* Make transition to well land in the middle, not at the bottom.  This is\r\n      apparent when the transition changes to something other than well. */\r\n\r\n    WriteBytesToFile(f, 0x68859, [0x58, 0x50]);\r\n\r\n    //---------------------------------------------------------------------------\r\n\r\n    /* Shovel in shop with bow. */\r\n\r\n    //    f.Position := 0x137BA;\r\n    //    b := 0x01;\r\n    //    f.Write(b, SizeOf(byte));\r\n    //\r\n    //    f.Position := 0x137BE;\r\n    //    b := 0x01;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    // 0x01 - Shovel \r\n    // 0x06 - Bow\r\n    WriteBytesToFile(f, 0x137C1, [0x01, 0x06]);\r\n\r\n    // Price of arrows on 2nd slot\r\n    WriteBytesToFile(f, 0x1376A, [0x67]);\r\n\r\n    // Amount of arrows on 2nd slot\r\n    WriteBytesToFile(f, 0x13770, [0xA8]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Bombs added to the 4th slot of the shop in swordless phase. */\r\n    WriteBytesToFile(f, 0x137B8, [0x04]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Richard ignores bowwow */\r\n\r\n    /* Instead of jump to \"Please remove your follower\", jump to talking\r\n      without a follower */\r\n    WriteBytesToFile(f, 0x18075, [0x77]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Only level 1 shield cannot deflect the flamethrower - spaceotter fix */\r\n    WriteBytesToFileVersion(f, 0xEEBE, 0xEEB3, [0x01, 0xC8]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Remove the ghost - set ghost flag to 0 */\r\n    WriteBytesToFileVersion(f, 0xDE1A, 0xDE09, [0x00]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Set seashell in ghost house always */\r\n\r\n    /* Remove checking room event 0x40 in ghost house */\r\n    WriteBytesToFileVersion(f, 0xDFE2, 0xDFE0, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* 6+ leaves grants access to original D3 */ \r\n    // 0x38 - check carry flag for less then, then jump\r\n    WriteBytesToFileVersion(f, 0xB009, 0xB02B, [0x38]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Access to original color dungeon grave, even with followers */ \r\n    // 0x30 - check carry flag for reset, it should be\r\n    WriteBytesToFileVersion(f, 0xB413, 0xB44B, [0x30]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Kiki the monkey ignores bowwow */\r\n    // 0xF0 - only fight when bowwow flag is set to F0 (which is never)\r\n    WriteBytesToFile(f, 0x1D8AC, [0xF0]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Always get sword from sword sprite. */\r\n    /* NOTE TO PROGRAMMER: SHIELD AND SWORD SHARE THE SAME SPRITE.  WITH THIS\r\n       CHANGE, IF A SHIELD IS EATTEN BY A LIKE-LIKE, IT WILL SPIT OUT A SWORD */\r\n\r\n    //    /* Always show sword sprite */\r\n    //    case GetROMVersion(f) of\r\n    //      0: f.Position := 0xDBA0;\r\n    //      2: f.Position := 0xDB96;\r\n    //    end;\r\n    //    b := 0x38;\r\n    //    f.Write(b, SizeOf(byte));\r\n    //\r\n    //    /* Always get sword */\r\n    //    case GetROMVersion(f) of\r\n    //      0: f.Position := 0xE451;\r\n    //      2: f.Position := 0xE44D;\r\n    //    end;\r\n    //    b := 0x38;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Add bomb walls to two way bomb caves */\r\n\r\n    //    /* Uw1 RoomID 0xE8 - Note: This didnt blow up when the bottom was bombed. */\r\n    //    f.Position := 0x2B4BC;\r\n    //    b := 0x48;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    /* Uw2 RoomID 0x90 */\r\n    WriteBytesToFile(f, 0x2E1DE, [0x42]);\r\n    /* Move a pit */\r\n    WriteBytesToFile(f, 0x2E21B, [0x58]);\r\n\r\n    /* Room before, remove a pit and a block */\r\n    /* Move a pit */\r\n    WriteBytesToFile(f, 0x2E345, [0x05]);\r\n    /* Move a pit */\r\n    WriteBytesToFile(f, 0x2E347, [0x05]);\r\n\r\n    //    /* Uw2 RoomID 0xE5 - Note: This didnt blow up when the bottom was bombed.  */\r\n    //    f.Position := 0x2F64E;\r\n    //    b := 0x42;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    /* Uw2 RoomID 0xEF */\r\n    WriteBytesToFile(f, 0x2F949, [0x3F]);\r\n\r\n    /* Uw2 RoomID 0xF1 */\r\n    WriteBytesToFile(f, 0x2FA1C, [0x40]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* River rapids - Can't jump off a water fall without flippers, even on\r\n      raft. Turn waterfalls into regular water to allow advancement. */\r\n\r\n    /* Waterfall 1 */\r\n    WriteBytesToFile(f, 0x25552, [0x0E]);\r\n    WriteBytesToFile(f, 0x25555, [0x0E]);\r\n\r\n    /* Waterfall 2 */\r\n    WriteBytesToFile(f, 0x25978, [0x0E]);\r\n    WriteBytesToFile(f, 0x2597B, [0x0E]);\r\n\r\n    /* Waterfall 3 */\r\n    WriteBytesToFile(f, 0x26680, [0x0E]);\r\n    WriteBytesToFile(f, 0x26683, [0x0E]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Extended color dungeon's exit point to be a little further down */\r\n    WriteBytesToFile(f, 0x2BBE4, [0x30]);\r\n    WriteBytesToFile(f, 0x2BED5, [0x30]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Chest tile graphics were corrected in the house submap */\r\n    WriteBytesToFile(f, 0x90280, [0x02, 0x22, 0x02, 0x22, 0x01, 0x21, 0x02, 0x22]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Level 2 sword now puts a sword in your inventory if you don't already have one */\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0:\r\n            /* ROM 19 */\r\n            WriteBytesToFile(f, 0x676F7, [\r\n                0xCD, 0x2B, 0x7F             // Jump to new code at the end of this bank\r\n            ]);\r\n\r\n            /* ROM 19 */\r\n            WriteBytesToFile(f, 0x67F2B, [\r\n                0xEA, 0x4E, 0xDB,            // Put Lv.2 sword status in player\r\n                0x16, 0x01,                  // Set variable d to 01 (sword)\r\n                0xCD, 0xEF, 0x3F,            // Jump to 3FEF (new custom code)\r\n                0xC9                         // Return to normal code execution\r\n            ]);\r\n\r\n             /* ROM 0 */\r\n            WriteBytesToFile(f, 0x3FEF, [\r\n                0x3E, 0x03, 0xEA, 0x00, 0x21, // Switch to bank 03\r\n                0xCD, 0x72, 0x64,             // Call item into inventory function\r\n                0x3E, 0x19, 0xEA, 0x00, 0x21, // Switch to bank 19\r\n                0xC9                          // Return to normal code execution\r\n            ]);\r\n\r\n            break;\r\n\r\n      case 2:\r\n            /* ROM 19 */\r\n            WriteBytesToFile(f, 0x676FD, [\r\n                0xCD, 0x4D, 0x7F              // Jump to new code at the end of this bank\r\n            ]);\r\n\r\n            /* ROM 19 */\r\n            WriteBytesToFile(f, 0x67F4D, [\r\n                0xEA, 0x4E, 0xDB,             // Put Lv.2 sword status in player\r\n                0x16, 0x01,                   // Set variable d to 01 (sword)\r\n                0xCD, 0xEF, 0x3F,             // Jump to 3FEF (new custom code)\r\n                0xC9                          // Return to normal code execution\r\n            ]);\r\n\r\n            /* ROM 0 */\r\n            WriteBytesToFile(f, 0x3FEF, [\r\n                0x3E, 0x03, 0xEA, 0x00, 0x21,  // Switch to bank 03\r\n                0xCD, 0x6E, 0x64,              // Call item into inventory function\r\n                0x3E, 0x19, 0xEA, 0x00, 0x21,  // Switch to bank 19\r\n                0xC9                           // Return to normal code execution\r\n            ]);\r\n\r\n            break;\r\n        \r\n        default :\r\n            break;\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Like-likes currently never can eat the shield. */\r\n    WriteBytesToFileVersion(f, 0x1BE40, 0x1BE3C, [0x00]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Level 0 shield only gives shield, no level change. */\r\n    WriteBytesToFileVersion(f, 0xE46D, 0xE469, [0x00, 0x00, 0x00]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Rooster can be retrieve again after beating Dungeon 7. */\r\n    switch (GetROMVersion(f)) {\r\n        case 0:\r\n            WriteBytesToFile(f, 0xFFF9, [\r\n                0xEA, 0x7B, 0xDB,   // ld (DB7B), a\r\n                0xEA, 0xE4, 0xD9,   // ld (D9E4), a\r\n                0xC9                // ret\r\n            ]);\r\n\r\n            WriteBytesToFile(f, 0xDE25, [\r\n                0xCD, 0xF9, 0x7F    // call 7FF9\r\n            ]);\r\n\r\n            break;\r\n\r\n        case 2:\r\n            // Not enough room\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* D8 doors relock D3 key doors, so remove D3 keydoors (and a key event) */\r\n    WriteBytesToFile(f, 0x294B2, [0xF1]); // north of stair room, bottom keylock removed\r\n    WriteBytesToFile(f, 0x29525, [0xF0]); // stair room, top lock removed\r\n    WriteBytesToFile(f, 0x2956B, [0xF2]); // right of stair room, left keylock removed\r\n    WriteBytesToFile(f, 0x50054, [0x00]); // Remove key event from north of staircase\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Remove medicine chests, as talking to Marin on the beach causes hardlock */\r\n    SetChestContent(f, 1, 0xD1, LA_BOMB);\r\n    SetChestContent(f, 2, 0x20, LA_BOMB);\r\n    SetChestContent(f, 2, 0x35, LA_BOMB);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Dating Marin no longer hardlocks the game if you found a chest potion */\r\n\r\n    ///* Spaceotter's fix: Replaced an 'and a' with 'xor a', so it just zeroes the\r\n    //  flag after reading from DB10. */\r\n    //f.WriteBytesToFileVersion(0x61B75, 0x61B83, [0xAF]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Genie no longer drowns in water */\r\n    WriteBytesToFile(f, 0x10522, [0x91]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Heart containers no longer drowns in water or affect doors closed event */\r\n    WriteBytesToFile(f, GetBankAddress(0x03, 0x4327), [0x12]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Sword no longer drowns in water */\r\n    WriteBytesToFile(f, GetBankAddress(0x03, 0x4322), [0x12]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Make D2's boss room's topleft and topright tiles solid for case of Facade */\r\n    WriteBytesToFile(f, GetBankAddress(0x0A, 0x4AD9), [0xAC]);\r\n    WriteBytesToFile(f, GetBankAddress(0x0A, 0x4ADC), [0xAC]);\r\n\r\n    //============================================================================\r\n    //\r\n    //                               GENERAL\r\n    //\r\n    //  1)  Bomb chests give 10x bombs\r\n    //  2)  Doghouse - closed\r\n    //  3)  Lanmola's room - item cannot fall in the middle\r\n    //  4)  -\r\n    //  5)  Power Bracelet Lv2 and Mirror shield chest now show correct sprites\r\n    //  6)  Mambo's cave is changed to be shufflable\r\n    //  7)  Water heart cave is changed to be shufflable\r\n    //  8)  Carry more than 999 rupees\r\n    //  //9)  Replace PLAYER SELECT with empty area (insert checksum later)\r\n    //\r\n    //============================================================================\r\n\r\n    /* Bomb chests give 10x bombs */\r\n    WriteBytesToFileVersion(f, 0xD117, 0xD116, [0x0A]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Close up doghouse glitch with a fence */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x688A3, [0x62]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x9B26A, [0x62]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Lanmola's room - item cannot fall in the middle */\r\n\r\n    /* No items can fall in the sand pit in lanmola's room */\r\n    WriteBytesToFileVersion(f, 0xDD0F, 0xDD01, [0xC9]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Power Bracelet Lv2 and Mirror shield chest now show correct sprites */\r\n\r\n    /* Power bracelet Lv.2 chest no longer points to a different sprite location. */\r\n    WriteBytesToFileVersion(f, 0x1FC43, 0x1FC7F, [0xFE, 0x00]);\r\n\r\n    /* Mirror shield chest no longer points to a different sprite location. */\r\n    WriteBytesToFileVersion(f, 0x1FC4F, 0x1FC8B, [0xFE, 0x00]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Mambo's cave is changed to be shufflable. */\r\n    WriteBytesToFile(f, 0x2FD8B, [0x21]);\r\n    WriteBytesToFile(f, 0x2FDB8, [0x30, 0x5E]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Water heart cave is changed to be shufflable */\r\n    WriteBytesToFile(f, 0x2B774, [0x0D]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Carry more than 999 rupees */\r\n    WriteBytesToFileVersion(f, 0xA25D, 0xA27E, [0x99]);\r\n\r\n    //    //--------------------------------------------------------------------------\r\n    //\r\n    //    /* Replace PLAYER SELECT with empty area (insert checksum later) */\r\n    //\r\n    //    /* first row 5 tiles on player select */\r\n    //    f.WriteBytesToFile(0xBC000, [\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\r\n    //    ]);\r\n    //\r\n    //    /* second row 5 tiles on player select */\r\n    //    f.WriteBytesToFile(0xBC100, [\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\r\n    //    ]);\r\n    //\r\n    //    /* third row 5 tiles on player select */\r\n    //    f.WriteBytesToFile(0xBC0A0, [\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\r\n    //    ]);\r\n    //\r\n    //    /* first row 6th tile on player select */\r\n    //    f.WriteBytesToFile(0xBC090, [\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\r\n    //    ]);\r\n    //\r\n    //    /* second row 6th tile on player select */\r\n    //    f.WriteBytesToFile(0xBC2A0, [\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\r\n    //    ]);\r\n    //\r\n    //    /* third row 6th tile on player select */\r\n    //    f.WriteBytesToFile(0xBC2F0, [\r\n    //      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF\r\n    //    ]);\r\n\r\n    //==============================================================================================================\r\n    //\r\n    //                    ########  ##     ## ##    ##  ######   ########  #######  ##    ## \r\n    //                    ##     ## ##     ## ###   ## ##    ##  ##       ##     ## ###   ## \r\n    //                    ##     ## ##     ## ####  ## ##        ##       ##     ## ####  ## \r\n    //                    ##     ## ##     ## ## ## ## ##   #### ######   ##     ## ## ## ## \r\n    //                    ##     ## ##     ## ##  #### ##    ##  ##       ##     ## ##  #### \r\n    //                    ##     ## ##     ## ##   ### ##    ##  ##       ##     ## ##   ### \r\n    //                    ########   #######  ##    ##  ######   ########  #######  ##    ##\r\n    //\r\n    //   1) D3 - Added strange objects to the bottom right room\r\n    //   2) D3 - Added a walkable tile in the extra small key room\r\n    //   3) D3 - Remove strange objects where you get the boots\r\n    //   4) D5 - Extend ladder down in the first minidungeon\r\n    //   5) D5 - Added missing chest collision\r\n    //   6) D6 - Remove opening in that room that loops you around\r\n    //   7) D6 - One room has an orb at the top left. Block the corner with collision\r\n    //   8) D6 - Block off an statue owl with a solid tile\r\n    //   9) D6 - Remove throw pot at chest event\r\n    //\r\n    //==============================================================================================================\r\n\r\n    //-------------------------------   D3   -----------------------------------\r\n\r\n    /* D3 - Add strange objects to the bottom right room */\r\n\r\n    // 0x4F - Strange Object\r\n    WriteBytesToFile(f, 0x29499, [0x35, 0x4F]);\r\n\r\n    // 0x4F - Strange Object\r\n    WriteBytesToFile(f, 0x2949F, [0x45, 0x4F]);\r\n\r\n    // S.O.G. so strange objects appear correctly\r\n    WriteBytesToFileVersion(f, 0x82F06, 0x82F0E, [0x09]);\r\n\r\n    /* D3 - Add a walkable tile in the extra small key room so feather is not required */\r\n    WriteBytesToFile(f, 0x2950F, [0xCF]);\r\n\r\n    /* D3 - Remove strange objects where you get the boots */\r\n    WriteBytesToFile(f, 0x29183, [0x08]);\r\n\r\n    //-------------------------------   D5   -----------------------------------\r\n\r\n    /* D5 - Extend ladder down in the first minidungeon. */\r\n    WriteBytesToFile(f, 0x2A73A, [0xC7]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* D5 - Add Missing Chest Collision */\r\n\r\n    /* One room spawns a chest, but the collision isn't there initially.\r\n      Change a pot into a chest and move it to the correct location so the\r\n      visualizer knows it's there. */\r\n    WriteBytesToFile(f, 0x2A44F, [0x28, 0xA1]);\r\n\r\n    //-------------------------------   D6   -----------------------------------\r\n\r\n    /* D6 - Remove opening in that room that loops you around */\r\n    for (let addr = 0x2AB1A; addr <= 0x2AB36; addr++) {\r\n        b = ReadByteFromFile(f, addr + 2);\r\n        WriteBytesToFile(f, addr, [b]);\r\n    }\r\n    WriteBytesToFile(f,  0x2AB36 + 1, [0x00, 0xFE]);\r\n\r\n    /* D6 - One room has an orb at the top left. Block the corner with collision */\r\n    // 0x00 - Replace Wall Torch with Floor Torch\r\n    WriteBytesToFile(f, 0x2A8F6, [0x00, 0x17]);\r\n\r\n    /* D6 - block off a statue owl with a solid tile */\r\n    // 0x55 - Turn dot into floor torch\r\n    WriteBytesToFile(f, 0x2AAE5, [0x55, 0x12]);\r\n\r\n    /* D6 - Remove throw pot at chest event */\r\n    WriteBytesToFile(f, 0x500B6, [0x00]);\r\n\r\n    //==============================================================================================================\r\n    //\r\n    //                                  ######## ######## ##     ## ######## \r\n    //                                     ##    ##        ##   ##     ##    \r\n    //                                     ##    ##         ## ##      ##    \r\n    //                                     ##    ######      ###       ##    \r\n    //                                     ##    ##         ## ##      ##    \r\n    //                                     ##    ##        ##   ##     ##    \r\n    //                                     ##    ######## ##     ##    ##  \r\n    //\r\n    //   Change the text on the overworld keys, especially if we are swapping chests.  The reason for this is because \r\n    //   when the Angler, Face, Bird or Slime Key, or golden leaf is gotten from a chest, the text that shows in the \r\n    //   dialog is incorrect and off by one text pointer.\r\n    //\r\n    //==============================================================================================================\r\n\r\n    /* You've got the Angler Key -> You've got the ???? Key */\r\n    arr = StringOfBytesToByteArray(\r\n      '59 6F 75 5E 76 65 20 67 6F 74 20 74 68 65 20 20 3F 3F 3F 3F 20 4B 65 79 21 FF 00 00'\r\n    );\r\n    WriteBytesToFile(f, 0x53F2C, arr);\r\n\r\n    /* You've got the Face Key -> You've got the ???? Key */\r\n    arr = StringOfBytesToByteArray(\r\n      '59 6F 75 5E 76 65 20 67 6F 74 20 74 68 65 20 20 3F 3F 3F 3F 20 4B 65 79 21 FF'\r\n    );\r\n    WriteBytesToFile(f, 0x59701, arr);\r\n\r\n    /* You've got the Bird Key -> You've got the ???? Key */\r\n    arr = StringOfBytesToByteArray(\r\n      '59 6F 75 5E 76 65 20 67 6F 74 20 74 68 65 20 20 3F 3F 3F 3F 20 4B 65 79 21 FF'\r\n    );\r\n    WriteBytesToFile(f, 0x5971B, arr);\r\n\r\n    /* You've got the Slime Key -> You've got the ???? Key */\r\n    arr = StringOfBytesToByteArray(\r\n      '59 6F 75 5E 76 65 20 67 6F 74 20 74 68 65 20 20 3F 3F 3F 3F 20 4B 65 79 21 FF'\r\n    );\r\n    WriteBytesToFile(f, 0x53EE3, arr);\r\n\r\n    //==============================================================================================================\r\n    //\r\n    //           #######  ##     ## ######## ########  ##      ##  #######  ########  ##       ########  \r\n    //          ##     ## ##     ## ##       ##     ## ##  ##  ## ##     ## ##     ## ##       ##     ## \r\n    //          ##     ## ##     ## ##       ##     ## ##  ##  ## ##     ## ##     ## ##       ##     ## \r\n    //          ##     ## ##     ## ######   ########  ##  ##  ## ##     ## ########  ##       ##     ## \r\n    //          ##     ##  ##   ##  ##       ##   ##   ##  ##  ## ##     ## ##   ##   ##       ##     ## \r\n    //          ##     ##   ## ##   ##       ##    ##  ##  ##  ## ##     ## ##    ##  ##       ##     ## \r\n    //           #######     ###    ######## ##     ##  ###  ###   #######  ##     ## ######## ######## \r\n    //\r\n    //   1) Signpost maze - always available\r\n    //   2) Rooster required cave next to castle had some pits removed\r\n    //   3) -\r\n    //   4) Removed pit below dungeon 7\r\n    //   5) Shallow water where D4 is\r\n    //   6) Allow entry to original D7 cave if you came out from there\r\n    //   7) Remove marin on bridge event (if marin is a follower, this will cause a softlock)\r\n    //\r\n    //==============================================================================================================\r\n\r\n    //    /* Signpost maze - stairs available without puzzle */\r\n    //\r\n    //    /* Add staircase to sign post maze, because if song 3 is gotten, the signs\r\n    //      no longer work to reopen the staircase. */\r\n    //\r\n    //    /* Collision */\r\n    //    f.Position := 0x69458;\r\n    //    b := 0x81;\r\n    //    f.Write(b, SizeOf(byte));\r\n    //    b := 0x61;\r\n    //    f.Write(b, SizeOf(byte));\r\n    //    b := 0xC6;\r\n    //    f.Write(b, SizeOf(byte));\r\n    //\r\n    //    /* Tiles */\r\n    //    f.Position := 0x9C280 + 61;\r\n    //    b := 0xC6;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    /* Signpost maze - always available */\r\n\r\n    /* Comment out code that checks for mamu's song to disable the maze */\r\n    WriteBytesToFile(f, 0x206A, [0x00, 0x00, 0x00, 0x00]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Rooster required cave next to castle - pits removed */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x264C3, [0x83]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x9A5C3, [0x04, 0x04]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Remove pit below dungeon 7 */\r\n\r\n    /* Collision - Remove pit */\r\n    WriteBytesToFile(f, 0x24D73, [0x45, 0x03]);\r\n\r\n    /* Tiles - remove pit */\r\n    WriteBytesToFile(f, 0x9898D, [0x03]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Shallow water where D4 is */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x25084, [0x1B]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x98D86, [0x1B, 0x1B, 0x1B, 0x1B, 0x1B]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Allow entry to original D7 cave if you came out from there */\r\n\r\n    /* WARNING! Keep transition in the same location to not confuse the shuffle\r\n      caves code! */\r\n\r\n    /* Grab all room objects after the cave */\r\n    arr = [];\r\n    i = 0;\r\n    for (addr = 0x2478D+2; addr <= 0x247E5; addr++) {\r\n        b = ReadByteFromFile(f, addr);\r\n        arr[i] = b;\r\n        i++;\r\n    }\r\n\r\n    /* Shift those to the left by two bytes */\r\n    i = 0;\r\n    for (addr = 0x2478D; addr <= 0x247E3; addr++) {\r\n        WriteBytesToFile(f, addr, [arr[i]]);\r\n        i++;\r\n    }\r\n\r\n    /* Add the cave to the end */\r\n    WriteBytesToFile(f, 0x247E4, [0x25, 0xE1]);\r\n\r\n    /* Tile */\r\n    WriteBytesToFile(f, 0x98479, [0xE1]);\r\n\r\n    //----------------------------------------------------------------------------\r\n    \r\n    /* Remove marin on bridge event (if marin is a follower, this will cause a softlock) */\r\n    ReplaceSprite(f, 0, 0x08, LA_SPRITE_MARINTALTALHEIGHTS, LA_SPRITE_RUPEE_HIDDEN);\r\n\r\n    //============================================================================\r\n    //\r\n    //                            CAVES / HOUSES\r\n    //\r\n    //  1) Richard also appears in his basement\r\n    //  2) Mushroom can be found in the witch's house\r\n    //  3) Bombs can be found in the witch's house\r\n    //  4) Bombs can be found in the starting house\r\n    //  5) Bird key cave is now hookshotable to get across\r\n    //\r\n    //============================================================================\r\n\r\n    /* Richard in the basement */\r\n\r\n    /* Sprite - Place richard in his basement as well */\r\n    WriteBytesToFile(f, 0x590E4, [0x16, 0x95]);\r\n\r\n    /* Gel into rupee under condition */\r\n    WriteBytesToFile(f, 0x590E6, [0x11, LA_SPRITE_RUPEE_HIDDEN]);\r\n\r\n    /* Redecorate room */\r\n    WriteBytesToFile(f, 0x2F33D, [0x12]);\r\n    WriteBytesToFile(f, 0x2F33F, [0x12]);\r\n    WriteBytesToFile(f, 0x2F341, [0x12]);\r\n\r\n    /* Gels in the room above into rupee under condition */\r\n    WriteBytesToFile(f, 0x5909E, [0x11, LA_SPRITE_RUPEE_HIDDEN, 0x11, LA_SPRITE_RUPEE_HIDDEN]);\r\n\r\n    /* Richard sprite set in his basement instead of the gel sprite set. */\r\n    WriteBytesToFileVersion(f, 0x8339B, 0x833A3, [0x22]);\r\n    WriteBytesToFileVersion(f, 0x833AB, 0x833B3, [0x22]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Move mushroom into the witches house. */\r\n\r\n    /* Forst mushroom, replace with moblin */\r\n    WriteBytesToFile(f, 0x592B9, [0x0B]);\r\n\r\n    /* HACK - Witch house, replace pot with heart with mushroom */\r\n    WriteBytesToFile(f, 0x58FD0, [0x62, 0x3A]);\r\n\r\n    /* Add mushroom graphics (2 tiles) to the witch sprites RAM, otherwise\r\n      the mushroom will appear as XXXX. */\r\n    WriteBytesToFile(f, 0xC9FE0, [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x03, 0x09, 0x07, 0x10, 0x0F,\r\n        0x10, 0x0F, 0x10, 0x0F, 0x0C, 0x03, 0x03, 0x00, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00\r\n    ]);\r\n    \r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Bombs under pots in the witch's house, allows more earlier bombs. */\r\n    WriteBytesToFile(f, 0x58FCB, [0x38]);\r\n    WriteBytesToFile(f, 0x58FD3, [0x38]);\r\n    WriteBytesToFile(f, 0x58FD5, [0x38]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Bombs under pots in the start house, allows more earlier bombs. */\r\n    WriteBytesToFile(f, 0x58FDE, [0x38]);\r\n    WriteBytesToFile(f, 0x58FE0, [0x38]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Change rooster cave to require rooster or hookshot. */\r\n\r\n    /* Turn one of the lamps into a hookshotable block - topright */\r\n    WriteBytesToFile(f, 0x2DB07, [0x07, 0xA6]);\r\n\r\n    /* Shorten the top pit by 1 tile */\r\n    WriteBytesToFile(f, 0x2DB3A, [0x85]);\r\n\r\n    /* Move top left corner to the top left block */\r\n    WriteBytesToFile(f, 0x2DB03, [0x01, 0xA6]);\r\n\r\n    /* Move top right corner to the top right block */\r\n    WriteBytesToFile(f, 0x2DB12, [0xA6]);\r\n\r\n    /* Move bottom right corner to the block */\r\n    WriteBytesToFile(f, 0x2DB35, [0xA6]);\r\n\r\n    /* Move top leftish wall to the left wall, turn into a hookshotable block */\r\n    WriteBytesToFile(f, 0x2DB0F, [0x10, 0xA6]);\r\n\r\n    /* Turn bottom left corner into a hookshotable block */\r\n    WriteBytesToFile(f, 0x2DB27, [0xA6]);\r\n\r\n    //============================================================================\r\n    //\r\n    //                             CAVE CHANGES\r\n    //\r\n    //  1) Removed a ledge towards Dungeon 8\r\n    //  3) Tal tal heights towards D7 - removed a ledge\r\n    //  2) Cave back to raft shop - removed a ledge\r\n    //\r\n    //============================================================================\r\n\r\n    /* Remove a ledge in a cave in Tal Tal Heights to allow going back. This is\r\n      the room before the hookshot gap towards D8. */\r\n    WriteBytesToFile(f, 0x2F8A8, [0x05]);\r\n\r\n    /* Destroy a ledge in the cave on the way back towards the Raft Shop. */\r\n    WriteBytesToFile(f, 0x2B494, [0x81, 0x51, 0x27]);\r\n\r\n    /* Allow going backwards in the cave where you need hookshot towards D7. */\r\n    WriteBytesToFile(f, 0x2DF1F, [0xC1]);\r\n\r\n    //============================================================================\r\n    //\r\n    //                               DUNGEON\r\n    //\r\n    //  1) D0 - Remove rupees in rupee room, add 200 chest (put into a new flag)\r\n    //  2) D5 - Remove Master Stalfos 4\r\n    //  3) D5 - Added hookshot into hookshot note chest\r\n    //  4) D8 - Removed a tile to allow killing Dodongos and get chest from anywhere\r\n    //\r\n    //  5) D2 - Powder is no longer required at the start\r\n    //  6) D3 - Power Bracelet is no longer required at the start\r\n    //  7) D5 - Removed first key door\r\n    //\r\n    //============================================================================\r\n\r\n    // //-------------------------------   D0   -------------------------------------\r\n\r\n    // /* D0 - Remove rupees in rupee room, add 200 chest (put into a new flag) */\r\n\r\n    // /* Collision */\r\n    // WriteBytesToFile(f, 0x2BEDF, [0x81, 0x27, LA_TILE_Chest1, 0xFE]);\r\n    // for (addr = 0x2BEE3; addr <= 0x2BEEE; addr++) {\r\n    //     WriteBytesToFile(f, addr, [0x00]);\r\n    // }\r\n\r\n    // /* Chest content */\r\n    // WriteBytesToFile(f, 0x50873, [0x1E]);\r\n\r\n    //-------------------------------   D2   -------------------------------------\r\n\r\n    /* D2 - Remove entrance Powder event restriction. */\r\n    // 0x00 - no event\r\n    WriteBytesToFile(f, 0x50031, [0x00]);\r\n\r\n    //-------------------------------   D3   -------------------------------------\r\n\r\n    /* D3 - Remove entrance PB event restriction. */\r\n    // 0x00 - no event\r\n    WriteBytesToFile(f, 0x50052, [0x00]);\r\n\r\n    //-------------------------------   D5   -------------------------------------\r\n\r\n    /* D5 - Remove first keydoor to allow more exploration - bottom room */\r\n    WriteBytesToFile(f, 0x2A4E5, [0xF0]);\r\n\r\n    /* D5 - Remove first keydoor to allow more exploration - top room */\r\n    WriteBytesToFile(f, 0x2A47B, [0xF1]);\r\n\r\n    /* D5 - Remove Master Stalfos 4 */\r\n    WriteBytesToFile(f, 0x589A8, [0xFF, 0x00]);\r\n\r\n    //    f.WriteBytesToFile(0xDC3D, [0xA4]); // item sprite\r\n    //    f.WriteBytesToFile(0xDC62, [0x0D]); // item ID\r\n\r\n    /* D5 - Add hookshot item into hookshot note chest */\r\n    SetChestContent(f, 1, 0x96, LA_HOOKSHOT);\r\n    // WriteBytesToFile(f, 0x506F6, [0x03]);\r\n\r\n    //-------------------------------   D8   -------------------------------------\r\n\r\n    /* D8 - Make dodongo chest accessable without leaving the dungeon. */\r\n    WriteBytesToFile(f, 0x2CED3, [0x58, 0x0D]);\r\n\r\n    //-------------------------------   D7   -------------------------------------\r\n\r\n    //    /* D7 - Entrance now exits you to below the stairs (in case of shuffle) */\r\n    //    f.Position := 0x2C53D;\r\n    //    b := 0x60;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    //==============================================================================================================\r\n    //\r\n    //                            ######## ##     ## ######## ########     ###    \r\n    //                            ##        ##   ##     ##    ##     ##   ## ##   \r\n    //                            ##         ## ##      ##    ##     ##  ##   ##  \r\n    //                            ######      ###       ##    ########  ##     ## \r\n    //                            ##         ## ##      ##    ##   ##   ######### \r\n    //                            ##        ##   ##     ##    ##    ##  ##     ## \r\n    //                            ######## ##     ##    ##    ##     ## ##     ##\r\n    //\r\n    //  1) Show thousands digit for rupees\r\n    //\r\n    //==============================================================================================================\r\n\r\n    /* Show thousands digit for rupees */\r\n\r\n    /* No idea for version 1.2 */\r\n    if (GetROMVersion(f) === 0) {\r\n        /* spaceotter's hack */\r\n        WriteBytesToFile(f, 0xA2CE, [\r\n            0xC3, 0x95, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00\r\n        ]);\r\n        \r\n        /* spaceotter's hack */\r\n        WriteBytesToFile(f, 0xBF95, [\r\n            0xFA, 0x5D, 0xDB, 0xE6, 0xF0, 0x20, 0x1B, 0xFA, 0x00, 0xD6, 0x5F, 0x16, 0x00, 0xC6, 0x06,\r\n            0xEA, 0x00, 0xD6, 0x21, 0x01, 0xD6, 0x19, 0x3E, 0x9C, 0x22, 0x3E, 0x2A, 0x22, 0x3E, 0x02,\r\n            0x22, 0xE5, 0x18, 0x25, 0xFA, 0x00, 0xD6, 0x5F, 0x16, 0x00, 0xC6, 0x07, 0xEA, 0x00, 0xD6,\r\n            0x21, 0x01, 0xD6, 0x19, 0x3E, 0x9C, 0x22, 0x3E, 0x29, 0x22, 0x3E, 0x03, 0x22, 0xE5, 0xFA,\r\n            0x5D, 0xDB, 0xCB, 0x37, 0xE6, 0x0F, 0xC6, 0xB0, 0xE1, 0x22, 0xE5, 0xFA, 0x5D, 0xDB, 0xE6,\r\n            0x0F, 0x5F, 0xC6, 0xB0, 0xE1, 0x22, 0xE5, 0xFA, 0x5E, 0xDB, 0xCB, 0x37, 0xE6, 0x0F, 0xC6,\r\n            0xB0, 0xE1, 0x22, 0xE5, 0xFA, 0x5E, 0xDB, 0xE6, 0x0F, 0xC6, 0xB0, 0xE1, 0x22, 0x3E, 0x00,\r\n            0x22, 0xC9\r\n        ]);\r\n    }\r\n\r\n};\r\n\r\nexport default CoreChanges;","import { WriteBytesToFile, GetChecksum } from \"../../../data/Read/ReadRom\";\r\nimport { HexToInt, GetCodeImage } from \"../../../utilities\";\r\n\r\nconst FileSelectCode = (f) => {\r\n    let i;\r\n    let result;\r\n\r\n    let code = GetChecksum(f);\r\n\r\n    /* Clear out a section for the code on the player select screen */\r\n\r\n    /* first row 5 tiles on player select */\r\n    WriteBytesToFile(f, 0xBC000, [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n\r\n    /* second row 5 tiles on player select */\r\n    WriteBytesToFile(f, 0xBC100, [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n\r\n    /* third row 5 tiles on player select */\r\n    WriteBytesToFile(f, 0xBC0A0, [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n\r\n    /* first row 6th tile on player select */\r\n    WriteBytesToFile(f, 0xBC090, [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n\r\n    /* second row 6th tile on player select */\r\n    WriteBytesToFile(f, 0xBC2A0, [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n\r\n    /* third row 6th tile on player select */\r\n    WriteBytesToFile(f, 0xBC2F0, [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n\r\n    //---------------------------------------------------------------------------------------------------\r\n\r\n    /* Image 1 */\r\n    i = HexToInt('0' + code[0]);\r\n    result = GetCodeImage(i);\r\n    WriteBytesToFile(f, 0xBC018, result.arr1);\r\n    WriteBytesToFile(f, 0xBC110, result.arr2);\r\n    WriteBytesToFile(f, 0xBC118, result.arr3);\r\n    WriteBytesToFile(f, 0xBC0B0, result.arr4);\r\n\r\n    /* Image 2 */\r\n    i = HexToInt('0' + code[1]);\r\n    result = GetCodeImage(i);\r\n    WriteBytesToFile(f, 0xBC028, result.arr1);\r\n    WriteBytesToFile(f, 0xBC120, result.arr2);\r\n    WriteBytesToFile(f, 0xBC128, result.arr3);\r\n    WriteBytesToFile(f, 0xBC0C0, result.arr4);\r\n\r\n    /* Image 3 */\r\n    i = HexToInt('0' + code[2]);\r\n    result = GetCodeImage(i);\r\n    WriteBytesToFile(f, 0xBC038, result.arr1);\r\n    WriteBytesToFile(f, 0xBC130, result.arr2);\r\n    WriteBytesToFile(f, 0xBC138, result.arr3);\r\n    WriteBytesToFile(f, 0xBC0D0, result.arr4);\r\n\r\n    /* Image 4 */\r\n    i = HexToInt('0' + code[3]);\r\n    result = GetCodeImage(i);\r\n    WriteBytesToFile(f, 0xBC048, result.arr1);\r\n    WriteBytesToFile(f, 0xBC140, result.arr2);\r\n    WriteBytesToFile(f, 0xBC148, result.arr3);\r\n    WriteBytesToFile(f, 0xBC0E0, result.arr4);\r\n};\r\n\r\nexport default FileSelectCode;","import { GetChecksum } from \"../../../data/Read/ReadRom\";\r\nimport { CHECKSUM_12, CHECKSUM_10 } from \"../../Constants/uConstants\";\r\n\r\nconst NoModifiedFiles = (f) => {\r\n    let checksum = GetChecksum(f);\r\n\r\n    if ((checksum !== CHECKSUM_12) && (checksum !== CHECKSUM_10)) {\r\n        throw new Error(\"Please use an original ROM, not a modified one.\");\r\n    }\r\n};\r\n\r\nexport default NoModifiedFiles;","import { WriteBytesToFile, ReadByteFromFile } from \"../../../data/Read/ReadRom\";\r\nimport { \r\n    LA_TILE_POT, \r\n    LA_TILE_Chest1, \r\n    LA_TILE_Chest2,\r\n    LA_TILE_KEYHOLE,\r\n} from \"../../../data/Constants/uConstants\";\r\n\r\nconst RemoveUW0TileProperties = (f) => {\r\n    /* Add water transition to the overworld */\r\n    WriteBytesToFile(f, 0x20AD6, [0x07]);\r\n\r\n    /* Dungeon 5 overworld screen */\r\n    WriteBytesToFile(f, 0x69593, [\r\n        0x52, 0x02, // Move rock as first transition on the left\r\n        0x54, 0x02  // Move rock as second transition on the right\r\n    ]);\r\n\r\n    /* Fisherman under the bridge */\r\n    WriteBytesToFile(f, 0x69984, [0x26, 0x02]);\r\n\r\n    /* Open the egg */\r\n    WriteBytesToFile(f, 0x24440, [0x79]);\r\n\r\n    //  (* Convert all minidungeon views into overworld view *)\r\n    //  for roomID := $00 to $FF do\r\n    //  begin\r\n    //    uwID := 0;\r\n    //    TransitionObject := GetFirstRoomTransition(f, uwID, roomID);\r\n    //    if TransitionObject <> nil then\r\n    //      if TransitionObject.viewID = $E2 then\r\n    //      begin\r\n    //        f.Position := TransitionObject.address;\r\n    //        b := $E1;\r\n    //        f.Write(b, SizeOf(byte));\r\n    //      end;\r\n    //  end; \r\n\r\n    let b;\r\n    let currAddr;  \r\n    let startAddr = 0x20AD4;\r\n    let endAddr = 0x20BD3;\r\n    let i = 0x00;\r\n    for (currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        b = ReadByteFromFile(f, currAddr);\r\n\r\n        if (![\r\n            0x02,       // CUSTOM attempted turning into water\r\n            LA_TILE_POT,\r\n            0xC5,       // tombstones\r\n            LA_TILE_Chest1, LA_TILE_Chest2,\r\n            0xBA,       // bomb door\r\n            0xE1        // cave (egg uses this)\r\n        ].includes(i)) {\r\n            if (![\r\n                0x03, 0x09,        // Ignore transitions\r\n                LA_TILE_KEYHOLE    // Ignore keyholes\r\n            ].includes(b)) {\r\n                WriteBytesToFile(f, currAddr, [0x00]);\r\n            }\r\n        }\r\n\r\n        i++;\r\n    }\r\n};\r\n\r\nexport default RemoveUW0TileProperties;","import { WriteBytesToFile, ReadByteFromFile } from \"../../../data/Read/ReadRom\";\r\nimport { \r\n    LA_TILE_POT, \r\n    LA_TILE_Chest1, \r\n    LA_TILE_Chest2, \r\n    LA_TILE_BLOCK, \r\n    LA_TILE_PUSHBLOCK, \r\n    LA_TILE_MINIDUNGEONHEAD1, \r\n    LA_TILE_MINIDUNGEONHEAD2 \r\n} from \"../../../data/Constants/uConstants\";\r\n\r\nconst RemoveUW1TileProperties = (f) => {\r\n\r\n    let b = 0;\r\n    let currAddr;\r\n\r\n    /* Add water transition to the Underworld */\r\n    // 0x07 - water tile property\r\n    WriteBytesToFile(f, 0x20BD6, [0x07]);\r\n  \r\n    //  /* Dungeon 5 water transition screen */\r\n    //  currAddr = 0x2A17D;\r\n    //\r\n    //  /* Middle deep water row into 3 byte, 1 tile wide tile */\r\n    //  f.Position = currAddr;\r\n    //  b = 0x81;\r\n    //  f.Write(b, SizeOf(byte));\r\n  \r\n    /* Shift the tiles so this new tile appears last in the list */\r\n    for (let currAddr = 0x2A165; currAddr <= 0x2A187-3; currAddr++) {\r\n        b = ReadByteFromFile(f, currAddr+2);\r\n        WriteBytesToFile(f, currAddr, [b]);\r\n    }\r\n    /* Move right lanturn into the water transition tile */\r\n    WriteBytesToFile(f, 0x2A187-3 + 1, [0x45, 0x02]);\r\n  \r\n    //============================================================================\r\n  \r\n    let startAddr = 0x20BD4;\r\n    let endAddr = 0x20CD3;\r\n    let i = 0x00;\r\n  \r\n    for (currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        b = ReadByteFromFile(f, currAddr);\r\n  \r\n        if (![\r\n            0x02,                                                                // CUSTOM attempted turning into water\r\n            LA_TILE_POT,\r\n            LA_TILE_Chest1, LA_TILE_Chest2,                                      // chests\r\n            LA_TILE_BLOCK,\r\n            LA_TILE_PUSHBLOCK,\r\n            0xBC,                                                                // dungeon transition\r\n            0xC1, 0xC2,                                                          // cave transition\r\n            0xC5, 0xC6,                                                          // dream bed\r\n            0xDE,                                                                // key block\r\n            0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34,                      // key doors\r\n    \r\n            /* Minidungeon */\r\n            0x50, 0x51, 0x52, 0x53, 0x54, 0x56, 0x57, 0x58,                      // Solid\r\n            0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5F, 0x60, 0x61, 0x68, 0x6C, 0x6D,    // Solid\r\n            0x7B,                                                                // D5 Bridge\r\n            0x62, 0x63, 0x64, 0x65,                                              // ladder\r\n            LA_TILE_MINIDUNGEONHEAD1, LA_TILE_MINIDUNGEONHEAD2,\r\n            0x4B, 0x72, 0x73, 0x74, 0x7E, 0x80, 0x81, 0x83, 0x84                 // Water\r\n        ].includes(i)) {\r\n            if (![\r\n                0x03, 0x09     // Ignore transitions\r\n            ].includes(b)) {\r\n                WriteBytesToFile(f, currAddr, [0x00]);\r\n            }\r\n        }\r\n        \r\n        i++;\r\n    }\r\n};\r\n\r\nexport default RemoveUW1TileProperties;","import { WriteBytesToFile, ReadByteFromFile } from \"../../../data/Read/ReadRom\";\r\nimport { \r\n    LA_TILE_POT, \r\n    LA_TILE_Chest1, \r\n    LA_TILE_Chest2, \r\n    LA_TILE_BLOCK, \r\n    LA_TILE_PUSHBLOCK, \r\n    LA_TILE_MINIDUNGEONHEAD1, \r\n    LA_TILE_MINIDUNGEONHEAD2 \r\n} from \"../../../data/Constants/uConstants\";\r\n\r\nconst RemoveUW2TileProperties = (f) => {\r\n    let b = 0;\r\n    let startAddr = 0;\r\n    let endAddr = 0;\r\n    let currAddr = 0;\r\n    let i = 0;\r\n    \r\n    startAddr = 0x20CD4;\r\n    endAddr = 0x20DD3;\r\n    i = 0x00;\r\n  \r\n    for (currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n\r\n        b = ReadByteFromFile(f, currAddr);\r\n  \r\n        if (![\r\n            0x02,                                                                   // CUSTOM attempted turning into water\r\n            LA_TILE_POT,\r\n            LA_TILE_Chest1, LA_TILE_Chest2,\r\n            LA_TILE_BLOCK,\r\n            LA_TILE_PUSHBLOCK,\r\n            0xBC,                                                                   // dungeon transition\r\n            0xC1, 0xC2,                                                             // cave transition\r\n            0xC5, 0xC6,                                                             // dream bed\r\n            0xDE,                                                                   // key block\r\n            0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34,                         // key doors\r\n    \r\n            /* Minidungeon */\r\n            0x50, 0x51, 0x52, 0x53, 0x54, 0x56, 0x57, 0x58,                         // Solid\r\n            0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5F, 0x60, 0x61, 0x68, 0x6C, 0x6D,       // Solid\r\n            0x7B,                                                                   // D5 Bridge\r\n            0x62, 0x63, 0x64, 0x65,                                                 // ladder\r\n            LA_TILE_MINIDUNGEONHEAD1, LA_TILE_MINIDUNGEONHEAD2,\r\n            0x4B, 0x72, 0x73, 0x74, 0x7E, 0x80, 0x81, 0x83, 0x84                    // Water\r\n        ].includes(i)) {\r\n            /* Ignore transitions */\r\n            if (![0x03, 0x09].includes(b)) {\r\n                WriteBytesToFile(f, currAddr, [0x00]);\r\n            }\r\n        }\r\n        \r\n        i++;\r\n    }\r\n};\r\n\r\nexport default RemoveUW2TileProperties;","import { IntToHex, HexToInt, LowNibble, HighNibble, RoomExists, clone, LeftPad, create2DArray } from \"../../utilities\";\r\nimport { WriteBytesToFile, ReadByteFromFile, GetBankStartAddress } from \"./ReadRom\";\r\nimport { \r\n    Z4_TILETYPE, \r\n    Z4_DUNGEONNUMBER,\r\n    Z4_MAPCATEGORY,\r\n    Z4_ROOMTYPES,\r\n    Z4_ConnectorTYPES,\r\n\r\n    POINTER_OFFSET, \r\n    Z4_TILE_SOLID, \r\n    ROOM_SIZE_X, \r\n    ROOM_SIZE_Y, \r\n    LA_TILE_KEYDOOR_1, \r\n    LA_TILE_KEYDOOR_2,\r\n    LA_TILE_DOOR_LOCKS_1,\r\n    LA_TILE_DOOR_LOCKS_2,\r\n    LA_TILE_OPENDOOR_1,\r\n    LA_TILE_OPENDOOR_2,\r\n    LA_TILE_NIGHTMARE_DOOR,\r\n    LA_TILE_ONEWAYDOOR_CAN,\r\n    LA_TILE_ONEWAYDOOR_CANNOT,\r\n    LA_TILE_CAVE_ENTRANCE,\r\n    LA_TILE_KEYDOOR_3,\r\n    LA_TILE_KEYDOOR_4,\r\n    LA_TILE_DOOR_LOCKS_3,\r\n    LA_TILE_DOOR_LOCKS_4,\r\n    LA_TILE_OPENDOOR_3,\r\n    LA_TILE_OPENDOOR_4,\r\n    LA_TILE_DUNGEON_ENTRANCE,\r\n    Z4_TILE_TRANS,\r\n\r\n    LA_TILE_STAIRCASE1,\r\n    LA_TILE_STAIRCASE2,\r\n    LA_TILE_EGGWALL,\r\n    LA_TILE_TRANSITION0,\r\n    LA_TILE_TRANSITION1,\r\n    LA_TILE_SPECIALGRASS,\r\n    LA_TILE_POT,\r\n    Z4_TILE_PIT,\r\n    LA_TILE_PITTRANSITION1,\r\n    LA_TILE_PITTRANSITION2,\r\n    LA_TILE_PITTRANSITION3,\r\n    LA_TILE_PITTRANSITION4,\r\n    LA_TILE_WELL,\r\n\r\n    LA_TILESET_PITTRANSITIONS,\r\n} from \"../Constants/uConstants\";\r\n\r\nexport const GetTileType = (uwID, id) => {\r\n    return Z4_TILETYPE[uwID][id];\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                         Room Data \r\n//\r\n//                                         Pointers\r\n//\r\n//===================================================================================================\r\n\r\nexport const RoomData_Overworld_TOP    = [0x24000, 0x240FF];\r\nexport const RoomData_Overworld_BOTTOM = [0x24100, 0x241FF];\r\nexport const RoomData_Underworld1      = [0x28000, 0x281FF];\r\nexport const RoomData_ColorDungeon     = [0x2BB77, 0x2BBA2];\r\nexport const RoomData_Leftover         = [0x2BBA3, 0x2BBB8];\r\nexport const RoomData_Underworld2      = [0x2C000, 0x2C1FF];\r\n\r\nconst GetRoomDataPointer = (f, uwID, roomID) => {\r\n\r\n    let startAddr;\r\n    let addr;\r\n    let b1;\r\n    let b2;\r\n    let s1;\r\n    let s2;\r\n    let result = -1;\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    // Underworld pointers start address\r\n    switch (uwID) {\r\n        case 0 : (roomID < 0x80) ?\r\n                    startAddr = RoomData_Overworld_TOP[0] :\r\n                    startAddr = RoomData_Overworld_BOTTOM[0]; break;\r\n        case 1 : startAddr = RoomData_Underworld1[0]; break;\r\n        case 2 : startAddr = RoomData_Underworld2[0]; break;\r\n        case 3 : startAddr = RoomData_ColorDungeon[0]; break;\r\n        default: break;\r\n    }\r\n\r\n    // Address\r\n    addr = startAddr + (roomID*2);\r\n    if ((uwID === 0) && (roomID >= 0x80)) {\r\n        addr = startAddr + ((roomID-0x80)*2);\r\n    }\r\n  \r\n    // Data\r\n    b1 = ReadByteFromFile(f, addr);\r\n    b2 = ReadByteFromFile(f, addr+1);\r\n  \r\n    // Room data address\r\n    s1 = IntToHex(b1);\r\n    s2 = IntToHex(b2);\r\n    result = HexToInt('0x' + s2.charAt(0) + s2.charAt(1) + s1.charAt(0) + s1.charAt(1));\r\n\r\n    return result;\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                        Room Data \r\n//\r\n//                                        Addresses\r\n//\r\n//===================================================================================================\r\n\r\nconst GetRoomDataSpecialAddress = (f, uwID, roomID) => {\r\n\r\n    let addr = 0;    \r\n    \r\n    if (!RoomExists(uwID, roomID)) {\r\n        return addr;\r\n    }\r\n\r\n    switch (uwID) {\r\n        case 0 :\r\n            switch (roomID) {\r\n                case 0x06 : addr = GetRoomDataEndAddress(f, 0, 0x06) + 1; break; //$24496; // Wind Fish Egg\r\n                case 0x0E : addr = GetRoomDataEndAddress(f, 0, 0x0E) + 1; break; //$247EC; // Dungeon 7\r\n                case 0x1B : addr = GetRoomDataEndAddress(f, 0, 0x1B) + 1; break; //$24C0F; // Above Dungeon 4\r\n                case 0x2B : addr = GetRoomDataEndAddress(f, 0, 0x2B) + 1; break; //$2509A; // Dungeon 4\r\n                case 0x79 : addr = GetRoomDataEndAddress(f, 0, 0x79) + 1; break; //$26513; // Castle Entrance\r\n                case 0x8C : addr = GetRoomDataEndAddress(f, 0, 0x8C) + 1; break; //$6834E; // Dungeon 6\r\n                default: break;\r\n            }\r\n            break;\r\n\r\n        default : \r\n            break;\r\n    }\r\n\r\n    return addr;\r\n}\r\n\r\nconst GetRoomDataStartAddress = (f, uwID, roomID, special = false) => {\r\n\r\n    let startAddr = 0;\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return startAddr;\r\n    }\r\n\r\n    if (special) {\r\n        startAddr = GetRoomDataSpecialAddress(f, uwID, roomID);\r\n        return startAddr;\r\n    }\r\n    \r\n    let pAddr = GetRoomDataPointer(f, uwID, roomID);\r\n\r\n    switch (uwID) {\r\n        case 0  : (roomID < 0x80) ?\r\n                      startAddr = GetBankStartAddress(9) - POINTER_OFFSET + pAddr :\r\n                      startAddr = GetBankStartAddress(26) - POINTER_OFFSET + pAddr; break;\r\n        case 1  : startAddr = GetBankStartAddress(10) - POINTER_OFFSET + pAddr; break;\r\n        case 2  : startAddr = GetBankStartAddress(11) - POINTER_OFFSET + pAddr; break;\r\n        case 3  : startAddr = GetBankStartAddress(10) - POINTER_OFFSET + pAddr; break;\r\n        default : throw new Error('GetRoomDataAddress: invalid uwID ' + uwID);\r\n    }\r\n\r\n    return startAddr;\r\n};\r\n\r\nconst GetRoomDataEndAddress = (f, uwID, roomID, special = false) => {\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return 0;\r\n    }\r\n\r\n    let currAddr = GetRoomDataStartAddress(f, uwID, roomID, special);\r\n\r\n    if (currAddr === 0) {\r\n        return 0;\r\n    }\r\n  \r\n    let b = 0x00;\r\n    while (b !== 0xFE) {\r\n        b = ReadByteFromFile(f, currAddr);\r\n        currAddr++;\r\n    }\r\n  \r\n    return currAddr - 1;\r\n};\r\n\r\nconst GetRoomDataAddresses = (f, uwID, roomID) => {\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return {\r\n            startAddr        : 0,\r\n            endAddr          : 0,\r\n            length           : 0,\r\n            specialStartAddr : 0,\r\n            specialEndAddr   : 0,\r\n            specialLength    : 0\r\n        };\r\n    }\r\n\r\n    let startAddr        = GetRoomDataStartAddress(f, uwID, roomID, false);\r\n    let endAddr          = GetRoomDataEndAddress(f, uwID, roomID, false);\r\n    let specialStartAddr = GetRoomDataStartAddress(f, uwID, roomID, true);\r\n    let specialEndAddr   = GetRoomDataEndAddress(f, uwID, roomID, true);\r\n    let length           = endAddr - startAddr + 1;\r\n    let specialLength    = specialEndAddr - specialStartAddr + 1;\r\n\r\n    return {\r\n        startAddr        : startAddr,\r\n        endAddr          : endAddr,\r\n        length           : length,\r\n        specialStartAddr : specialStartAddr,\r\n        specialEndAddr   : specialEndAddr,\r\n        specialLength    : specialLength\r\n    };\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                        Room Data\r\n//\r\n//                                        ROM data\r\n//\r\n//===================================================================================================\r\n\r\nconst GetRoomObjectByAddress = (f, addr, startAddr = -1) => {\r\n    let RO = {};\r\n    let b1 = ReadByteFromFile(f, addr);\r\n    let b2 = ReadByteFromFile(f, addr + 1);\r\n    let b3 = ReadByteFromFile(f, addr + 2);\r\n    let b4 = ReadByteFromFile(f, addr + 3);\r\n    let b5 = ReadByteFromFile(f, addr + 4);\r\n\r\n    // First 2 bytes of the room objects\r\n    if (addr === startAddr) {\r\n        RO = {\r\n            type      : 'TRoomInfoObject',\r\n            debug     : `${IntToHex(b1)} ${IntToHex(b2)}`,\r\n            data      : [b1, b2],\r\n            address   : addr,\r\n            animation : b1,\r\n            floorTile : HighNibble(b2),\r\n            wallTile  : LowNibble(b2),\r\n        };\r\n    }\r\n\r\n    // Transition\r\n    else if ( (b1 >= 0xE0) && (b1 <= 0xEF) ) {\r\n        RO = {\r\n            type     : 'TTransition',\r\n            debug    : `${IntToHex(b1)} ${IntToHex(b2)} ${IntToHex(b3)} ${IntToHex(b4)} ${IntToHex(b5)}`,\r\n            data     : [b1, b2, b3, b4, b5],\r\n            address  : addr,\r\n            viewID   : b1,\r\n            subMapID : b2,\r\n            roomID   : b3,\r\n            x        : b4,\r\n            y        : b5,\r\n        };\r\n    }  \r\n\r\n    // 3 byte object\r\n    else if ( (b1 >= 0x80) && (b1 <= 0x8F) ) {\r\n        RO = {\r\n            type    : 'TRoomObjectSpan',\r\n            debug   : `${IntToHex(b1)} ${IntToHex(b2)} ${IntToHex(b3)}`,\r\n            data    : [b1, b2, b3],\r\n            len     : b1,\r\n            yx      : b2,\r\n            id      : b3,\r\n            address : addr,\r\n            spanX   : b1 - 0x80,\r\n            spanY   : 1,\r\n            x       : HighNibble(b2),\r\n            y       : LowNibble(b2),\r\n        };\r\n    }  \r\n    \r\n    // 3 byte object\r\n    else if ( (b1 >= 0xC0) && (b1 <= 0xCF) ) {\r\n        RO = {\r\n            type    : 'TRoomObjectSpan',\r\n            debug   : `${IntToHex(b1)} ${IntToHex(b2)} ${IntToHex(b3)}`,\r\n            data    : [b1, b2, b3],\r\n            len     : b1,\r\n            yx      : b2,\r\n            id      : b3,\r\n            address : addr,\r\n            spanX   : 1,\r\n            spanY   : b1 - 0xC0,\r\n            x       : HighNibble(b2),\r\n            y       : LowNibble(b2),\r\n        };\r\n    }        \r\n    \r\n    // 2 byte object\r\n    else if (b1 !== 0xFE) {\r\n        RO = {\r\n            type    : 'TRoomObject',\r\n            debug   : `${IntToHex(b1)} ${IntToHex(b2)}`,\r\n            data    : [b1, b2],\r\n            len     : 1,\r\n            yx      : b1,\r\n            id      : b2,\r\n            address : addr,\r\n            spanX   : 1,\r\n            spanY   : 1,\r\n            x       : HighNibble(b1),\r\n            y       : LowNibble(b1),\r\n        };\r\n    }\r\n\r\n    return RO;\r\n};\r\n\r\nexport const GetRoomDataObjects = (f, uwID, roomID, special = false) => {\r\n\r\n    let arr = [];\r\n    let RO = {};\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return arr;\r\n    }\r\n    \r\n    let addresses = GetRoomDataAddresses(f, uwID, roomID);\r\n\r\n    let startAddr;\r\n    if (special) {\r\n        startAddr = addresses.specialStartAddr;\r\n    }\r\n    else {\r\n        startAddr = addresses.startAddr;\r\n    }\r\n\r\n    let addr = startAddr;\r\n\r\n    let b1;\r\n\r\n    while (true) {\r\n        b1 = ReadByteFromFile(f, addr);\r\n\r\n        if (b1 === 0xFE) {\r\n            break;\r\n        }\r\n\r\n        RO = GetRoomObjectByAddress(f, addr, startAddr);\r\n\r\n        switch (RO.type) {\r\n            case 'TRoomInfoObject' : arr.push(RO); addr = addr + 2; break;\r\n            case 'TTransition'     : arr.push(RO); addr = addr + 5; break;\r\n            case 'TRoomObjectSpan' : arr.push(RO); addr = addr + 3; break;\r\n            case 'TRoomObject'     : arr.push(RO); addr = addr + 2; break;\r\n            default : \r\n                console.error(\"[ERROR] GetRoomDataObjects - RoomObject not found!\");\r\n                return;\r\n        }\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\nexport const GetRoomDataInfoObjects = (f, uwID, roomID, special = false) => {\r\n\r\n    let result = [];\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID, special);\r\n\r\n    for (let o of roomDataOL) {\r\n        if (o.type === \"TRoomInfoObject\") {\r\n            result.push(o);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nconst GetRoomDataTiles = (f, uwID, roomID, special = false) => {\r\n\r\n    let result = [];\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID, special);\r\n\r\n    for (let o of roomDataOL) {\r\n        if ((o.type === \"TRoomObject\") || (o.type === \"TRoomObjectSpan\")) {\r\n            result.push(o);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nconst GetRoomDataTransitions = (f, uwID, roomID, special = false) => {\r\n\r\n    let result = [];\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return result;\r\n    }\r\n\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID, special);\r\n\r\n    for (let o of roomDataOL) {\r\n        if (o.type === \"TTransition\") {\r\n            result.push(o);\r\n        }\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                        Room Data\r\n//\r\n//                                         Squares\r\n//\r\n//===================================================================================================\r\n\r\nexport const GetRoomDataSquares = (f, uwID, roomID, special = false) => {\r\n\r\n    if (!RoomExists(uwID, roomID)) {\r\n        return [];\r\n    }\r\n\r\n    const SquareExists = (squareNodes, x, y) => {\r\n        if ((typeof squareNodes[x] !== 'undefined') && (typeof squareNodes[x][y] !== 'undefined')) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }; \r\n    \r\n    const GetSquare = (squareNodes, x, y) => {\r\n        return squareNodes[x][y];\r\n    };\r\n    \r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n    const DrawTopWall = (squareNodes) => {\r\n        let x;\r\n        let y = 0;\r\n        for (x = 0; x <= ROOM_SIZE_X; x++) {\r\n            squareNodes[x][y].tileType = Z4_TILE_SOLID;\r\n            squareNodes[x][y].id = 0x21;\r\n        }\r\n    }\r\n\r\n    const DrawRightWall = (squareNodes) => {\r\n        let x = ROOM_SIZE_X;\r\n        let y;\r\n        for (y = 0; y <= ROOM_SIZE_Y; y++) {\r\n            squareNodes[x][y].tileType = Z4_TILE_SOLID;\r\n            squareNodes[x][y].id = 0x24;\r\n        }\r\n    }\r\n\r\n    const DrawBottomWall = (squareNodes) => {\r\n        let x = 0;\r\n        let y = ROOM_SIZE_Y;\r\n        for (x = 0; x <= ROOM_SIZE_X; x++) {\r\n            squareNodes[x][y].tileType = Z4_TILE_SOLID;\r\n            squareNodes[x][y].id = 0x22;\r\n        }\r\n    }\r\n\r\n    const DrawLeftWall = (squareNodes) => {\r\n        let x = 0;\r\n        let y = 0;\r\n        for (y = 0; y <= ROOM_SIZE_Y; y++) {\r\n            squareNodes[x][y].tileType = Z4_TILE_SOLID;\r\n            squareNodes[x][y].id = 0x23;\r\n        }\r\n    }\r\n\r\n    const DrawWalls = (squareNodes, wallTilesID) => {\r\n\r\n        switch (wallTilesID) {\r\n            case 0 :\r\n                DrawTopWall(squareNodes);\r\n                DrawRightWall(squareNodes);\r\n                DrawBottomWall(squareNodes);\r\n                DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 1 :\r\n                // DrawTopWall(squareNodes);\r\n                DrawRightWall(squareNodes);\r\n                DrawBottomWall(squareNodes);\r\n                DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 2 :\r\n                DrawTopWall(squareNodes);\r\n                // DrawRightWall(squareNodes);\r\n                DrawBottomWall(squareNodes);\r\n                DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 3 :\r\n                DrawTopWall(squareNodes);\r\n                DrawRightWall(squareNodes);\r\n                // DrawBottomWall(squareNodes);\r\n                DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 4 :\r\n                DrawTopWall(squareNodes);\r\n                DrawRightWall(squareNodes);\r\n                DrawBottomWall(squareNodes);\r\n                // DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 5 :\r\n                // DrawTopWall(squareNodes);\r\n                // DrawRightWall(squareNodes);\r\n                DrawBottomWall(squareNodes);\r\n                DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 6 :\r\n                // DrawTopWall(squareNodes);\r\n                DrawRightWall(squareNodes);\r\n                DrawBottomWall(squareNodes);\r\n                // DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 7 :\r\n                DrawTopWall(squareNodes);\r\n                DrawRightWall(squareNodes);\r\n                // DrawBottomWall(squareNodes);\r\n                // DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 8 :\r\n                DrawTopWall(squareNodes);\r\n                // DrawRightWall(squareNodes);\r\n                // DrawBottomWall(squareNodes);\r\n                DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            case 9 :\r\n                // DrawTopWall(squareNodes);\r\n                // DrawRightWall(squareNodes);\r\n                // DrawBottomWall(squareNodes);\r\n                // DrawLeftWall(squareNodes);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // let x = 0;\r\n        // let y = 0;\r\n        // for (y = 0; y <= ROOM_SIZE_Y; y++) {\r\n        //     squareNodes[x][y].tileType = Z4_TILE_SOLID;\r\n        //     squareNodes[x][y].id = 0x23;\r\n        // }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n    const FillOverworldDefaultSquares = (squareNodes, floorRow, floorTile, uwID) => {\r\n        let id = HexToInt(IntToHex(floorRow, 1) + IntToHex(floorTile, 1));\r\n\r\n        for (let y = 0; y <= ROOM_SIZE_Y; y++)\r\n            for (let x = 0; x <= ROOM_SIZE_X; x++) {\r\n                squareNodes[x][y].id = id;\r\n                squareNodes[x][y].tileType = GetTileType(uwID, id);\r\n            }\r\n    }\r\n\r\n    const FillDungeonDefaultSquares = (squareNodes, wallTile, floorTile, uwID) => {\r\n        let id = HexToInt(IntToHex(floorTile, 1));\r\n\r\n        for (let y = 0; y <= ROOM_SIZE_Y; y++)\r\n            for (let x = 0; x <= ROOM_SIZE_X; x++) {\r\n                squareNodes[x][y].id = id;\r\n                squareNodes[x][y].tileType = GetTileType(uwID, id);\r\n            }\r\n                \r\n        DrawWalls(squareNodes, wallTile);\r\n    }\r\n\r\n    const FillActualSquares = (squareNodes, id, uwID, roomID, startX, startY, amountX, amountY) => {\r\n\r\n        let x;\r\n        let y = startY;\r\n        let square;\r\n\r\n        for (let i = 1; i <= amountY; i++) {\r\n            x = startX;\r\n            for (let j = 1; j <= amountX; j++) {\r\n                if (SquareExists(squareNodes, x, y)) {\r\n                    square = GetSquare(squareNodes, x, y);\r\n                    square.id = id;\r\n                    square.tileType = GetTileType(uwID, id);\r\n                    // square.hexID = IntToHex(id, 2);\r\n                \r\n                    // if (square.id in [LA_TILE_Chest1, LA_TILE_Chest2]) {\r\n                        //square.chestContent = GetChestContent(square.uwID, square.roomID);\r\n                    // }\r\n                }\r\n                x++;\r\n            }\r\n            y++;\r\n        }\r\n    }\r\n\r\n    const FillSquareInfo = (squareNodes, uwID, roomID, RO, spanX, spanY) => {\r\n\r\n        let x = RO.x;\r\n        let y = RO.y;\r\n        let square;\r\n\r\n        // If x or y is $F, then it's really -1\r\n        if (x === 0xF)\r\n            x = -1;\r\n\r\n        if (y === 0xF) \r\n            y = -1;\r\n\r\n        // Overworld\r\n        if (uwID === 0) {\r\n            switch(RO.id) {\r\n                // 2x2\r\n                case 0xF5 :\r\n                case 0xFA :\r\n                case 0xFB : \r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (2 * spanX), (2 * spanY)); \r\n                    break;\r\n\r\n                // 3x2\r\n                case 0xF8 :\r\n                case 0xF9 :\r\n                case 0xFD : \r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (3 * spanX), (2 * spanY));\r\n                    break;\r\n\r\n                // 3x3\r\n                case 0xF7 :\r\n                case 0xFC :\r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (3 * spanX), (3 * spanY));\r\n                    break;\r\n\r\n                // 5x3\r\n                case 0xF6 :\r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (5 * spanX), (3 * spanY));\r\n                    break;\r\n\r\n                // 1x1\r\n                default : \r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (1 * spanX), (1 * spanY));\r\n            }\r\n\r\n            // Add transition openings to these special tiles\r\n            switch (RO.id) {\r\n                case 0xF6 :\r\n                    if (SquareExists(squareNodes, x+1, y+2)) {\r\n                        square = GetSquare(squareNodes, x+1, y+2)\r\n                        square.id = 0xE2;\r\n                        square.tileType = GetTileType(uwID, 0xE2);\r\n                        // square.hexID = '$E2';\r\n                        square.isHouse = true;\r\n                    }\r\n                    if (SquareExists(squareNodes, x+3, y+2)) {\r\n                        square = GetSquare(squareNodes, x+3, y+2)\r\n                        square.id = 0xE2;\r\n                        square.tileType = GetTileType(uwID, 0xE2);\r\n                        // square.hexID = '$E2';\r\n                        square.isHouse = true;\r\n                    }\r\n                    break;\r\n\r\n                case 0xF7 :\r\n                    if (SquareExists(squareNodes, x+1, y+2)) {\r\n                        square = GetSquare(squareNodes, x+1, y+2)\r\n                        square.id = 0xE2;\r\n                        square.tileType = GetTileType(uwID, 0xE2);\r\n                        // square.hexID = '$E2';\r\n                        square.isHouse = true;\r\n                    }\r\n                    break;\r\n\r\n\r\n                case 0xF8 :\r\n                case 0xF9 :\r\n                case 0xFD :\r\n                    if (SquareExists(squareNodes, x+1, y+1)) {\r\n                        square = GetSquare(squareNodes, x+1, y+1)\r\n                        square.id = 0xE2;\r\n                        square.tileType = GetTileType(uwID, 0xE2);\r\n                        // square.hexID = '$E2';\r\n                        square.isHouse = true;\r\n                    }\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Dungeon\r\n        else {\r\n            switch (RO.id) {\r\n                // 2x1\r\n                case LA_TILE_KEYDOOR_1:\r\n                case LA_TILE_KEYDOOR_2:\r\n                case LA_TILE_DOOR_LOCKS_1:\r\n                case LA_TILE_DOOR_LOCKS_2:\r\n                case LA_TILE_OPENDOOR_1:\r\n                case LA_TILE_OPENDOOR_2:\r\n                case LA_TILE_NIGHTMARE_DOOR:\r\n                case LA_TILE_ONEWAYDOOR_CAN:\r\n                case LA_TILE_ONEWAYDOOR_CANNOT:\r\n                case LA_TILE_CAVE_ENTRANCE:\r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (2 * spanX), (1 * spanY));\r\n                    break;\r\n\r\n                // 1x2\r\n                case LA_TILE_KEYDOOR_3:\r\n                case LA_TILE_KEYDOOR_4:\r\n                case LA_TILE_DOOR_LOCKS_3:\r\n                case LA_TILE_DOOR_LOCKS_4:\r\n                case LA_TILE_OPENDOOR_3:\r\n                case LA_TILE_OPENDOOR_4:\r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (1 * spanX), (2 * spanY));  \r\n                    break;\r\n\r\n                // 4x3\r\n                case LA_TILE_DUNGEON_ENTRANCE:\r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (4 * spanX), (3 * spanY));\r\n                    break;\r\n                    \r\n                // 1x1\r\n                default:\r\n                    FillActualSquares(squareNodes, RO.id, uwID, roomID, x, y, (1 * spanX), (1 * spanY));\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n    const FillRoomInfoSquares = (roomDataOL, squareNodes, uwID, roomID) => {\r\n\r\n        roomDataOL.forEach(o => {\r\n            if (o.type === 'TRoomInfoObject') {\r\n                if ((roomID !== 0) || ([0, 3].includes(uwID))) {\r\n                    if (uwID === 0) {\r\n                       FillOverworldDefaultSquares(squareNodes, o.wallTile, o.floorTile, uwID)  \r\n                    }\r\n                    else if (!((uwID === 3) && (roomID === 0x16))) {                                          // HACK - Added new room for ColorDungeon\r\n                       FillDungeonDefaultSquares(squareNodes, o.wallTile, o.floorTile, uwID) \r\n                    }\r\n                }\r\n            }\r\n            \r\n            else if ((o.type === 'TRoomObject') || (o.type === 'TRoomObjectSpan')) {\r\n                FillSquareInfo(squareNodes, uwID, roomID, o, o.spanX, o.spanY);\r\n            }      \r\n            \r\n            else if (o.type === 'TTransition') {\r\n                // Do this later as we need all squares first to determine warp order.\r\n            }\r\n    \r\n            else {\r\n                console.error('ERROR: GetRoomDataSquares - Object has an unchecked type!');\r\n                console.error(o);\r\n            }\r\n        });    \r\n    }\r\n\r\n    const FillTransitionHacks = (squareNodes) => {\r\n\r\n        //============================================================================\r\n        // TRANSITIONS not in data\r\n        //============================================================================\r\n\r\n        for (let y = 0; y <= ROOM_SIZE_Y; y++) {\r\n            for (let x = 0; x <= ROOM_SIZE_X; x++) {\r\n                let o = squareNodes[x][y];\r\n\r\n                //  Dream house left of bed\r\n                if (((o.uwID === 2) && (o.roomID === 0xAA) && (o.id === 0x12))) {\r\n                    o.transition = {\r\n                        type     : 'TTransition',\r\n                        debug    : `${IntToHex(0xE1)} ${IntToHex(0x11)} ${IntToHex(0xCE)} ${IntToHex(0x48)} ${IntToHex(0x7C)}`,\r\n                        data     : [0xE1, 0x11, 0xCE, 0x48, 0x7C],\r\n                        address  : -1,\r\n                        viewID   : 0xE1,\r\n                        subMapID : 0x11,\r\n                        roomID   : 0xCE,\r\n                        x        : 0x48,\r\n                        y        : 0x7C,\r\n                    }\r\n                }\r\n        \r\n                // Fisherman under the bridge\r\n                else if (((o.uwID === 0) && (o.roomID === 0xEA) && (o.roomX === 6) && (o.roomY === 2))) {\r\n                    o.transition = {\r\n                        type     : 'TTransition',\r\n                        debug    : `${IntToHex(0xE2)} ${IntToHex(0x11)} ${IntToHex(0xF5)} ${IntToHex(0x90)} ${IntToHex(0x50)}`,\r\n                        data     : [0xE2, 0x11, 0xF5, 0x90, 0x50],\r\n                        address  : -1,\r\n                        viewID   : 0xE2,\r\n                        subMapID : 0x11,\r\n                        roomID   : 0xF5,\r\n                        x        : 0x90,\r\n                        y        : 0x50,\r\n                    }\r\n                }\r\n        \r\n                // Outside D5 - Underwater 1\r\n                else if (((o.uwID === 0) && (o.roomID === 0xD9) && (o.roomX === 2) && (o.roomY === 5))) {\r\n                    o.transition = {\r\n                        type     : 'TTransition',\r\n                        debug    : `${IntToHex(0xE2)} ${IntToHex(0x11)} ${IntToHex(0xC0)} ${IntToHex(0x28)} ${IntToHex(0x10)}`,\r\n                        data     : [0xE2, 0x11, 0xC0, 0x28, 0x10],\r\n                        address  : -1,\r\n                        viewID   : 0xE2,\r\n                        subMapID : 0x11,\r\n                        roomID   : 0xC0,\r\n                        x        : 0x28,\r\n                        y        : 0x10,\r\n                    }\r\n                }\r\n        \r\n                // Outside D5 - Underwater 2\r\n                else if (((o.uwID === 0) && (o.roomID === 0xD9) && (o.roomX === 4) && (o.roomY === 5))) {\r\n                    o.transition = {\r\n                        type     : 'TTransition',\r\n                        debug    : `${IntToHex(0xE2)} ${IntToHex(0x11)} ${IntToHex(0xC1)} ${IntToHex(0x48)} ${IntToHex(0x10)}`,\r\n                        data     : [0xE2, 0x11, 0xC1, 0x48, 0x10],\r\n                        address  : -1,\r\n                        viewID   : 0xE2,\r\n                        subMapID : 0x11,\r\n                        roomID   : 0xC1,\r\n                        x        : 0x48,\r\n                        y        : 0x10,\r\n                    }\r\n                }\r\n        \r\n                // Richard's House, inside\r\n                else if (((o.uwID === 2) && (o.roomID === 0xC7) && (o.roomX === 7) && (o.roomY === 1))) {\r\n                    o.transition = {\r\n                        type     : 'TTransition',\r\n                        debug    : `${IntToHex(0xE2)} ${IntToHex(0x11)} ${IntToHex(0xD8)} ${IntToHex(0x80)} ${IntToHex(0x70)}`,\r\n                        data     : [0xE2, 0x11, 0xD8, 0x80, 0x70],\r\n                        address  : -1,\r\n                        viewID   : 0xE2,\r\n                        subMapID : 0x11,\r\n                        roomID   : 0xD8,\r\n                        x        : 0x80,\r\n                        y        : 0x70,\r\n                    }\r\n                }\r\n        \r\n                //        /* Well Heart */\r\n                //        else if (square.uwID = 0) and (square.roomID = $A0) and (square.id in [$61]) then\r\n                //          square.transition := TTransitionObject.Create($E2, $11, $A4, $50, $50)\r\n                \r\n                //        /* Sign Puzzle */\r\n                //        else if (square.uwID = 0) and (square.roomID = $D4) and (square.roomX = 8) and (square.roomY = 2) then\r\n                //          square.transition := TTransitionObject.Create($E2, $11, $FB, $80, $70)\r\n                \r\n                //        /* Water Heart Cave - Technically exists in RoomData, but it needs multiple exits. */\r\n                //        else if ((square.uwID = UW_1) and (square.roomID = $F2) and ((square.roomY = 0) or (square.roomY = 7))) then\r\n                //          square.transition := TTransition.Create($E0, $00, $2E, $58, $20)\r\n                \r\n                        ///* Boomerang Moblin - Technically exists in RoomData, but it needs multiple exits. */\r\n                        //else if ((square.uwID = UW_1) and (square.roomID = $F5) and ((square.roomY = 0) or (square.roomY = 7))) then\r\n                        //  square.transition := TTransition.Create($E0, $00, $F4, $18, $20);\r\n            }\r\n        };\r\n    };\r\n\r\n    const DetermineIfTransition = (squareNodes) => {\r\n        for (let y = 0; y <= ROOM_SIZE_Y; y++) {\r\n            for (let x = 0; x <= ROOM_SIZE_X; x++) {\r\n                let o = squareNodes[x][y];\r\n\r\n                let result = false;\r\n\r\n                if (o.uwID === 0) {\r\n\r\n                    /* Staircase */\r\n                    if (o.id === LA_TILE_STAIRCASE1) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Staircase */\r\n                    if (o.id === LA_TILE_STAIRCASE2) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Cave / house entrance */\r\n                    if ([LA_TILE_TRANSITION0, LA_TILE_TRANSITION1, 0xE3, 0xBA].includes(o.id)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Transition to wind fish egg */\r\n                    if (o.id === LA_TILE_EGGWALL) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Sign Puzzle to Frog Song */\r\n                    if ((o.roomID === 0xD4) && (o.roomX === 8) && (o.roomY === 2)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Transition under a bush */\r\n                    if ([0x07, 0x4A, 0xAA].includes(o.roomID) && (o.id === LA_TILE_SPECIALGRASS)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Transition under a rock */\r\n                    if ([0x04, 0x15, 0x52].includes(o.roomID) && (o.id === LA_TILE_POT)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Outside D5 - Underwater 1 */\r\n                    if ([0xD9].includes(o.roomID) && (o.roomX === 2) && (o.roomY === 5)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Outside D5 - Underwater 2 */\r\n                    if ([0xD9].includes(o.roomID) && (o.roomX === 4) && (o.roomY === 5)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Fisherman under the bridge */\r\n                    if ([0xEA].includes(o.roomID) && (o.roomX === 6) && (o.roomY === 2)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Well Heart */\r\n                    if ([0xA0].includes(o.roomID) && (o.id === LA_TILE_WELL)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Rooster Statue Staircase */\r\n                    if ([0x92].includes(o.roomID) && (o.roomX === 5) && (o.roomY === 4)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Tal Tal Mountain pit transition into the water cave with a piece of heart. */\r\n                    if ([0x1E].includes(o.roomID) && (o.tileType === Z4_TILE_PIT)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Cave under the grave */\r\n                    if ([0x76].includes(o.roomID) && (o.id === 0xC5)) {\r\n                        result = true;\r\n                    }\r\n                \r\n                    /* Color dungeon grave */\r\n                    if ([0x77].includes(o.roomID) && (o.roomX === 7) && (o.roomY === 1)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Outside D5 - Underwater 1 */\r\n                    if ((o.roomID === 0xD9) && (o.roomX === 2) && (o.roomY === 5)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Outside D5 - Underwater 2 */\r\n                    if ((o.roomID === 0xD9) && (o.roomX === 4) && (o.roomY === 5)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Fisherman under the bridge */\r\n                    if ((o.roomID === 0xEA) && (o.roomX === 6) && (o.roomY === 2)) {\r\n                        result = true;\r\n                    }\r\n                }\r\n                else if (o.uwID === 1) {\r\n                    /* Water heart cave exit - make it only one */\r\n                    if ((o.roomID === 0xF2) && (o.roomX === 4) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Boomerang moblin exit - make it only one */\r\n                    if ((o.roomID === 0xF5) && (o.roomX === 4) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n                    \r\n                    /* Dungeon 5 - Deep water transition...hidden from room data x=$05, y=$04 */\r\n                    if ((o.roomID === 0x8D) && (o.roomX === 5) && (o.roomY === 4)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D1 */\r\n                    if ((o.roomID === 0x18) && (o.roomX === 2) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D1 */\r\n                    if ((o.roomID === 0x19) && (o.roomX === 7) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D1 */\r\n                    if ((o.roomID === 0x1B) && (o.roomX === 7) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D2 */\r\n                    if ((o.roomID === 0x3A) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D2 */\r\n                    if ((o.roomID === 0x3B) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D2 */\r\n                    if ((o.roomID === 0x3C) && (o.roomX === 1) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D2 */\r\n                    if ((o.roomID === 0x3D) && (o.roomX === 8) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D2 */\r\n                    if ((o.roomID === 0x3E) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D2 */\r\n                    if ((o.roomID === 0x3F) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D3 */\r\n                    if ((o.roomID === 0xAA) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D3 */\r\n                    if ((o.roomID === 0xAB) && (o.roomX === 8) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D4 */\r\n                    if ((o.roomID === 0xEF) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D4 */\r\n                    if ((o.roomID === 0x7D) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D4 */\r\n                    if ((o.roomID === 0x1E) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D4 */\r\n                    if ((o.roomID === 0x1F) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D4 */\r\n                    if ((o.roomID === 0x5E) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D4 */\r\n                    if ((o.roomID === 0x5F) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA2) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA3) && (o.roomX === 3) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA4) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA5) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA6) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA7) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA8) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D5 */\r\n                    if ((o.roomID === 0xA9) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D6 */\r\n                    if ((o.roomID === 0xD8) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D6 */\r\n                    if ((o.roomID === 0xD9) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D6 */\r\n                    if ((o.roomID === 0xDA) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D6 */\r\n                    if ((o.roomID === 0xDB) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D6 */\r\n                    if ((o.roomID === 0xDC) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D6 */\r\n                    if ((o.roomID === 0xDD) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave Below castle */\r\n                    if ((o.roomID === 0xEB) && (o.roomX === 1) && (o.roomY === 2)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave Below castle */\r\n                    if ((o.roomID === 0xEC) && (o.roomX === 6) && (o.roomY === 2)) {\r\n                        result = true;\r\n                    }\r\n                }\r\n                else if (o.uwID === 2) {\r\n                    /* Richard's House, inside */\r\n                    if ((o.roomID === 0xC7) && (o.roomX === 7) && (o.roomY === 1)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Dream house left of bed */\r\n                    if ((o.roomID === 0xAA) && (o.id === 0x12)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Level 7 Boss exit */\r\n                    if ((o.roomID === 0xF8) && (o.roomX === 4) && (o.roomY === 4)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x60) && (o.roomX === 1) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x61) && (o.roomX === 8) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x62) && (o.roomX === 1) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x63) && (o.roomX === 8) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x64) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x65) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x66) && (o.roomX === 1) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x67) && (o.roomX === 8) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x68) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x69) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x6A) && (o.roomX === 1) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - D8 */\r\n                    if ((o.roomID === 0x6B) && (o.roomX === 8) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave Mansion */\r\n                    if ((o.roomID === 0xE9) && (o.roomX === 0) && (o.roomY === 6)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave Manbo */\r\n                    if ((o.roomID === 0xFD) && (o.roomX === 0) && (o.roomY === 2)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave Fishing Game */\r\n                    if ((o.roomID === 0xB1) && (o.roomX === 9) && (o.roomY === 1)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave below D5 */\r\n                    if ((o.roomID === 0xC0) && (o.roomX === 4) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave Below D5 */\r\n                    if ((o.roomID === 0xC1) && (o.roomX === 4) && (o.roomY === 0)) {\r\n                        result = true;\r\n                    }\r\n\r\n                    /* Minidungeon - Cave Below D5 */\r\n                    if ((o.roomID === 0xF5) && (o.roomX === 9) && (o.roomY === 4)) {\r\n                        result = true;\r\n                    }\r\n                }\r\n                \r\n                /* Common in underworld 1, 2 and 3 */\r\n                if (o.uwID !== 0) {\r\n                    /* Pit Transition */\r\n                    if ([LA_TILE_PITTRANSITION1, LA_TILE_PITTRANSITION2, LA_TILE_PITTRANSITION3, LA_TILE_PITTRANSITION4].includes(o.id)) {\r\n                        result = true;\r\n                    }\r\n    \r\n                    /* Stairs */\r\n                    if ([0x2D, 0x37, 0xBE, 0xBF, 0xCB, 0xA2, 0xA3, 0xA8, 0xFD].includes(o.id)) {\r\n                        result = true;\r\n                    }\r\n    \r\n                    /* Dungeon Entrance */\r\n                    if ([LA_TILE_DUNGEON_ENTRANCE].includes(o.id) && (o.roomX === 5) && (o.roomY === 7)) {\r\n                        result = true;\r\n                    }\r\n                }\r\n\r\n                o.isTransition = result;            \r\n            }\r\n        }\r\n    };\r\n\r\n    const FillTransitionsFromData = (roomDataOL, squareNodes) => {\r\n        let square;\r\n        let square2;\r\n\r\n        //============================================================================\r\n        // TRANSITIONS in data\r\n        //============================================================================\r\n\r\n        // Get all data transitions\r\n        let transitionDataArr = roomDataOL.filter(o => o.type === 'TTransition').map(o => clone(o));\r\n\r\n        // Get all tile transitions \r\n        let transitionTileArr = [];\r\n        for (let y = 0; y <= ROOM_SIZE_Y; y++) {\r\n            for (let x = 0; x <= ROOM_SIZE_X; x++) {\r\n                let o = squareNodes[x][y];\r\n                if (o.isTransition) {\r\n                    transitionTileArr.push(o);\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((transitionDataArr.length > 0) && (transitionTileArr.length > 0)) {\r\n            // console.log(`Count: ${transitionTileArr[0].uwID} ${IntToHex(transitionTileArr[0].roomID)} - ${transitionDataArr.length} ${transitionTileArr.length}`);\r\n\r\n            /* 1st: Nonhouses, NonMinidungeons, NonTransitionPits */\r\n            for (let i = 0; i < transitionTileArr.length; i++) {\r\n                square = transitionTileArr[i];\r\n                \r\n                /* If a transition already exists, don't do this (transitions not in data) */\r\n                if (square.transition) {\r\n                    transitionTileArr.splice(i, 1);\r\n                    i--;\r\n                    continue;\r\n                }\r\n\r\n                if (\r\n                    (!square.isHouse) &&\r\n                    (square.mapCategory !== 2) &&\r\n                    (!LA_TILESET_PITTRANSITIONS.includes(square.id))\r\n                ) {\r\n                    if (transitionDataArr.length === 0) {\r\n                        console.log('Ran out of transitions? Non-houses');\r\n                        break;\r\n                    }\r\n                    \r\n                    /* Caves have two tiles of the same transition */\r\n                    if (square.id === 0xFD) {\r\n                        for (let j = 0; j < transitionTileArr.length; j++) {\r\n                            square2 = transitionTileArr[j];\r\n                            if (square2.id === 0xFD) {\r\n                                square2.transition = transitionDataArr[0];\r\n                                transitionTileArr.splice(j, 1);\r\n                                j--;\r\n                            }\r\n                        }\r\n                        transitionDataArr.shift();\r\n                        i = -1;\r\n                    }\r\n                    else {    \r\n                        square.transition = transitionDataArr[0];\r\n\r\n                        /* Randomizer version 0.36 and below have two staircaes in sign post maze, but one transition object */\r\n                        if ((square.roomID === 0xD4) && (square.uwID === 0)) {\r\n                            transitionTileArr.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                        else {\r\n                            transitionDataArr.shift();\r\n                            transitionTileArr.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* 2nd: Houses */\r\n            for (let i = 0; i < transitionTileArr.length; i++) {\r\n                square = transitionTileArr[i];\r\n\r\n                /* If a transition already exists, don't do this (transitions not in data) */\r\n                if (square.transition) {\r\n                    transitionTileArr.splice(i, 1);\r\n                    i--;\r\n                    continue;\r\n                }\r\n\r\n                if (\r\n                    (square.isHouse)\r\n                ) {\r\n                    if (transitionDataArr.length === 0) {\r\n                        console.log('Ran out of transitions? Houses');\r\n                        break;\r\n                    }\r\n                    square.transition = transitionDataArr[0];\r\n                    transitionDataArr.shift();\r\n                }\r\n            }\r\n\r\n            /* 3rd: Transition Pits and Minidungeon - Multiple squares, same transition */\r\n            for (let i = 0; i < transitionTileArr.length; i++) {\r\n                square = transitionTileArr[i];\r\n\r\n                /* If a transition already exists, don't do this (transitions not in data) */\r\n                if (square.transition) {\r\n                    transitionTileArr.splice(i, 1);\r\n                    i--;\r\n                    continue;\r\n                }\r\n\r\n                if (\r\n                    (square.mapCategory === 2) ||\r\n                    (LA_TILESET_PITTRANSITIONS.includes(square.id))\r\n                ) {\r\n\r\n                    /* Pits and minidungeons grab the final transition in the room.  For a fun\r\n                        example, look at uwID=2, roomID=0x1A where a staircase and pit exists,\r\n                        but only one transition object exists.  They both use it, but pits do\r\n                        not use the transition X and Y values. */\r\n                    transitionDataArr = roomDataOL.filter(o => o.type === 'TTransition').map(o => clone(o));\r\n\r\n                    if (transitionDataArr.length === 0) {\r\n                        console.log('Ran out of transitions? Pits and Minidungeons');\r\n                        break;\r\n                    }\r\n\r\n                    square.transition = transitionDataArr[transitionDataArr.length - 1];\r\n                }\r\n            } \r\n        }\r\n    };\r\n\r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID, special);\r\n    let squareNodes = create2DArray(ROOM_SIZE_X +1, ROOM_SIZE_Y+1, {\r\n        id : 0, //-1,\r\n        uwID : uwID,\r\n        roomID : roomID,\r\n        tileType : Z4_TILE_TRANS,\r\n    });\r\n\r\n    for (let y = 0; y <= ROOM_SIZE_Y; y++) {\r\n        for (let x = 0; x <= ROOM_SIZE_X; x++) {\r\n            squareNodes[x][y].uwID = uwID;\r\n            squareNodes[x][y].roomID = roomID;\r\n            squareNodes[x][y].x = x;\r\n            squareNodes[x][y].y = y;\r\n            squareNodes[x][y].roomX = x % 10;\r\n            squareNodes[x][y].roomY = y % 8;\r\n        }\r\n    }\r\n\r\n    FillRoomInfoSquares(roomDataOL, squareNodes, uwID, roomID);\r\n    FillTransitionHacks(squareNodes);\r\n    DetermineIfTransition(squareNodes);\r\n    FillTransitionsFromData(roomDataOL, squareNodes);\r\n\r\n    return squareNodes;\r\n};\r\n\r\nexport const GetRoomDataGameBoardSquares = (f, uwID, roomID, special = false) => {\r\n    let arr2 = [];\r\n    let x;\r\n    let y;\r\n    let arr = GetRoomDataSquares(f, uwID, roomID, special);\r\n    \r\n    for (x = 0; x <= ROOM_SIZE_X; x++) {\r\n        for (y = 0; y <= ROOM_SIZE_Y; y++) {\r\n            arr2.push({\r\n                x : arr[x][y].x,\r\n                y : arr[x][y].y,\r\n                roomX : arr[x][y].x,\r\n                roomY : arr[x][y].y,\r\n                hexID : IntToHex(arr[x][y].id),\r\n                id : arr[x][y].id,\r\n                tileType: GetTileType(arr[x][y].uwID, arr[x][y].id),\r\n                uwID : arr[x][y].uwID,\r\n                roomID : arr[x][y].roomID,\r\n                mapCategory : Z4_MAPCATEGORY[arr[x][y].uwID][arr[x][y].roomID],\r\n                dungeonNum : Z4_DUNGEONNUMBER[arr[x][y].uwID][arr[x][y].roomID],\r\n                roomType : Z4_ROOMTYPES[arr[x][y].uwID][arr[x][y].roomID],\r\n                connectorType : Z4_ConnectorTYPES[arr[x][y].uwID][arr[x][y].roomID],\r\n                isTransition : arr[x][y].isTransition,\r\n                transition : arr[x][y].transition,\r\n            });\r\n        }\r\n    }\r\n\r\n    return arr2;\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                 Room Object - [TRoomObject]\r\n//\r\n//===================================================================================================\r\n\r\nexport const GetRoomObjectByID = (f, uwID, roomID, id) => {\r\n    let result = undefined;\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID);\r\n\r\n    roomDataOL.forEach(o => {\r\n        if ((o.type === \"TRoomObject\") || (o.type === \"TRoomObjectSpan\")) {\r\n            if (o.id === id) {\r\n                result = o;\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\nexport const GetRoomObjectByYXID = (f, uwID, roomID, yx, id) => {\r\n    let result = undefined;\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID);\r\n\r\n    roomDataOL.forEach(o => {\r\n        if ((o.type === \"TRoomObject\") || (o.type === \"TRoomObjectSpan\")) {\r\n            if ((o.yx === yx) && (o.id === id)) {\r\n                result = o;\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\nexport const SetRoomObject = (f, RoomObject) => {\r\n    let RoomObject2 = GetRoomObjectByAddress(f, RoomObject.address);\r\n\r\n    let addr = RoomObject.address;\r\n    let b1;\r\n    let b2;\r\n    let b3;\r\n\r\n    if (RoomObject2.len !== 1) {\r\n        b1 = (RoomObject.len === 1) ? 0xC1 : RoomObject.len;\r\n        b2 = RoomObject.yx;\r\n        b3 = RoomObject.id;\r\n        WriteBytesToFile(f, addr, [b1, b2, b3]);\r\n    }\r\n    else {\r\n        b2 = RoomObject.yx;\r\n        b3 = RoomObject.id;\r\n        WriteBytesToFile(f, addr, [b2, b3]);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const SetRoomObjects = (f, uwID, roomID, RoomObjectsOL) => {\r\n    let addresses = GetRoomDataAddresses(f, uwID, roomID);\r\n    let addr = addresses.startAddr;\r\n\r\n    RoomObjectsOL.forEach(RO => {\r\n        WriteBytesToFile(f, addr, RO.data);\r\n        addr = addr + RO.data.length;\r\n    });\r\n\r\n    WriteBytesToFile(f, addr, [0xFE]);\r\n    addr = addr + 1;\r\n\r\n    for (addr; addr <= addresses.endAddr; addr++) {\r\n        WriteBytesToFile(f, addr, [0x00]);\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const ReplaceRoomObject = (f, uwID, roomID, yx, id, newYX, newID) => {\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID);\r\n    let roomDataOLFiltered = roomDataOL.filter(o => ((o.yx === yx) && (o.id === id)));\r\n\r\n    let RO;\r\n    if (roomDataOLFiltered.length <= 0) {\r\n        console.error('Could not find room object!');\r\n        return;\r\n    }\r\n\r\n    RO = roomDataOLFiltered[0];\r\n\r\n    RO.x = HighNibble(newYX);\r\n    RO.y = LowNibble(newYX);\r\n    RO.id = newID;\r\n\r\n    SetRoomObject(f, RO);\r\n};\r\n\r\nexport const CreateRoomObject = (arr, type) => {\r\n\r\n    let RO = undefined;\r\n    \r\n    let b1 = arr[0];\r\n    let b2 = arr[1];\r\n    let b3 = arr[2];\r\n    let b4 = arr[3];\r\n    let b5 = arr[4];\r\n\r\n    switch (type) {\r\n        case 'TRoomInfoObject' : \r\n            RO = {\r\n                type      : 'TRoomInfoObject',\r\n                debug     : `${IntToHex(b1)} ${IntToHex(b2)}`,\r\n                data      : [b1, b2],\r\n                // address   : addr,\r\n                animation : b1,\r\n                floorTile : HighNibble(b2),\r\n                wallTile  : LowNibble(b2),\r\n            };\r\n            break;\r\n\r\n        case 'TTransition' : \r\n            RO = {\r\n                type     : 'TTransition',\r\n                debug    : `${IntToHex(b1)} ${IntToHex(b2)} ${IntToHex(b3)} ${IntToHex(b4)} ${IntToHex(b5)}`,\r\n                data     : [b1, b2, b3, b4, b5],\r\n                // address  : addr,\r\n                viewID   : b1,\r\n                subMapID : b2,\r\n                roomID   : b3,\r\n                x        : b4,\r\n                y        : b5,\r\n            };\r\n            break;\r\n\r\n        case 'TRoomObjectSpan' : \r\n            RO = {\r\n                type    : 'TRoomObjectSpan',\r\n                debug   : `${IntToHex(b1)} ${IntToHex(b2)} ${IntToHex(b3)}`,\r\n                data    : [b1, b2, b3],\r\n                len     : b1,\r\n                yx      : b2,\r\n                id      : b3,\r\n                // address : addr,\r\n                // spanX   : b1 - 0x80,\r\n                // spanY   : 1,\r\n                x       : HighNibble(b2),\r\n                y       : LowNibble(b2),\r\n            };\r\n            break;\r\n\r\n        case 'TRoomObject' :\r\n            RO = {\r\n                type    : 'TRoomObject',\r\n                debug   : `${IntToHex(b1)} ${IntToHex(b2)}`,\r\n                data    : [b1, b2],\r\n                len     : 1,\r\n                yx      : b1,\r\n                id      : b2,\r\n                // address : addr,\r\n                spanX   : 1,\r\n                spanY   : 1, // spanY   : b1 - 0xC0,\r\n                x       : HighNibble(b1),\r\n                y       : LowNibble(b1),   \r\n            } \r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return RO;\r\n};\r\n\r\nexport const RemoveRoomObject = (f, uwID, roomID, yx, id) => {\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID);\r\n    let roomDataOLFiltered = roomDataOL.filter(o => !((o.yx === yx) && (o.id === id)));\r\n\r\n    if (roomDataOL.length === roomDataOLFiltered.length) {\r\n        console.error(\"Did not remove any room object!\");\r\n        return;\r\n    }\r\n    \r\n    SetRoomObjects(f, uwID, roomID, roomDataOLFiltered);\r\n};\r\n\r\nexport const AddRoomObject = (f, uwID, roomID, RO) => {\r\n    let roomDataOL = GetRoomDataObjects(f, uwID, roomID);\r\n    roomDataOL.push(RO);\r\n    SetRoomObjects(f, uwID, roomID, roomDataOL);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//===================================================================================================\r\n//\r\n//                                            TESTS\r\n//\r\n//===================================================================================================\r\n\r\nexport const TEST_GetRoomDataPointer = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let addr;\r\n    let arr = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            addr = GetRoomDataPointer(f, uwID, roomID);\r\n\r\n            arr.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + IntToHex(addr, 5)\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetRoomDataSpecialAddress = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let addr;\r\n    let arr = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            addr = GetRoomDataSpecialAddress(f, uwID, roomID);\r\n\r\n            arr.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + IntToHex(addr, 5)\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetRoomDataStartAddress = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let addr;\r\n    let arr = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            addr = GetRoomDataStartAddress(f, uwID, roomID);\r\n\r\n            arr.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + IntToHex(addr, 5)\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetRoomDataEndAddress = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let addr;\r\n    let arr = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            addr = GetRoomDataEndAddress(f, uwID, roomID);\r\n\r\n            arr.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + IntToHex(addr, 5)\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetRoomDataAddresses = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let o;\r\n    let arr = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            o = GetRoomDataAddresses(f, uwID, roomID);\r\n\r\n            arr.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + \r\n                IntToHex(o.startAddr, 5) + ' ' + \r\n                IntToHex(o.endAddr, 5) + ' ' + \r\n                LeftPad(o.length, 3, ' ') + ' ' + \r\n                IntToHex(o.specialStartAddr, 5) + ' ' + \r\n                IntToHex(o.specialEndAddr, 5) + ' ' + \r\n                LeftPad(o.specialLength, 3, ' ')\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetGetRoomDataObjects = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let arr = [];\r\n    let arr2 = [];\r\n    let arr3 = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            arr = GetRoomDataObjects(f, uwID, roomID);\r\n\r\n            arr2 = arr.map(o => {\r\n                switch (o.type) {\r\n                    case 'TRoomInfoObject' : return '[' + IntToHex(o.animation) + ' ' + IntToHex(o.floorTile, 1) + IntToHex(o.wallTile, 1) + ']';\r\n                    case 'TTransition'     : return '[' + IntToHex(o.viewID) + ' ' + IntToHex(o.subMapID) + ' ' + IntToHex(o.roomID) + ' ' + IntToHex(o.x) + ' ' + IntToHex(o.y) + ']';\r\n                    case 'TRoomObjectSpan' : return '[' + IntToHex(o.len) + ' ' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    case 'TRoomObject'     : return '[' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    default                : return null;\r\n                }\r\n            });\r\n\r\n            arr3.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + arr2.join(\" \")\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr3.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetGetRoomDataObjectsColored = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let arr = [];\r\n    let arr2 = [];\r\n    let arr3 = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            arr = GetRoomDataObjects(f, uwID, roomID);\r\n\r\n            arr2 = arr.map(o => {\r\n                switch (o.type) {\r\n                    case 'TRoomInfoObject' : return '<span style=\"color: green\">[' + IntToHex(o.animation) + ' ' + IntToHex(o.wallTile, 1) + IntToHex(o.floorTile, 1) + ']</span>';\r\n                    case 'TTransition'     : return '<span style=\"color: red\">[' + IntToHex(o.viewID) + ' ' + IntToHex(o.subMapID) + ' ' + IntToHex(o.roomID) + ' ' + IntToHex(o.x) + ' ' + IntToHex(o.y) + ']</span>';\r\n                    case 'TRoomObjectSpan' : return '<span style=\"color: black\">[' + IntToHex(o.len) + ' ' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']</span>';\r\n                    case 'TRoomObject'     : return '<span style=\"color: #CCCCCC\">[' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']</span>';\r\n                    default                : return null;\r\n                }\r\n            });\r\n\r\n            arr3.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + arr2.join(\" \")\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr3.join(\"<br />\");\r\n};\r\n\r\nexport const TEST_GetRoomDataInfoObjects = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let arr = [];\r\n    let arr2 = [];\r\n    let arr3 = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            arr = GetRoomDataInfoObjects(f, uwID, roomID);\r\n\r\n            arr2 = arr.map(o => {\r\n                switch (o.type) {\r\n                    case 'TRoomInfoObject' : return '[' + IntToHex(o.animation) + ' ' + IntToHex(o.floorTile, 1) + IntToHex(o.wallTile, 1) + ']';\r\n                    case 'TTransition'     : return '[' + IntToHex(o.viewID) + ' ' + IntToHex(o.subMapID) + ' ' + IntToHex(o.roomID) + ' ' + IntToHex(o.x) + ' ' + IntToHex(o.y) + ']';\r\n                    case 'TRoomObjectSpan' : return '[' + IntToHex(o.len) + ' ' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    case 'TRoomObject'     : return '[' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    default                : return null;\r\n                }\r\n            });\r\n\r\n            arr3.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + arr2.join(\" \")\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr3.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetRoomDataTiles = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let arr = [];\r\n    let arr2 = [];\r\n    let arr3 = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            arr = GetRoomDataTiles(f, uwID, roomID);\r\n\r\n            arr2 = arr.map(o => {\r\n                switch (o.type) {\r\n                    case 'TRoomInfoObject' : return '[' + IntToHex(o.animation) + ' ' + IntToHex(o.floorTile, 1) + IntToHex(o.wallTile, 1) + ']';\r\n                    case 'TTransition'     : return '[' + IntToHex(o.viewID) + ' ' + IntToHex(o.subMapID) + ' ' + IntToHex(o.roomID) + ' ' + IntToHex(o.x) + ' ' + IntToHex(o.y) + ']';\r\n                    case 'TRoomObjectSpan' : return '[' + IntToHex(o.len) + ' ' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    case 'TRoomObject'     : return '[' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    default                : return null;\r\n                }\r\n            });\r\n\r\n            arr3.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + arr2.join(\" \")\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr3.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetRoomDataTransitions = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let arr = [];\r\n    let arr2 = [];\r\n    let arr3 = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n\r\n            arr = GetRoomDataTransitions(f, uwID, roomID);\r\n\r\n            arr2 = arr.map(o => {\r\n                switch (o.type) {\r\n                    case 'TRoomInfoObject' : return '[' + IntToHex(o.animation) + ' ' + IntToHex(o.floorTile, 1) + IntToHex(o.wallTile, 1) + ']';\r\n                    case 'TTransition'     : return '[' + IntToHex(o.viewID) + ' ' + IntToHex(o.subMapID) + ' ' + IntToHex(o.roomID) + ' ' + IntToHex(o.x) + ' ' + IntToHex(o.y) + ']';\r\n                    case 'TRoomObjectSpan' : return '[' + IntToHex(o.len) + ' ' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    case 'TRoomObject'     : return '[' + IntToHex(o.yx) + ' ' + IntToHex(o.id) + ']';\r\n                    default                : return null;\r\n                }\r\n            });\r\n\r\n            arr3.push(\r\n                IntToHex(uwID, 2) + ' - ' + IntToHex(roomID, 2) + ' - ' + arr2.join(\" \")\r\n            );\r\n        }\r\n    }\r\n\r\n    return arr3.join(\"\\n\");\r\n};\r\n\r\nexport const TEST_GetRoomDataSquares = (f) => {\r\n\r\n    let uwID;\r\n    let roomID;\r\n    let squareNodes = [];\r\n    let arr = [];\r\n    let arr2 = [];\r\n    \r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            squareNodes = GetRoomDataSquares(f, uwID, roomID);\r\n            arr.push(squareNodes);\r\n        }\r\n    }\r\n    for (let x = 0; x < arr.length; x++) {\r\n        for (let y = 0; y < arr[x].length; y++) {\r\n            for (let i = 0; i < arr[x][y].length; i++) {\r\n                arr2.push(arr[x][y][i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // console.log(arr2);\r\n\r\n    let x = arr2.map((o, i) => {\r\n        let arr = [];\r\n        for (let [, value] of Object.entries(o)) {\r\n            arr.push(IntToHex(value, 2));\r\n        }\r\n        return LeftPad(i, 5, '0') + ' - ' + arr.join(' ');\r\n    });\r\n    return x.join(\"\\n\");\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // arr3 = arr2.map(o => {\r\n    //     return stringify(o);\r\n    // });\r\n\r\n    //return arr3.join(\"\\n\");\r\n};","\r\nimport { ReadByteFromFile, WriteBytesToFile } from \"../../data/Read/ReadRom\";\r\nimport { TDataAddresses } from \"../Constants/uAddresses\";\r\nimport { GetRoomDataInfoObjects, GetRoomDataObjects } from \"../Read/RoomData\";\r\nimport { ROOM_SIZE_X, ROOM_SIZE_Y } from \"../Constants/uConstants\";\r\nimport { create1DArray, YXToInt, LowNibble, HighNibble } from \"../../utilities\";\r\n\r\n//==============================================================================\r\n//\r\n//                              Tile graphics\r\n//\r\n//==============================================================================\r\n\r\nexport const GetRoomTileGraphicsAddress = (uwID, roomID) => {\r\n    let result = 0;\r\n    let startAddr = 0;\r\n\r\n    if (uwID !== 0) {\r\n        return result;\r\n    }\r\n\r\n    if (roomID <= 0xCB) {\r\n        startAddr = TDataAddresses.TileGraphicsOverworld1[0];\r\n        result = startAddr + (roomID * 80);\r\n    }\r\n    else {\r\n        startAddr = TDataAddresses.TileGraphicsOverworld2[0];\r\n        result = startAddr + ((roomID - 0xCC) * 80);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const GetRoomTileGraphics = (f, uwID, roomID) => {\r\n    let result = [];\r\n    let addr   = 0;\r\n    let b      = 0;\r\n    let i      = 0;\r\n    let len    = 0;\r\n\r\n    addr = GetRoomTileGraphicsAddress(uwID, roomID);\r\n\r\n    for (i = 0; i <= 80; i++) {\r\n        b = ReadByteFromFile(f, addr);\r\n        result[len] = b;\r\n        len = len + 1;\r\n        addr = addr + 1;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const SetRoomTileGraphics = (f, uwID, roomID, arr) => {\r\n    let result = false;    \r\n    let addr   = 0;\r\n    let b      = 0;\r\n    let i      = 0;\r\n\r\n    addr = GetRoomTileGraphicsAddress(uwID, roomID);\r\n\r\n    for (i = 0; i < 80; i++) {\r\n        b = arr[i];\r\n        WriteBytesToFile(f, addr, [b]);\r\n        addr = addr + 1;\r\n    }\r\n\r\n    result = true;\r\n    return result;\r\n};\r\n\r\n\r\nexport const ReplaceRoomTileGraphicByRoomObject = (f, uwID, roomID, replaceSet, RO) => {\r\n    let result = [];\r\n    let addr   = 0;\r\n    let b      = 0;\r\n    let i      = 0;\r\n    let x      = 0;\r\n    let y      = 0;\r\n    let spanX  = 0;\r\n    let spanY  = 0;\r\n    let newX   = 0;\r\n    let newY   = 0;\r\n\r\n    addr = GetRoomTileGraphicsAddress(uwID, roomID);\r\n\r\n    x = RO.x;\r\n    y = RO.y;\r\n\r\n    for (spanX = 0; spanX <= RO.spanX-1; spanX++) {\r\n        newX = x + spanX;\r\n        i = newX + (y * (ROOM_SIZE_X+1));\r\n\r\n        b = ReadByteFromFile(f, addr + i);\r\n\r\n        if (replaceSet.includes(b)) {\r\n            b = RO.id;\r\n            WriteBytesToFile(f, addr + i, [b]);\r\n        }\r\n    }\r\n\r\n    for (spanY = 0; spanY <= RO.spanY-1; spanY++) {\r\n        newY = y + spanY;\r\n        i = x + (newY * (ROOM_SIZE_X+1));\r\n\r\n        b = ReadByteFromFile(f, addr + i);\r\n\r\n        if (replaceSet.includes(b)) {\r\n            b = RO.id;\r\n            WriteBytesToFile(f, addr + i, [b]);\r\n        }\r\n    }\r\n\r\n    result = true;\r\n    return result;\r\n};\r\n\r\nexport const WriteRoomTile = (f, uwID, roomID, yx, value) => {\r\n    let result = false;\r\n    let startAddr = 0;\r\n    let addr = 0;\r\n\r\n    if (uwID !== 0) {\r\n        console.error('ERROR: uwID cannot be anything other than 0 for WriteRoomTile');\r\n        return result;\r\n    }\r\n\r\n    switch (uwID) {\r\n        case 0  : startAddr = TDataAddresses.Overlay[0]; break;\r\n        default : break;\r\n    }\r\n\r\n    addr = startAddr + (80 * roomID);\r\n\r\n    if (roomID >= 0xCC) {\r\n        addr = addr + (16*4); // extra zero data in between\r\n    }\r\n    addr = addr + (LowNibble(yx) * 0x0A) + HighNibble(yx);\r\n\r\n    WriteBytesToFile(f, addr, [value]);\r\n\r\n    result = true;\r\n\r\n    return result;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const RefreshRoomTileGraphics = (f, uwID, roomID) => {\r\n    ClearRoomTileGraphics(f, uwID, roomID);\r\n    SetRoomTileGraphicsByRoomObjects(f, uwID, roomID);\r\n};\r\n\r\nexport const ClearRoomTileGraphics = (f, uwID, roomID) => {\r\n    let RoomInfoObject = GetRoomDataInfoObjects(f, uwID, roomID)[0];\r\n    let arr = create1DArray(80, RoomInfoObject.floorTile);\r\n    SetRoomTileGraphics(f, uwID, roomID, arr);\r\n};\r\n\r\nexport const SetRoomTileGraphicsByRoomObjects = (f, uwID, roomID) => {\r\n    let RoomObjectsOL = GetRoomDataObjects(f, uwID, roomID);\r\n    RoomObjectsOL.forEach(RO => {\r\n        SetRoomTileGraphicByRoomObject(f, uwID, roomID, RO);\r\n    });\r\n};\r\n\r\nconst SetRoomTileGraphicByRoomObject = (f, uwID, roomID, RO) => {\r\n    let TGArray = GetTileGraphicsArray(RO);\r\n    let TGArrayReverse = TGArray.reverse();\r\n    SetTileGraphicsArray(f, uwID, roomID, TGArrayReverse);\r\n};\r\n\r\nconst GetTileGraphicsArray = (RO) => {\r\n    let arr = [];\r\n\r\n    let x = RO.x;\r\n    let y = RO.y;\r\n    let id = RO.id;\r\n    let spanX = RO.spanX;\r\n    let spanY = RO.spanY;\r\n\r\n    if (!((RO.type === \"TRoomObjectSpan\") || (RO.type === \"TRoomObject\"))) {\r\n        return arr;\r\n    }\r\n\r\n    const PushToArr = (arr, id, x, y) => {\r\n        if (x > 0xF) {\r\n            x = x - 0x10;\r\n        }       \r\n\r\n        if (y >= 0xF) {\r\n            y = y - 0x10;\r\n        }\r\n\r\n        arr.push({\r\n            id : id,\r\n            x : x,\r\n            y : y,\r\n            yx : YXToInt(y, x)\r\n        });\r\n    };\r\n\r\n    switch(RO.id) {\r\n        // 2x2\r\n        case 0xF5 :\r\n            if (spanY > 1) {\r\n                for (let i = 1; i <= spanY; i++) {\r\n                    PushToArr(arr, 0x25, x, y);\r\n                    PushToArr(arr, 0x26, x+1, y);\r\n                    PushToArr(arr, 0x27, x, y+1);\r\n                    PushToArr(arr, 0x28, x+1, y+1);\r\n                    y = y + 2;\r\n                }\r\n            }\r\n            else if (spanX > 1) {\r\n                for (let i = 1; i <= spanX; i++) {\r\n                    PushToArr(arr, 0x25, x, y);\r\n                    PushToArr(arr, 0x26, x+1, y);\r\n                    PushToArr(arr, 0x27, x, y+1);\r\n                    PushToArr(arr, 0x28, x+1, y+1);\r\n                    x = x + 2;\r\n                }\r\n            }\r\n            else {\r\n                PushToArr(arr, 0x25, x, y);\r\n                PushToArr(arr, 0x26, x+1, y);\r\n                PushToArr(arr, 0x27, x, y+1);\r\n                PushToArr(arr, 0x28, x+1, y+1);\r\n            }\r\n            break;\r\n\r\n        default:\r\n            if (spanY > 1) {\r\n                for (let i = 0; i < spanY; i++) {\r\n                    PushToArr(arr, id, x, y+i);\r\n                }\r\n            }\r\n            else if (spanX > 1) {\r\n                for (let i = 0; i < spanX; i++) {\r\n                    PushToArr(arr, id, x+i, y);\r\n                }\r\n            }\r\n            else {\r\n                PushToArr(arr, id, x, y);\r\n            }\r\n            break;\r\n    }\r\n\r\n    let arr2 = arr.filter(o => {\r\n        if ((o.x <= -1) || (o.x > ROOM_SIZE_X) || (o.y <= -1) || (o.y > ROOM_SIZE_Y)) {\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    });\r\n\r\n    return arr2;\r\n};\r\n\r\nconst SetTileGraphicsArray = (f, uwID, roomID, TGArray) => {\r\n    let addr = GetRoomTileGraphicsAddress(uwID, roomID);\r\n\r\n    TGArray.forEach(o => {\r\n        let i = o.x + (o.y * (ROOM_SIZE_X+1));\r\n        WriteBytesToFile(f, addr + i, [o.id]);\r\n    })\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { RoomExists, RandomRange } from \"../../utilities\";\r\nimport { FOUR_CHEST_ROOM } from \"../Constants/uAddresses\";\r\nimport { GetChestContent, SetChestContent, LA_20Rupees, LA_50Rupees } from \"../Read/Chests\";\r\nimport { \r\n    LA_SPRITE_D1_BOSS,\r\n    LA_SPRITE_D2_BOSS,\r\n    LA_SPRITE_D3_BOSS,\r\n    LA_SPRITE_D4_BOSS,\r\n    LA_SPRITE_D5_BOSS,\r\n    LA_SPRITE_D6_BOSS,\r\n    LA_SPRITE_D7_BOSS,\r\n    LA_SPRITE_D8_BOSS,\r\n    LA_SPRITE_RUPEE_HIDDEN, \r\n    ReplaceSprite,\r\n} from \"../../data/Read/Sprites\";\r\nimport { \r\n    boss_AddrArr, \r\n    boss_SpirteSetAddrArr1_V0, \r\n    boss_SpirteSetAddrArr2_V0, \r\n    boss_SpirteSetAddrArr1_V2,\r\n    boss_SpirteSetAddrArr2_V2 \r\n} from \"../Constants/uAddresses\";\r\nimport { ReadBytesFromFile, WriteBytesToFile, GetROMVersion } from \"../../data/Read/ReadRom\";\r\n\r\nimport { WriteRoomTile} from \"../Read/RoomTiles\";\r\nimport { GetRoomObjectByYXID, RemoveRoomObject, AddRoomObject, CreateRoomObject, GetRoomDataInfoObjects } from \"../Read/RoomData\";\r\nimport { LowNibble, HighNibble } from \"../../utilities\";\r\nimport { LA_TILE_Chest1 } from \"../Constants/uConstants\";\r\n\r\nexport const ShuffleNewUniqueItem2 = (f, chestContent) => {\r\n    let arr = [];\r\n    let count;\r\n    let len;\r\n    let uwID;\r\n    let roomID;\r\n    let i;\r\n    \r\n    /* Get */\r\n    len = 0;\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                arr[len] = GetChestContent(f, uwID, roomID);\r\n                len++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* How many chests have 20/50 rupees in them? */\r\n    count = 0;\r\n    for (let i = 0; i <= arr.length-1; i++) {\r\n        if ([LA_50Rupees, LA_20Rupees].includes(arr[i])) {\r\n            if (i !== FOUR_CHEST_ROOM) {               // Ignore 4 chest room\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Pick a random number */\r\n    let randNumber = RandomRange(1, count);\r\n\r\n    /* Overwrite one of these chests */\r\n    count = 0;\r\n    for (i = 0; i <= arr.length-1; i++) {\r\n        if ([LA_50Rupees, LA_20Rupees].includes(arr[i])) {\r\n            if (i !== FOUR_CHEST_ROOM) {               // Ignore 4 chest room\r\n                count++;\r\n                if (count === randNumber) {\r\n                    arr[i] = chestContent;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Set */\r\n    len = 0;\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                SetChestContent(f, uwID, roomID, arr[len]);\r\n                len++;\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport const GetBossSpriteID = (dungeonNum) => {\r\n    let result = 0;\r\n\r\n    switch (dungeonNum) {\r\n        case 1: result = LA_SPRITE_D1_BOSS; break;\r\n        case 2: result = LA_SPRITE_D2_BOSS; break;\r\n        case 3: result = LA_SPRITE_D3_BOSS; break;\r\n        case 4: result = LA_SPRITE_D4_BOSS; break;\r\n        case 5: result = LA_SPRITE_D5_BOSS; break;\r\n        case 6: result = LA_SPRITE_D6_BOSS; break;\r\n        case 7: result = LA_SPRITE_D7_BOSS; break;\r\n        case 8: result = LA_SPRITE_D8_BOSS; break;\r\n        default: result = 0;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const GetBossSpriteAddr = (dungeonNum) => {\r\n    let result = 0;\r\n\r\n    switch (dungeonNum) {\r\n        case 1: result = boss_AddrArr[0]; break;\r\n        case 2: result = boss_AddrArr[1]; break;\r\n        case 3: result = boss_AddrArr[2]; break;\r\n        case 4: result = boss_AddrArr[3]; break;\r\n        case 5: result = boss_AddrArr[4]; break;\r\n        case 6: result = boss_AddrArr[5]; break;\r\n        case 7: result = boss_AddrArr[6]; break;\r\n        case 8: result = boss_AddrArr[7]; break;\r\n        default: result = 0;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const GetBossSpriteSet = (dungeonNum) => {\r\n    let result = 0;\r\n\r\n    switch (dungeonNum) {\r\n        case 1: result = 0x05; break;\r\n        case 2: result = 0x08; break;\r\n        case 3: result = 0x16; break;\r\n        case 4: result = 0x1A; break;\r\n        case 5: result = 0x1D; break;\r\n        case 6: result = 0x25; break;\r\n        case 7: result = 0x3B; break;\r\n        case 8: result = 0x50; break;\r\n        default: result = 0;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const GetBossSpriteSetAddresses = (f, dungeonNum) => {\r\n    let result = [];\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0:\r\n            switch (dungeonNum) {\r\n                case 1: result[0] = boss_SpirteSetAddrArr1_V0[0]; break;\r\n                case 2: result[0] = boss_SpirteSetAddrArr1_V0[1]; break;\r\n                case 3: result[0] = boss_SpirteSetAddrArr1_V0[2]; break;\r\n                case 4: result[0] = boss_SpirteSetAddrArr1_V0[3]; result[1] = boss_SpirteSetAddrArr2_V0[3]; break;\r\n                case 5: result[0] = boss_SpirteSetAddrArr1_V0[4]; break;\r\n                case 6: result[0] = boss_SpirteSetAddrArr1_V0[5]; break;\r\n                case 7: result[0] = boss_SpirteSetAddrArr1_V0[6]; result[1] = boss_SpirteSetAddrArr2_V0[6]; break;\r\n                case 8: result[0] = boss_SpirteSetAddrArr1_V0[7]; break;\r\n                default: result = [];\r\n            }\r\n            break;\r\n\r\n        case 2:\r\n            switch (dungeonNum) {\r\n                case 1: result[0] = boss_SpirteSetAddrArr1_V2[0]; break;\r\n                case 2: result[0] = boss_SpirteSetAddrArr1_V2[1]; break;\r\n                case 3: result[0] = boss_SpirteSetAddrArr1_V2[2]; break;\r\n                case 4: result[0] = boss_SpirteSetAddrArr1_V2[3]; result[1] = boss_SpirteSetAddrArr2_V2[3]; break;\r\n                case 5: result[0] = boss_SpirteSetAddrArr1_V2[4]; break;\r\n                case 6: result[0] = boss_SpirteSetAddrArr1_V2[5]; break;\r\n                case 7: result[0] = boss_SpirteSetAddrArr1_V2[6]; result[1] = boss_SpirteSetAddrArr2_V2[6]; break;\r\n                case 8: result[0] = boss_SpirteSetAddrArr1_V2[7]; break;\r\n                default: result = [];\r\n            }\r\n            break;\r\n        \r\n        default:\r\n            result = [];\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const ShiftArrayLeft = (arr, amount) => {\r\n    let i = 0;\r\n    let j = 0;\r\n    let temp = 0;\r\n    \r\n    for (j = 1; j <= amount; j++) {\r\n        if (arr.length < 2) {\r\n            return arr;\r\n        }\r\n\r\n        temp = arr[0];\r\n        for (i = 0; i <= arr.length-1-1; i++) {\r\n            arr[i] = arr[i+1];\r\n        }\r\n        arr[arr.length-1] = temp;\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\nexport const ReplaceBoss = (f, bossNum, dungeonNum) => {\r\n    let j              = 0;\r\n    let spriteSet      = 0;\r\n    let spriteAddr     = 0;\r\n    let spriteID       = 0;\r\n    let spriteSetAddrs = [];\r\n    let byteArr        = [];\r\n\r\n    /* Boss to add */\r\n    spriteID = GetBossSpriteID(bossNum);\r\n    spriteSet = GetBossSpriteSet(bossNum);\r\n\r\n    /* Boss to replace */\r\n    spriteAddr = GetBossSpriteAddr(dungeonNum);\r\n    spriteSetAddrs = GetBossSpriteSetAddresses(f, dungeonNum);\r\n\r\n    /* Put boss and spriteset in */\r\n    WriteBytesToFile(f, spriteAddr + 1, [spriteID]);\r\n    for (j = 0; j <= spriteSetAddrs.length-1; j++) {\r\n        WriteBytesToFile(f, spriteSetAddrs[j], [spriteSet]);\r\n    }\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Move most bosses to the center of the room */\r\n    if ((dungeonNum !== 4) && (dungeonNum !== 7)) {\r\n        WriteBytesToFile(f, spriteAddr, [0x34]);\r\n    }\r\n\r\n    /* If D8 has D1's boss, move him so he's vulnerable */\r\n    if ((dungeonNum === 8) && (bossNum === 1)) {\r\n        WriteBytesToFile(f, spriteAddr, [0x38]);\r\n    }\r\n\r\n    /* If D8 has D6's boss, move him so he's vulnerable */\r\n    if ((dungeonNum === 8) && (bossNum === 6)) {\r\n        WriteBytesToFile(f, spriteAddr, [0x31]);\r\n    }\r\n\r\n    /* If D7 has D5's boss, move him so you dont fall in the pits */\r\n    if ((dungeonNum === 7) && (bossNum === 5)) {\r\n        WriteBytesToFile(f, spriteAddr, [0x24]);\r\n    }\r\n\r\n    /* If D4 has D2's or D6's boss, add a floor to the end of the room data */\r\n    if ((dungeonNum === 4) && ((bossNum === 2) || (bossNum === 6))) {\r\n        /* Bottom left corner into a wall */\r\n        WriteBytesToFile(f, 0x2BB5C, [0x53]); //6D\r\n\r\n        /* Bottom right corner into a wall */\r\n        WriteBytesToFile(f, 0x2BB62, [0x53]);\r\n\r\n        /* Shift 35 bytes, avoid the transition...that you can't use...? */\r\n        byteArr = ReadBytesFromFile(f, 0x2BB4E, 35);\r\n\r\n        /* Shift three to the left so we can insert three at the end */\r\n        byteArr = ShiftArrayLeft(byteArr, 3);\r\n\r\n        /* Insert */\r\n        byteArr[byteArr.length-3] = 0x8A;\r\n        byteArr[byteArr.length-2] = 0x70;\r\n        byteArr[byteArr.length-1] = 0x53;\r\n        WriteBytesToFile(f, 0x2BB4E, byteArr);\r\n    }\r\n};\r\n\r\nexport const ReplaceSpriteWithChest = (f, uwID, roomID, spriteID, yx, id, newYX, chestContent) => {\r\n    // let sprite = {};\r\n\r\n    // /* Does sprite exist? */\r\n    // if (!ReadSprite(f, uwID, roomID, spriteID, sprite)) {\r\n    //     console.error('ERROR: Could not find sprite!');\r\n    //     return;\r\n    // }\r\n\r\n    // /* Replace sprite with hidden sprite */\r\n    // sprite.yx = 0x00;\r\n    // sprite.id = LA_SPRITE_RUPEE_HIDDEN;\r\n    // WriteSprite(f, sprite);\r\n       \r\n\r\n    /* Remove sprite */\r\n    ReplaceSprite(f, uwID, roomID, spriteID, LA_SPRITE_RUPEE_HIDDEN);\r\n\r\n    /* Add chest */\r\n    ReplaceRoomObjectWithChest(f, uwID, roomID, 1, yx, id, newYX, chestContent);\r\n};\r\n\r\nexport const ReplaceRoomObjectWithChest = (f, uwID, roomID, len, yx, id, newYX, chestContent) => {\r\n    /* Replace collision with chest */\r\n    let RO = GetRoomObjectByYXID(f, uwID, roomID, yx, id);\r\n    \r\n    if (RO) {\r\n        /* Draw and/or remove overworld tile graphic */\r\n        if (uwID === 0) {\r\n            let RoomInfoObject = GetRoomDataInfoObjects(f, uwID, roomID)[0];\r\n            if (RO.spanX > 1) {\r\n                for (let i = 0; i <= RO.spanX-1; i++) {\r\n                    let y = LowNibble(yx);\r\n                    let x = HighNibble(yx) + i;\r\n                    let modifyYX =  parseInt(y + '' + x, 16);\r\n                    if (uwID === 0) {\r\n                        WriteRoomTile(f, uwID, roomID, modifyYX, RoomInfoObject.data[1]);\r\n                    }\r\n                }\r\n            }\r\n            else if (RO.spanY > 1) {\r\n                for (let i = 0; i <= RO.spanY-1; i++) {\r\n                    let y = LowNibble(yx) + i;\r\n                    let x = HighNibble(yx);\r\n                    let modifyYX =  parseInt(y + '' + x, 16);\r\n                    if (uwID === 0) {\r\n                        WriteRoomTile(f, uwID, roomID, modifyYX, RoomInfoObject.data[1]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (uwID === 0) {\r\n                    WriteRoomTile(f, uwID, roomID, yx, RoomInfoObject.data[1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        RemoveRoomObject(f, uwID, roomID, yx, id);\r\n        let newRO = CreateRoomObject([newYX, LA_TILE_Chest1], 'TRoomObject');\r\n        AddRoomObject(f, uwID, roomID, newRO);\r\n        if (uwID === 0) {\r\n            WriteRoomTile(f, uwID, roomID, newYX, 0xA0);\r\n        }\r\n    }\r\n    else {\r\n        console.error('ERROR: ReplaceRoomObjectWithChest failed!');\r\n        return;\r\n    }\r\n\r\n    /* Set the chest */\r\n    SetChestContent(f, uwID, roomID, chestContent);\r\n};","\r\nimport { RandomRange } from \"../../../utilities\";\r\nimport { ReplaceBoss } from \"../RandomizeUtil\";\r\n\r\nconst DuplicateBosses = (f) => {\r\n    let dungeonNum = 0;\r\n    let bossNum    = 0;\r\n    let isGood     = false;\r\n    let i          = 0;\r\n    \r\n    for (dungeonNum = 1; dungeonNum <= 8; dungeonNum++) { //142788232\r\n        /* Randomize until all conditions are met */\r\n        for (i = 1; i <= 255; i++) {\r\n            bossNum = RandomRange(1, 8);\r\n\r\n            /* Restrictions */\r\n            if (\r\n                ((dungeonNum === 1) && (bossNum === 7)) ||  // Boss 7 banned in D1\r\n                ((dungeonNum === 2) && (bossNum === 7)) ||  // Boss 7 banned in D2\r\n                ((dungeonNum === 3) && (bossNum === 7)) ||  // Boss 7 banned in D3\r\n                ((dungeonNum === 4) && (bossNum === 7)) ||  // Boss 7 banned in D4\r\n                ((dungeonNum === 5) && (bossNum === 7)) ||  // Boss 7 banned in D5\r\n                ((dungeonNum === 6) && (bossNum === 7)) ||  // Boss 7 banned in D6\r\n                ((dungeonNum === 8) && (bossNum === 7)) ||  // Boss 7 banned in D8\r\n\r\n                ((dungeonNum === 4) && (bossNum === 3)) ||  // Boss 3 banned in D4\r\n                ((dungeonNum === 7) && (bossNum === 3)) ||  // Boss 3 banned in D7\r\n                ((dungeonNum === 7) && (bossNum === 5))     // Boss 5 banned in D7\r\n            ) {\r\n                isGood = false;\r\n            }\r\n            else {\r\n                isGood = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (isGood) {\r\n            ReplaceBoss(f, bossNum, dungeonNum);\r\n        }\r\n        else {\r\n            console.error(\"Warning: Could not swap boss!\");\r\n        }\r\n    }\r\n};\r\n\r\nexport default DuplicateBosses;","import { GetROMVersion, WriteBytesToFile, ReadByteFromFile } from \"../../../data/Read/ReadRom\";\r\nimport { TDataAddresses, ADDR_DeathlArmDamage_V10, ADDR_DeathlArmDamage_V12 } from \"../../Constants/uAddresses\";\r\nimport { enemy_changeArr, enemy_byteArr } from \"../../Constants/uConstants\";\r\nimport { RandomizeDamageValue, GBShuffle } from \"../../../utilities\";\r\n\r\nexport const EnemyDamage = (f, itemIndex) => {\r\n    const NORMAL = 0;\r\n    const SHUFFLE = 1;\r\n    const PLUSMINUS2 = 2;\r\n    const PLUSMINUS4 = 3;\r\n    const ZERO = 4;\r\n    const OHKO = 5;\r\n\r\n    switch (itemIndex) {\r\n        case NORMAL     : break;\r\n        case SHUFFLE    : ShuffleEnemyDamage(f); break;\r\n        case PLUSMINUS2 : CustomEnemyDamage(f, -0x10, 0x10); break; // -0x08, 0x10\r\n        case PLUSMINUS4 : CustomEnemyDamage(f, -0x20, 0x20); break;\r\n        case ZERO       : CustomEnemyDamage(f, -0xF0, -0xF0); break;\r\n        case OHKO       : CustomEnemyDamage(f, 0xF0, 0xF0); break;\r\n        default         : break; \r\n    }\r\n};\r\n\r\nconst ShuffleEnemyDamage = (f) => {\r\n\r\n    let arr = [];\r\n    let b = 0;\r\n\r\n    /* Addresses */\r\n    let startAddr = TDataAddresses.SpriteDamage[0];\r\n    let endAddr   = TDataAddresses.SpriteDamage[1];\r\n  \r\n    /* Read enemy damage */\r\n    let i = 0;\r\n    let j = 0;\r\n    for (let currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        if (enemy_changeArr[i] === 1) {\r\n            arr[j] = enemy_byteArr[i];\r\n            j++;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    /* Shuffle */\r\n    GBShuffle(arr);\r\n      \r\n    /* Write enemy damage */\r\n    i = 0;\r\n    j = 0;\r\n    for (let currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        if (enemy_changeArr[i] === 1) {\r\n            b = arr[j];\r\n            WriteBytesToFile(f, currAddr, [b]);\r\n            j++;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    /* Extra */\r\n    let deathlArms;\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : deathlArms = ADDR_DeathlArmDamage_V10; break;\r\n        case 2  : deathlArms = ADDR_DeathlArmDamage_V12; break;\r\n        default : console.error(\"[ERROR] function CustomEnemyDamage - Cannot change deathl arm damage!\"); return;\r\n    }\r\n\r\n    b = ReadByteFromFile(f, deathlArms); \r\n    let newDamage = RandomizeDamageValue(b, -0x08, 0x10);\r\n    WriteBytesToFile(f, deathlArms, [newDamage]);\r\n};\r\n\r\nconst CustomEnemyDamage = (f, minDamage, maxDamage) => {\r\n\r\n    let arr = [];\r\n    let b = 0;\r\n\r\n    /* Addresses */\r\n    let startAddr = TDataAddresses.SpriteDamage[0];\r\n    let endAddr   = TDataAddresses.SpriteDamage[1];\r\n  \r\n    /* Read enemy damage */\r\n    let i = 0;\r\n    let j = 0;\r\n    for (let currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        if (enemy_changeArr[i] === 1) {\r\n            arr[j] = enemy_byteArr[i];\r\n            j++;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    /* Change enemy damage */\r\n    for (i = 0; i <= arr.length-1; i++) {\r\n        arr[i] = RandomizeDamageValue(arr[i], minDamage, maxDamage);\r\n    }\r\n      \r\n    /* Write enemy damage */\r\n    i = 0;\r\n    j = 0;\r\n    for (let currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        if (enemy_changeArr[i] === 1) {\r\n            b = arr[j];\r\n            WriteBytesToFile(f, currAddr, [b]);\r\n            j++;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    /* Extra */\r\n    let deathlArms;\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : deathlArms = ADDR_DeathlArmDamage_V10; break;\r\n        case 2  : deathlArms = ADDR_DeathlArmDamage_V12; break;\r\n        default : console.error(\"[ERROR] function CustomEnemyDamage - Cannot change deathl arm damage!\"); return;\r\n    }\r\n\r\n    b = ReadByteFromFile(f, deathlArms); \r\n    let newDamage = RandomizeDamageValue(b, minDamage, maxDamage);\r\n    WriteBytesToFile(f, deathlArms, [newDamage]);\r\n};\r\n\r\nexport default EnemyDamage;","import { GetROMVersion, WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { ADDR_LAVA_DMG, ADDR_SPIKE_DMG } from \"../../Constants/uAddresses\";\r\n\r\nexport const MiscDamage = (f, itemIndex) => {\r\n    const NORMAL = 0;\r\n    const ZERO = 1;\r\n    const OHKO = 2;\r\n\r\n    switch (itemIndex) {\r\n        case NORMAL  : break;\r\n        case ZERO    : CustomMiscDamage(f, 0x00); break;\r\n        case OHKO    : CustomMiscDamage(f, 0xE0); break; // Why 0xE0 for OHKO and no 0xF0?\r\n        default      : break; \r\n    }\r\n};\r\n\r\nconst CustomMiscDamage = (f, damage) => {\r\n    PitsOHKO(f, damage);\r\n    LavaOHKO(f, damage);\r\n    SpikesOHKO(f, damage);\r\n};\r\n\r\nconst PitsOHKO = (f, damage) => {\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : WriteBytesToFile(f, 0x91B3, [damage]); break;\r\n        case 2  : WriteBytesToFile(f, 0x91D3, [damage]); break;\r\n        default : console.error(\"[Error] function PitsOHKO - invalid ROM version\");\r\n    }\r\n};\r\n\r\nconst LavaOHKO = (f, damage) => {\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : WriteBytesToFile(f, 0x927F, [damage]); break;\r\n        case 2  : WriteBytesToFile(f, ADDR_LAVA_DMG, [damage]); break;\r\n        default : console.error(\"[Error] function LavaOHKO - invalid ROM version\");\r\n    }\r\n};\r\n\r\nconst SpikesOHKO = (f, damage) => {\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : WriteBytesToFile(f, 0xB62C, [damage]); break;\r\n        case 2  : WriteBytesToFile(f, ADDR_SPIKE_DMG, [damage]); break;\r\n        default : console.error(\"[Error] function SpikesOHKO - invalid ROM version\");\r\n    }\r\n};\r\n\r\nexport default MiscDamage;","import { WriteBytesToFile, GetROMVersion } from \"../../../data/Read/ReadRom\";\r\nimport { RandomRange } from \"../../../utilities\";\r\n\r\n/* Remove the barrier around the walls during boss fights */\r\nexport const RemoveForceBarrier = (f) => {\r\n    RandomRange(0, 255);\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0 : WriteBytesToFile(f, 0x3952, [0x00, 0x00, 0x00]); break;\r\n        case 2 : WriteBytesToFile(f, 0x3949, [0x00, 0x00, 0x00]); break;\r\n        default : console.error(\"[Error] function RemoveForceBarrier - invalid ROM version\");\r\n    }\r\n};\r\n\r\nexport default RemoveForceBarrier;","import { GBShuffle } from \"../../../utilities\";\r\nimport { ReplaceBoss } from \"../RandomizeUtil\";\r\n\r\nconst ShuffleBosses = (f) => {\r\n    let i          = 0;\r\n    let dungeonNum = 0;\r\n    let bossNum    = 0;\r\n    let arr        = [];\r\n    let isGood     = false;\r\n    let temp1      = 0;\r\n    let temp2      = 0;\r\n\r\n    /* Get an array to randomize */\r\n    for (dungeonNum = 1; dungeonNum <= 8; dungeonNum++) {\r\n        arr[dungeonNum-1] = dungeonNum;\r\n    }\r\n\r\n    /* Randomize until all conditions are met */\r\n    for (i = 1; i <= 255; i++) {\r\n        isGood = true;\r\n\r\n        GBShuffle(arr);\r\n\r\n        /* Boss 7 is banned from moving */\r\n        temp1 = 0;                     // where is boss 7?\r\n        temp2 = arr[7-1];              // who's in dungeon 7\r\n        for (dungeonNum = 1; dungeonNum <= 8; dungeonNum++) {\r\n            if (arr[dungeonNum-1] === 7) {\r\n                temp1 = dungeonNum;\r\n            }\r\n        }\r\n        arr[temp1-1] = temp2;\r\n        arr[7-1] = 7;\r\n\r\n        for (dungeonNum = 1; dungeonNum <= 8; dungeonNum++) {\r\n            bossNum = arr[dungeonNum-1];\r\n\r\n            /* Restrictions */\r\n            if (\r\n                ((dungeonNum === 1) && (bossNum === 7)) ||  // Boss 7 banned in D1\r\n                ((dungeonNum === 2) && (bossNum === 7)) ||  // Boss 7 banned in D2\r\n                ((dungeonNum === 3) && (bossNum === 7)) ||  // Boss 7 banned in D3\r\n                ((dungeonNum === 4) && (bossNum === 7)) ||  // Boss 7 banned in D4\r\n                ((dungeonNum === 5) && (bossNum === 7)) ||  // Boss 7 banned in D5\r\n                ((dungeonNum === 6) && (bossNum === 7)) ||  // Boss 7 banned in D6\r\n                ((dungeonNum === 8) && (bossNum === 7)) ||  // Boss 7 banned in D8\r\n\r\n                ((dungeonNum === 4) && (bossNum === 3)) ||  // Boss 3 banned in D4\r\n                ((dungeonNum === 7) && (bossNum === 3)) ||  // Boss 3 banned in D7\r\n                ((dungeonNum === 7) && (bossNum === 5))     // Boss 5 banned in D7\r\n            ) {\r\n                isGood = false;\r\n            }\r\n        }\r\n\r\n        if (isGood) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (isGood) {\r\n        for (dungeonNum = 1; dungeonNum <= 8; dungeonNum++) {\r\n            bossNum = arr[dungeonNum-1];\r\n            ReplaceBoss(f, bossNum, dungeonNum);\r\n        }\r\n    }\r\n    else {\r\n        console.error(\"Warning: Could not swap bosses!\");\r\n    }\r\n\r\n    //  ReplaceBoss(8, 1);\r\n    //  ReplaceBoss(8, 2);\r\n    //  ReplaceBoss(8, 3);\r\n    //  ReplaceBoss(8, 4);\r\n    //  ReplaceBoss(8, 5);\r\n    //  ReplaceBoss(8, 6);\r\n    //  ReplaceBoss(8, 7);\r\n    //  ReplaceBoss(8, 8);\r\n};\r\n\r\nexport default ShuffleBosses;","import { WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { RandomRange } from \"../../../utilities\";\r\n\r\nexport const ChangeRequiredInstruments = (f, itemIndex) => {\r\n    let bank;\r\n    let startAddr;\r\n    let requiredInstruments;\r\n\r\n    switch (itemIndex) {\r\n        case 0  : requiredInstruments = 8; break;\r\n        case 1  : requiredInstruments = 7; break;\r\n        case 2  : requiredInstruments = 6; break;\r\n        case 3  : requiredInstruments = 5; break;\r\n        case 4  : requiredInstruments = 4; break;\r\n        case 5  : requiredInstruments = 3; break;\r\n        case 6  : requiredInstruments = 2; break;\r\n        case 7  : requiredInstruments = 1; break;\r\n        case 8  : requiredInstruments = 0; break;\r\n        case 9  : requiredInstruments = RandomRange(0, 8); break;\r\n        default : requiredInstruments = 8; \r\n    }\r\n\r\n    bank = 0x19;\r\n    startAddr = ((bank - 1) * 0x4000);\r\n\r\n    WriteBytesToFile(f, startAddr + 0x7F70, [\r\n        /* Loop player dungeonStatuses backwards until we find an instrument */\r\n        0x1E, 0x08,\r\n        0x21, 0x6C, 0xDB,\r\n        0x3A,\r\n        0xE6, 0x02,\r\n        0x20, 0x03,\r\n        0x1D,\r\n        0x20, 0xF8,\r\n        0x1D,\r\n  \r\n        /* Is the current spriteGraphicIdx = the last dungeon instrument player has? */\r\n        0xF0, 0xF1,\r\n        0xBB,\r\n        0xC2, 0x83, 0x7E,\r\n  \r\n        /* Do player have enough instrumnets? */\r\n        0x1E, requiredInstruments,\r\n        0x16, 0x08,\r\n        0x21, 0x65, 0xDB,\r\n        0x2A,\r\n        0xE6, 0x02,\r\n        0x28, 0x04,\r\n        0x1D,\r\n        0xCA, 0x0B, 0x4C,\r\n        0x15,\r\n        0x20, 0xF4,\r\n        0xC3, 0x1A, 0x4C\r\n    ]);\r\n  \r\n    /* Call our new function after instruments play their song */\r\n    WriteBytesToFile(f, startAddr + 0x4BF7, [0xC3, 0x60, 0x7F]);\r\n};\r\n\r\nexport default ChangeRequiredInstruments;","import { WriteSpriteXY, LA_SPRITE_WALRUS } from \"../../../data/Read/Sprites\";\r\n\r\n/* Overworld walrus - move up, some to the left to always allow access. */\r\nexport const MoveWalrus = (f) => {\r\n    WriteSpriteXY(f, 0, 0xFD, LA_SPRITE_WALRUS, 0x26);\r\n};\r\n\r\nexport default MoveWalrus;","import { WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport {LA_SPRITE_RUPEE_HIDDEN } from \"../../../data/Read/Sprites\";\r\n\r\nexport const RemoveQuickSandTransition = (f) => {\r\n    /* Change lanmola room so you can't fall in the middle.  Change top left\r\n    sprite to rupee under condition. That determines if the Link falls in the\r\n    middle, but the key falling code is somewhere else. */\r\n\r\n    /* Sprite */\r\n    WriteBytesToFile(f, 0x5956F, [LA_SPRITE_RUPEE_HIDDEN]);\r\n};\r\n\r\nexport default RemoveQuickSandTransition;","import { WriteBytesToFileVersion } from \"../../../data/Read/ReadRom\";\r\nimport { ADDR_ROOSTERCAVE_PITTRANS_V10, ADDR_ROOSTERCAVE_PITTRANS_V12 } from \"../../Constants/uAddresses\";\r\n\r\n/* Rooster cave pits no longer transition you out */\r\nexport const RoosterCaveNoTransitions = (f) => {\r\n    WriteBytesToFileVersion(f,\r\n        ADDR_ROOSTERCAVE_PITTRANS_V10,\r\n        ADDR_ROOSTERCAVE_PITTRANS_V12,\r\n        [0x3E, 0x00]\r\n    );\r\n};\r\n\r\nexport default RoosterCaveNoTransitions;","import { WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { RandomRange, isBetween } from \"../../../utilities\";\r\nimport { GetRoomDataObjects } from \"../../../data/Read/RoomData\";\r\nimport { LA_TILE_GRASS, LA_TILE_POT, LA_TILE_PIT } from \"../../Constants/uConstants\";\r\nimport { ReplaceRoomTileGraphicByRoomObject } from \"../../../data/Read/RoomTiles\";\r\n\r\nconst ShufflePitsGrassRocks = (f) => {\r\n    let\r\n        i           = 0,\r\n        randNumber  = 0,\r\n        uwID        = 0,\r\n        roomID      = 0,\r\n        roomDataOL  = {},\r\n        RO          = {};\r\n\r\n    for (roomID = 0; roomID <= 0xFE; roomID++) {\r\n\r\n        if ([\r\n            0x01, 0x2C, 0x95, 0xEC, // warps\r\n            0x04, 0x52,             // rocks with staircases\r\n            0x58,                   // left side of castle rocks for leaf\r\n            0x63,                   // mirror of 51 racoon tarin screen\r\n            0xD4, 0xD5,             // sign post maze\r\n            0xFA                    // Mermaid status hookshotable rocks\r\n        ].includes(roomID)) {\r\n            continue;\r\n        }\r\n\r\n        roomDataOL = GetRoomDataObjects(f, uwID, roomID, false);\r\n\r\n        for (i = 0; i <= roomDataOL.length-1; i++) {\r\n            if ((roomDataOL[i].type === \"TRoomObject\") || (roomDataOL[i].type === \"TRoomObjectSpan\")) {\r\n                RO = roomDataOL[i];\r\n\r\n                if ([LA_TILE_POT, LA_TILE_GRASS, LA_TILE_PIT].includes(RO.id)) {\r\n                    randNumber = RandomRange(0, 99);\r\n\r\n                    /* Some screens cannot have pits in front of something useful. */\r\n                    if ([0x0E, 0xC6, 0x41, 0xE5, 0xA0, 0xE1, 0xA3].includes(roomID)) {\r\n                        switch (true) {\r\n                            case isBetween(randNumber, 0, 74) : RO.id = LA_TILE_GRASS; break;\r\n                            case isBetween(randNumber, 75, 99) : RO.id = LA_TILE_POT; break;\r\n                            default     : break;\r\n                        }\r\n                    }\r\n\r\n                    /* Some screens cannot have rocks after pits */\r\n                    else if (roomID === 0xF9) {\r\n                        switch (true) {\r\n                            case isBetween(randNumber, 0, 74) : RO.id = LA_TILE_GRASS; break;\r\n                            case isBetween(randNumber, 75, 99) : RO.id = LA_TILE_PIT; break;\r\n                            default     : break;\r\n                        }\r\n                    }\r\n\r\n                    else {\r\n                        switch (true) {\r\n                            case isBetween(randNumber, 0, 49) : RO.id = LA_TILE_GRASS; break;\r\n                            case isBetween(randNumber, 50, 74) : RO.id = LA_TILE_PIT; break;\r\n                            case isBetween(randNumber, 75, 99) : RO.id = LA_TILE_POT; break;\r\n                            default     : break;\r\n                        }\r\n                    }\r\n\r\n                    if (RO.len > 1) {\r\n                        WriteBytesToFile(f, RO.address, [RO.len, RO.yx, RO.id])\r\n                    }\r\n                    else {\r\n                        WriteBytesToFile(f, RO.address, [RO.yx, RO.id]);\r\n                    }\r\n\r\n                    ReplaceRoomTileGraphicByRoomObject(f, uwID, roomID, [LA_TILE_GRASS, LA_TILE_PIT, LA_TILE_POT], RO);\r\n\r\n                    /* RoomID 0x63 is a copy of roomID 0x51.  The overlay is seperate,\r\n                      but the room objects are connected to the same location. */\r\n                    if (roomID === 0x51) {\r\n                        ReplaceRoomTileGraphicByRoomObject(f, uwID, 0x63, [LA_TILE_GRASS, LA_TILE_PIT, LA_TILE_POT], RO);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default ShufflePitsGrassRocks;","import { WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { StringOfBytesToByteArray } from \"../../../utilities\";\r\n\r\nexport const AddInstantTransferCaves = (f) => {\r\n    let arr = [];\r\n\r\n    //============================================================================\r\n    //\r\n    //                           INSTANT TRANSFERS\r\n    //\r\n    //  1) After river rapids\r\n    //  2) Above Mr. Write's house\r\n    //  3) Below D7\r\n    //  4) Above D4\r\n    //  5) Mysterious woods next to Raccoon Tarin\r\n    //  6) Crazy Tracy\r\n    //\r\n    //============================================================================\r\n\r\n    /* HACK - Change overworld rooms 0x8D and 0x89 (after river rapids) to allow\r\n      moving between the two top areas.  Also, add instant transfer cave to 0x89 */\r\n\r\n    /* Collision */\r\n    arr = StringOfBytesToByteArray(\r\n        '03 0E 8A 00 3A 89 11 04 84 26 2F C5 12 37 C4 23 04 C4 24 04 82 20 3A 45 32 ' +\r\n        '84 46 2C 47 E0 62 33 85 63 2F 35 38 65 E0 10 3A 68 3C 78 37 85 55 04 C2 69 ' +\r\n        '04 25 3D 69 6E 11 3A 03 BA E1 1F AC 50 7C FE 0A 04 8A 00 3A 84 20 2F 24 37 ' +\r\n        '19 39 84 30 0E 34 33 85 35 2F 05 E2 37 E0 82 40 2C 42 2D 87 43 0E 52 32 87 ' +\r\n        '53 2C 60 6E 82 61 20 82 63 5C 66 20 C2 68 6E 71 6E 73 6E 76 6E 24 3C E1 10 ' +\r\n        'A3 50 7C FE'\r\n    );\r\n    WriteBytesToFile(f, 0x683B9, arr);\r\n\r\n    /* Tiles */\r\n    arr = StringOfBytesToByteArray(\r\n      '3A 3A 3A BA 3A 3A 3A 3A 3A 3A 3A 3A 37 04 04 04 04 04 04 04 3A 3A 37 04 04 ' +\r\n      '3D 2F 2F 2F 2F 0E 0E 37 04 04 38 0E 0E 0E 0E 0E 0E 37 04 04 32 2C E0 2C 2C ' +\r\n      '0E 0E 37 04 04 04 04 04 04 04 0E 0E 33 2F 48 E0 49 2F 3C 6E 0E 0E 0E 0E 0E ' +\r\n      '0E 0E 0E 37 04 3A 3A 3A 3A 3A E2 3A 3A 3A 3A 04 04 04 04 04 04 04 04 04 3E ' +\r\n      '2F 2F 2F 2F 3C 04 04 04 04'\r\n    );\r\n    WriteBytesToFile(f, 0x9AC10, arr);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* HACK - Above Mr Write's house, add instant transfer cave */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x24E53, [\r\n        0xE1, 0x10, 0xA3, 0x50, 0x7C,   // Transition to Link's house\r\n        0x18, 0xE2,                     // House entrance looking cave\r\n        0xC2, 0x13, 0xE0\r\n    ]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x98A62, [0xE2]);             // add door\r\n    WriteBytesToFile(f, 0x98A88, [0xFF, 0xFF]);       // remove ground grass and bush\r\n    WriteBytesToFile(f, 0x98A91, [0xFF, 0xFF, 0xFF]); // remove ground grass\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* HACK - 0x1E tal tal heights (below D7), add instant transfer cave */\r\n\r\n    /* Collision - Move cave */\r\n    WriteBytesToFile(f, 0x24D6C, [0x20, 0xE2]);\r\n\r\n    /* Collision - Add transition */\r\n    WriteBytesToFile(f, 0x24D6E, [0xE1, 0x10, 0xA3, 0x50, 0x7C]);    // Transition to Link's house\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x98974, [0xE2]); // add door\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* HACK - 0x1A tal tal heights (above and left of D4) - add instant transfer cave */\r\n\r\n    /* Collision (cannot have other caves present) */\r\n    // 0x03 - replace caves with sand, only collision\r\n    WriteBytesToFile(f, 0x24B85, [0x03]);\r\n    WriteBytesToFile(f, 0x24B8F, [\r\n        0x33, 0xE2,\r\n        0xE1, 0x10, 0xA3, 0x50, 0x7C,   // Transition to Link's house\r\n        0x34, 0x3F, 0x83, 0x35, 0xE9, 0x38, 0x3E, 0xC2, 0x39, 0x3A\r\n    ]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x98841, [0xE2]);\r\n    WriteBytesToFile(f, 0x9884A, [0x1B, 0x1B, 0x1B]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* HACK - 0x51 mysterious woods (raccoon tarin) - add instant transfer\r\n      cave */\r\n\r\n    //    /* Move flower patch to top left corner and turn into a cave */\r\n    //    f.Position = 0x25AB4;\r\n    //    b = 0x01;\r\n    //    f.Write(b, SizeOf(byte));\r\n    //    b = 0xE2;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    /* Collision */\r\n\r\n    /* Move top leftish corner and turn into a cave */\r\n    WriteBytesToFile(f, 0x25AA6, [0x01, 0xE2]);\r\n\r\n    /* Remove flower patch and grass and turn into transition */\r\n    WriteBytesToFile(f, 0x25AC9, [0xE1, 0x10, 0xA3, 0x50, 0x7C]);   // Transition to Link's house\r\n\r\n    /* Tiles */\r\n\r\n    /* Top left corner into cave */\r\n    WriteBytesToFile(f, 0x99950 + 1, [0xE2]);\r\n\r\n    /* Top leftish corner into floor */\r\n    WriteBytesToFile(f, 0x99950 + 11, [0x04]);\r\n\r\n    //    /* Flower patch to floor */\r\n    //    f.Position = 0x99950 + 27;\r\n    //    b = 0x04;\r\n    //    f.Write(b, SizeOf(byte));\r\n\r\n    /* Flower patch to floor */\r\n    WriteBytesToFile(f, 0x99950 + 63, [0x04]);\r\n\r\n    /* Tiles - Grass patch to floor */\r\n    WriteBytesToFile(f, 0x99950 + 56, [0x04]);\r\n    WriteBytesToFile(f, 0x99950 + 66, [0x04]);\r\n    WriteBytesToFile(f, 0x99950 + 76, [0x04]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Remove rocks near crazy tracy. This may partially avoid a softlock when\r\n      using Mambo's song to go into Tracy's pond without the power bracelet, but\r\n      the player may still be blocked if none of the nearby transitions lead\r\n      to spot they have already visited. Because of this, add an instant\r\n      transfer cave. */\r\n\r\n    /* Left of tracy */\r\n\r\n    /* Collision - Rock to Door */\r\n    WriteBytesToFile(f, 0x257C6, [0x15, 0xE2]);\r\n\r\n    /* Collision - Grass Patch and Flower Patch to Transition  */\r\n    WriteBytesToFile(f, 0x257EB, [0xE1, 0x10, 0xA3, 0x50, 0x7C]);  // Transition to Link's house\r\n\r\n    /* Tiles */\r\n\r\n    /* Door */\r\n    WriteBytesToFile(f, 0x99590 + 15, [0xE2]);\r\n\r\n    /* Remove rock */\r\n    WriteBytesToFile(f, 0x99590 + 33, [0x04]);\r\n\r\n    /* Remove flower patch (replace with kinda green tile) */\r\n    WriteBytesToFile(f, 0x99590 + 20, [0xF9]);\r\n\r\n    /* Remove grass patch (replace with flower patch to look nicer */\r\n    WriteBytesToFile(f, 0x99590 + 73, [0x44]);\r\n    WriteBytesToFile(f, 0x99590 + 74, [0x44]);\r\n    WriteBytesToFile(f, 0x99590 + 75, [0x44]);\r\n\r\n    /* Right of tracy */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x2583B, [0x04]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x99609, [0x04]);\r\n};\r\n\r\nexport default AddInstantTransferCaves;","import { WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\n\r\nexport const AddOverworldModifications = (f) => {\r\n\r\n    //============================================================================\r\n    //\r\n    //                           OVERWORLD CHANGES\r\n    //\r\n    //  1) [UW0 0x79] Castle Gate always open\r\n    //  2) [UW0 0x24] Remove a swamp flower from dungeon 2 entrance\r\n    //  3) [UW0 0x2B] D4 special tiles, add staircase to go back up.\r\n    //  4) [UW0 0x1E] Below D7, add stairs on the right side.\r\n    //  5) [UW0 0x07] Right of egg, add stairs to prevent softlock.\r\n    //  6) [UW0 0x13] Before flamethrower cave, add stairs to allow going backwards.\r\n    //\r\n    //============================================================================\r\n\r\n    /* Castle Gate (opened) */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x2650C, [0x81, 0x14, 0x0D, 0x81, 0x24, 0x0D]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x9A5DE, [0x0D, 0x0C, 0x0D]);\r\n    WriteBytesToFile(f, 0x9A5E8, [0x0D, 0x0C, 0x0D]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Remove a flower from dungeon 2 entrance */\r\n\r\n    /* Sprite */\r\n    WriteBytesToFile(f, 0x59218, [0xA0]); // offscreen\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* Overworld D4 special tiles, add staircase to go back up to prevent\r\n      softlocking. */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x250A5, [0xC3]);                   // Extend Wall edge\r\n    WriteBytesToFile(f, 0x250A8, [0xC3]);                   // Extend Wall edge\r\n    WriteBytesToFile(f, 0x250AB, [0x02, 0xE0, 0x12, 0xE0]); // Add stairs\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x9D132, [0xE0]);\r\n    WriteBytesToFile(f, 0x9D13C, [0xE0]);\r\n\r\n    /* Stairs above D4 special tiles */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x24C6A, [0xC2, 0x62, 0xE0]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x9D11E, [0xE0]);\r\n    WriteBytesToFile(f, 0x9D128, [0xE0]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* 0x1E tal tal heights (below D7), add stairs on the right side. */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x24D59, [0x48, 0xE0]);\r\n    WriteBytesToFile(f, 0x24D5C, [0x49]);\r\n    WriteBytesToFile(f, 0x24D5F, [0x59]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x9898D, [0x03]);\r\n    WriteBytesToFile(f, 0x98990, [0xE0]);\r\n    WriteBytesToFile(f, 0x98999, [0x03, 0x03]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* 0x07 tal tal heights (right of egg), add stairs to prevent softlock. */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x24526, [0x63]);       // move rocks\r\n    WriteBytesToFile(f, 0x24554, [0x57, 0xE0]); // rocks into stairs\r\n    WriteBytesToFile(f, 0x24545, [0xE0]);       // ledge into stairs\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x98249, [0x03]);\r\n    WriteBytesToFile(f, 0x9825F, [0xE0]);\r\n    WriteBytesToFile(f, 0x98269, [0xE0]);\r\n\r\n    //--------------------------------------------------------------------------\r\n\r\n    /* 0x13 tal tal heights - add stairs to allow going backwards softlock. */\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x2437E, [0xE0]);\r\n    WriteBytesToFile(f, 0x24991, [0x07, 0xE0]);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x985F7, [0xE0]);  // add stairs\r\n    WriteBytesToFile(f, 0x98633, [0x03]);  // remove boulder\r\n    WriteBytesToFile(f, 0x9813D, [0xE0]);  // Room above needs stairs as well\r\n\r\n};\r\n\r\nexport default AddOverworldModifications;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_BOOTS } from \"../../Read/Chests\";\r\n\r\nexport const ExtraBoots = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_BOOTS);\r\n};\r\n\r\nexport default ExtraBoots;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_BOW } from \"../../Read/Chests\";\r\n\r\nexport const ExtraBow = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_BOW);\r\n};\r\n\r\nexport default ExtraBow;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_FEATHER } from \"../../Read/Chests\";\r\n\r\nexport const ExtraFeather = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_FEATHER);\r\n};\r\n\r\nexport default ExtraFeather;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_FIREROD } from \"../../Read/Chests\";\r\n\r\nexport const ExtraFirerod = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_FIREROD);\r\n};\r\n\r\nexport default ExtraFirerod;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_FLIPPERS } from \"../../Read/Chests\";\r\n\r\nexport const ExtraFlippers = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_FLIPPERS);\r\n};\r\n\r\nexport default ExtraFlippers;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_HOOKSHOT } from \"../../Read/Chests\";\r\n\r\nexport const ExtraHookshot = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_HOOKSHOT);\r\n};\r\n\r\nexport default ExtraHookshot;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_MIRRORSHIELD } from \"../../Read/Chests\";\r\n\r\nexport const ExtraMirrorShield = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_MIRRORSHIELD);\r\n};\r\n\r\nexport default ExtraMirrorShield;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_OCARINA } from \"../../Read/Chests\";\r\n\r\nexport const ExtraOcarina = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_OCARINA);\r\n};\r\n\r\nexport default ExtraOcarina;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_POWERBRACLET } from \"../../Read/Chests\";\r\n\r\nexport const ExtraPowerBraceletL1 = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_POWERBRACLET);\r\n};\r\n\r\nexport default ExtraPowerBraceletL1;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_POWERBRACLET } from \"../../Read/Chests\";\r\n\r\nexport const ExtraPowerBraceletL2 = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_POWERBRACLET);\r\n};\r\n\r\nexport default ExtraPowerBraceletL2;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_SHOVEL } from \"../../Read/Chests\";\r\n\r\nexport const ExtraShovel = (f) => {\r\n    ShuffleNewUniqueItem2(f, LA_SHOVEL);\r\n};\r\n\r\nexport default ExtraShovel;","import { GetRoomObjectByYXID, SetRoomObject } from \"../../../data/Read/RoomData\";\r\n\r\nexport const RemoveCaveObstacles = (f) => {\r\n  \r\n    let RO = {};\r\n\r\n    //============================================================================\r\n    //\r\n    //                      REMOVE SOME CAVE OBSTACLES\r\n    //\r\n    //  1) [UW2 0xD1] [Cave towards animal village] - remove a strange object\r\n    //  2) [UW2 0xDF] [Cave under the grave] - shorten a pit\r\n    //  3) [UW1 0xF1] [Cave towards D6] - remove deep water\r\n    //  4) [UW1 0xF7] [Cave going back to raft shop] - remove deep water\r\n    //\r\n    //============================================================================\r\n\r\n    /* UW2 0xD1] [Cave towards animal village] - remove a strange object*/\r\n    RO = GetRoomObjectByYXID(f, 2, 0xD1, 0x57, 0x4E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* [UW2 0xDF] [Cave under the grave] - shorten a pit */\r\n    RO = GetRoomObjectByYXID(f, 2, 0xDF, 0x32, 0x01);\r\n    RO.len = 0xC1;\r\n    RO.yx = 0x32;\r\n    RO.id = 0xB0;\r\n    SetRoomObject(f, RO);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* [UW1 0xF1] [Cave towards D6] - remove deep water */\r\n    RO = GetRoomObjectByYXID(f, 1, 0xF1, 0x42, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    RO = GetRoomObjectByYXID(f, 1, 0xF1, 0x51, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    RO = GetRoomObjectByYXID(f, 1, 0xF1, 0x61, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* [UW1 0xF7] [Cave going back to raft shop] - remove deep water */\r\n    RO = GetRoomObjectByYXID(f, 1, 0xF7, 0x23, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    RO = GetRoomObjectByYXID(f, 1, 0xF7, 0x32, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    RO = GetRoomObjectByYXID(f, 1, 0xF7, 0x43, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    RO = GetRoomObjectByYXID(f, 1, 0xF7, 0x54, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n    RO =  GetRoomObjectByYXID(f, 1, 0xF7, 0x66, 0x0E);\r\n    RO.id = 0x1B;\r\n    SetRoomObject(f, RO);\r\n\r\n};\r\n\r\nexport default RemoveCaveObstacles;","import { ReadByteFromFile, WriteBytesToFile } from \"../../../../data/Read/ReadRom\";\r\nimport { SetChestContent, LA_200Rupees } from \"../../../Read/Chests\";\r\n\r\nexport const AddCaveAboveCastle = (f) => {\r\n    let b;\r\n    let currAddr;\r\n\r\n    /* Added extra room, top left of castle. */\r\n    WriteBytesToFile(f, 0x25449, [0x25, 0xE1]);\r\n\r\n    /* Move bytes */\r\n    // deleted a 3 byte\r\n    for (currAddr = 0x25430; currAddr <= 0x25447; currAddr++) {\r\n        b = ReadByteFromFile(f, currAddr + 3);\r\n        WriteBytesToFile(f, currAddr, [b]);\r\n    }\r\n\r\n    // deleted the final 2 byte\r\n    WriteBytesToFile(f, 0x25448, [0xE1, 0x1F, 0xFC, 0x50, 0x7C]); \r\n\r\n    /* Add chest data back in. */\r\n    SetChestContent(f, 1, 0xFC, LA_200Rupees);\r\n    // WriteBytesToFile(f, 0x5075C, [LA_200Rupees]); \r\n\r\n    /* Core changes may have turned the chest into a pot.  Make it a chest */\r\n    WriteBytesToFile(f, 0x2BA8F, [0xA0]); \r\n};\r\n\r\nexport default AddCaveAboveCastle;","import { ReplaceRoomObject, RemoveRoomObject, AddRoomObject, CreateRoomObject } from '../../../../data/Read/RoomData';\r\nimport { WriteRoomTile } from '../../../../data/Read/RoomTiles';\r\nimport { SetChestContent, LA_HeartPiece } from '../../../Read/Chests';\r\nimport { WriteBytesToFile } from '../../../../data/Read/ReadRom';\r\nimport { GetBankAddress } from '../../../../utilities';\r\n\r\nexport const AddChestCastleHeart = (f) => {\r\n    /* Make the top left pillar smaller */\r\n    RemoveRoomObject(f, 0, 0x78, 0x22, 0x94);\r\n    RemoveRoomObject(f, 0, 0x78, 0x23, 0x95);\r\n    ReplaceRoomObject(f, 0, 0x78, 0x12, 0x97, 0x12, 0x94);\r\n    ReplaceRoomObject(f, 0, 0x78, 0x13, 0x98, 0x13, 0x95);\r\n    WriteRoomTile(f, 0, 0x78, 0x12, 0x94);\r\n    WriteRoomTile(f, 0, 0x78, 0x13, 0x95);\r\n    WriteRoomTile(f, 0, 0x78, 0x22, 0x0E);\r\n    WriteRoomTile(f, 0, 0x78, 0x23, 0x0E);\r\n\r\n    /* Add land and a chest */\r\n    AddRoomObject(f, 0, 0x78, CreateRoomObject([0x45, 0x0B], 'TRoomObject'));\r\n    WriteRoomTile(f, 0, 0x78, 0x45, 0x0B);\r\n    AddRoomObject(f, 0, 0x78, CreateRoomObject([0x35, 0xA0], 'TRoomObject'));\r\n    WriteRoomTile(f, 0, 0x78, 0x35, 0xA0);\r\n\r\n    /* Add heart piece in chest - Requires custom chest code */\r\n    SetChestContent(f, 0, 0x78, LA_HeartPiece);\r\n\r\n    /* Remove deep water heart special code for below the castle */\r\n    WriteBytesToFile(f, GetBankAddress(0x02, 0x5058), [0x00]);\r\n};\r\n\r\nexport default AddChestCastleHeart;","import { WriteBytesToFile } from \"../../../../data/Read/ReadRom\";\r\nimport { LA_TILE_Chest1 } from \"../../../Constants/uConstants\";\r\nimport { SetChestContent, LA_200Rupees } from \"../../../Read/Chests\";\r\n\r\nexport const AddChestInColorDungeon = (f) => {\r\n    /* D0 - Remove rupees in rupee room, add 200 chest */\r\n\r\n    let addr;\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x2BEDF, [0x81, 0x27, LA_TILE_Chest1, 0xFE]);\r\n    for (addr = 0x2BEE3; addr <= 0x2BEEE; addr++) {\r\n        WriteBytesToFile(f, addr, [0x00]);\r\n    }\r\n\r\n    /* Chest content */\r\n    SetChestContent(f, 3, 0x13, LA_200Rupees);\r\n    // WriteBytesToFile(f, 0x50873, [LA_200Rupees]);\r\n};\r\n\r\nexport default AddChestInColorDungeon;","import { WriteBytesToFile } from \"../../../../data/Read/ReadRom\";\r\nimport { LA_TILE_Chest1 } from \"../../../Constants/uConstants\";\r\nimport { LA_SPRITE_RUPEE_HIDDEN } from \"../../../../data/Read/Sprites\";\r\nimport { SetChestContent, LA_AngularKey, LA_BirdKey } from \"../../../Read/Chests\";\r\nimport { LA_FaceKey } from './../../../Read/Chests';\r\n\r\nconst AddOverworldKeysInChests = (f) => {  \r\n    //============================================================================\r\n    //\r\n    //                             Add Chests (3)\r\n    //\r\n    //  Some items can only be gained via killing a miniboss, or grabbing it from\r\n    //  the overworld.  Since we want these items in the chest shuffle, make\r\n    //  chests for them.\r\n    //\r\n    //============================================================================\r\n\r\n    /* Angular key chest - room below lanmola fight */\r\n\r\n    /* Chest content */\r\n    SetChestContent(f, 0, 0xDE, LA_AngularKey);\r\n\r\n    /* Tiles */\r\n    WriteBytesToFile(f, 0x9C5DF, [LA_TILE_Chest1]);\r\n\r\n    /* Collision */\r\n    WriteBytesToFile(f, 0x696D2, [0xA0]);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Chest - Put face key in chest - room above the normal location */\r\n    SetChestContent(f, 2, 0x6F, LA_FaceKey);\r\n\r\n    /* Add chest - after face key room - replace corner tile and move */\r\n    WriteBytesToFile(f, 0x2D932, [0x16, LA_TILE_Chest1]);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Put bird key in chest - same room as the normal location */\r\n    SetChestContent(f, 2, 0x7A, LA_BirdKey);\r\n\r\n    /* Add chest - bird key room - replace top right pit and move */\r\n    WriteBytesToFile(f, 0x2DAF5, [0x24, LA_TILE_Chest1]);\r\n\r\n    /* Remove sprite - bird key room - bird key with rupee under condition */\r\n    WriteBytesToFile(f, 0x58F08, [0x25, LA_SPRITE_RUPEE_HIDDEN]);\r\n};\r\n\r\nexport default AddOverworldKeysInChests;","import { WriteBytesToFile } from \"../../../../data/Read/ReadRom\";\r\nimport { ADDR_LinksHouseChestCollision } from \"../../../Constants/uAddresses\";\r\nimport { LA_50Rupees, SetChestContent } from \"../../../Read/Chests\";\r\nimport { LA_TILE_Chest1 } from \"../../../Constants/uConstants\";\r\n\r\nexport const ChestInLinksHouse = (f) => {\r\n    /* Chest content */\r\n    SetChestContent(f, 2, 0xA3, [LA_50Rupees]);\r\n  \r\n    /* Collision */\r\n    WriteBytesToFile(f, ADDR_LinksHouseChestCollision, [LA_TILE_Chest1]);\r\n};\r\n\r\nexport default ChestInLinksHouse;","import { LA_SeaShell } from '../../../Read/Chests';\r\nimport { ReplaceSpriteWithChest } from \"../../RandomizeUtil\";\r\nimport { LA_SPRITE_SEASHELL_HIDDEN } from \"../../../../data/Read/Sprites\";\r\nimport { LA_TILE_POT, LA_TILE_GRASS } from \"../../../Constants/uConstants\";\r\nimport { WriteRoomTile } from \"../../../../data/Read/RoomTiles\";\r\nimport { RemoveRoomObject, AddRoomObject, CreateRoomObject } from '../../../../data/Read/RoomData';\r\n\r\nexport const HiddenShellsAsChests = (f) => {\r\n    ReplaceSpriteWithChest(f, 0, 0xFF, LA_SPRITE_SEASHELL_HIDDEN, 0x34, LA_TILE_POT, 0x35, LA_SeaShell);   // FF - Desert Corner\r\n    WriteRoomTile(f, 0, 0xFF, 0x34, 0x37);\r\n\r\n    ReplaceSpriteWithChest(f, 0, 0xF8, LA_SPRITE_SEASHELL_HIDDEN, 0x44, LA_TILE_GRASS, 0x43, LA_SeaShell); // F8 - Water island bush\r\n    ReplaceSpriteWithChest(f, 0, 0xE9, LA_SPRITE_SEASHELL_HIDDEN, 0x62, LA_TILE_GRASS, 0x62, LA_SeaShell); // E9 - Mermaid statue screen\r\n    ReplaceSpriteWithChest(f, 0, 0xDA, LA_SPRITE_SEASHELL_HIDDEN, 0x76, 0x44, 0x33, LA_SeaShell);          // DA - Owl at fisherman bridge\r\n    WriteRoomTile(f, 0, 0xDA, 0x76, 0xFF);\r\n\r\n    ReplaceSpriteWithChest(f, 0, 0xD2, LA_SPRITE_SEASHELL_HIDDEN, 0x52, 0x44, 0x52, LA_SeaShell);          // D2 - Tree left of D1\r\n    ReplaceSpriteWithChest(f, 0, 0xB9, LA_SPRITE_SEASHELL_HIDDEN, 0x34, LA_TILE_POT, 0x23, LA_SeaShell);   // B9 - Boulder next to D5 with moblins\r\n    ReplaceSpriteWithChest(f, 0, 0xA3, LA_SPRITE_SEASHELL_HIDDEN, 0x32, LA_TILE_GRASS, 0x35, LA_SeaShell); // A3 - Right of start house bush\r\n    ReplaceSpriteWithChest(f, 0, 0xA4, LA_SPRITE_SEASHELL_HIDDEN, 0x54, 0x44, 0x47, LA_SeaShell);          // A4 - Tree next to sign maze\r\n    ReplaceSpriteWithChest(f, 0, 0xA5, LA_SPRITE_SEASHELL_HIDDEN, 0x55, 0x0A, 0x45, LA_SeaShell);          // A5 - D3 hill\r\n    ReplaceSpriteWithChest(f, 0, 0xA6, LA_SPRITE_SEASHELL_HIDDEN, 0x46, LA_TILE_GRASS, 0x46, LA_SeaShell); // A6 - D3 water island\r\n    ReplaceSpriteWithChest(f, 0, 0xA8, LA_SPRITE_SEASHELL_HIDDEN, 0x44, 0x6F, 0x53, LA_SeaShell);          // A8 - Seashell hill with owl\r\n    ReplaceSpriteWithChest(f, 0, 0x8B, LA_SPRITE_SEASHELL_HIDDEN, 0x44, LA_TILE_GRASS, 0x44, LA_SeaShell); // 8B - Right of seashell mansion\r\n    ReplaceSpriteWithChest(f, 0, 0x74, LA_SPRITE_SEASHELL_HIDDEN, 0x36, LA_TILE_GRASS, 0x36, LA_SeaShell); // 74 - Next to ghost tombstone\r\n\r\n    ReplaceSpriteWithChest(f, 0, 0x0C, LA_SPRITE_SEASHELL_HIDDEN, 0x27, LA_TILE_POT, 0x28, LA_SeaShell);   // 0C - Tal Tal Heights Rock Top Right\r\n    RemoveRoomObject(f, 0, 0x0C, 0x48, 0x3D); // Hidden object\r\n    AddRoomObject(f, 0, 0x0C, CreateRoomObject([0x27, LA_TILE_POT], 'TRoomObject'));\r\n    WriteRoomTile(f, 0, 0x0C, 0x27, LA_TILE_POT);\r\n\r\n    ReplaceSpriteWithChest(f, 1, 0xE3, LA_SPRITE_SEASHELL_HIDDEN, 0x57, LA_TILE_POT, 0x58, LA_SeaShell);   // E3 - Ghost house\r\n\r\n    ReplaceSpriteWithChest(f, 2, 0xB2, LA_SPRITE_SEASHELL_HIDDEN, 0x54, 0x0F, 0x54, LA_SeaShell);          // B2 - Minibowwow house\r\n\r\n    // roomID = 0x0C;\r\n    // ReplaceSprite(f, uwID, roomID, LA_SPRITE_SEASHELL_HIDDEN, LA_SPRITE_RUPEE_HIDDEN);\r\n    // RemoveRoomObject(f, uwID, roomID, 0x48, 0x3D); // Hidden object\r\n    // RemoveRoomObject(f, uwID, roomID, 0x27, LA_TILE_POT);\r\n    // AddRoomObject(f, uwID, roomID, CreateRoomObject([0x27, LA_TILE_POT], 'TRoomObject'));\r\n    // AddRoomObject(f, uwID, roomID, CreateRoomObject([0x28, LA_TILE_Chest1], 'TRoomObject'));\r\n    // WriteRoomTile(f, uwID, roomID, 0x28, LA_TILE_Chest1);\r\n    // SetChestContent(f, uwID, roomID, LA_SeaShell);\r\n};\r\n\r\nexport default HiddenShellsAsChests;","import { ShuffleNewUniqueItem2 } from \"../RandomizeUtil\";\r\nimport { LA_SeaShell } from \"../../Read/Chests\";\r\n\r\nexport const AddSeashells = (f) => {\r\n    /* Add 8 seashells */\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n    ShuffleNewUniqueItem2(f, LA_SeaShell);\r\n};\r\n\r\nexport default AddSeashells;","import { WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { WriteSpriteXY, LA_SPRITE_SHOP_NPC } from \"../../../data/Read/Sprites\";\r\nimport { ADDR_ShopCustomStart } from \"../../Constants/uAddresses\";\r\n\r\nexport const NoStealing = (f) => {\r\n    const myArr = [0x57, 0xCE, 0x74, 0xFD, 0x85, 0x52, 0x13, 0xE0, 0x00, 0x93, 0x48, 0x62, 0xFE];\r\n\r\n    /* Remove two 2-byte light tiles, add 1 3-byte wall and extra FE */\r\n    WriteBytesToFile(f, ADDR_ShopCustomStart, myArr);\r\n\r\n    /* Move the shopkeeper 1 tile to the right */\r\n    WriteSpriteXY(f, 2, 0xA1, LA_SPRITE_SHOP_NPC, 0x58);\r\n};\r\n\r\nexport default NoStealing;","import { IntToHex, IntToStr } from \"../../utilities\";\r\nimport { UW_0, UW_1, UW_2, UW_3, VIEWID_E0, /*SUBMAP_SIZE_Y, SUBMAP_SIZE_X*/ } from \"../Constants/uConstants\";\r\nimport { ReadByteFromFile } from \"./ReadRom\";\r\n// import { GetRoomDataSquares } from \"./RoomData\";\r\n\r\n//===================================================================================================\r\n//\r\n//                                        Constants\r\n//\r\n//===================================================================================================\r\n\r\n/* Submap size */\r\nexport const SUBMAP_SIZE_X            = 0x08;\r\nexport const SUBMAP_SIZE_Y            = 0x08;\r\n\r\nexport const LA_SUBMAP_DUNGEON1       = 0x00;\r\nexport const LA_SUBMAP_DUNGEON2       = 0x01;\r\nexport const LA_SUBMAP_DUNGEON3       = 0x02;\r\nexport const LA_SUBMAP_DUNGEON4       = 0x03;\r\nexport const LA_SUBMAP_DUNGEON5       = 0x04;\r\nexport const LA_SUBMAP_DUNGEON6       = 0x05;\r\nexport const LA_SUBMAP_DUNGEON7       = 0x06;\r\nexport const LA_SUBMAP_DUNGEON8       = 0x07;\r\nexport const LA_SUBMAP_EGG            = 0x08;\r\nexport const LA_SUBMAP_BLANK          = 0x09;\r\nexport const LA_SUBMAP_CAVES          = 0x0A;\r\nexport const LA_SUBMAP_COLORDUNGEON   = 0x0B;\r\nexport const LA_SUBMAP_ALTDUNGEON7    = 0x0C;\r\n\r\nexport const LA_SUBMAP_0D             = 0x0D;  // UW2, no submap, not used\r\nexport const LA_SUBMAP_0E             = 0x0E;  // [Crazy Tracy, Witch House, Shop]\r\nexport const LA_SUBMAP_0F             = 0x0F;  // [Fishing Game, Trendy Game]\r\nexport const LA_SUBMAP_10             = 0x10;  // common - telephone house, more...\r\nexport const LA_SUBMAP_11             = 0x11;  // common, 20 21 cave connections, hookshot log cave, Richard's cave, Signpost cave, more...\r\nexport const LA_SUBMAP_12             = 0x12;  // [Doghouse]\r\nexport const LA_SUBMAP_13             = 0x13;  // [Ocarina House]\r\nexport const LA_SUBMAP_14             = 0x14;  // [Castle 3 caves]\r\nexport const LA_SUBMAP_15             = 0x15;  // [Bowwow Captured Cave]\r\nexport const LA_SUBMAP_16             = 0x16;  // [Dream shrine (face key)]\r\nexport const LA_SUBMAP_17             = 0x17;\r\nexport const LA_SUBMAP_18             = 0x18;\r\nexport const LA_SUBMAP_19             = 0x19;\r\nexport const LA_SUBMAP_1A             = 0x1A;\r\nexport const LA_SUBMAP_1B             = 0x1B;\r\nexport const LA_SUBMAP_1C             = 0x1C;\r\nexport const LA_SUBMAP_1D             = 0x1D;  // [Library]\r\nexport const LA_SUBMAP_1E             = 0x1E;  // [Ghost House]\r\nexport const LA_SUBMAP_1F             = 0x1F;  // common - caves, minidungeon, [NOT HOUSES NOR DUNGEONS]\r\nexport const LA_SUBMAP_FF             = 0xFF;  // Color dungeon\r\n\r\nexport const LA_SubmapDefinitions     = [0x50220];\r\n\r\nexport const LA_SUBMAP_DUNGEON_SET = [\r\n    LA_SUBMAP_DUNGEON1,\r\n    LA_SUBMAP_DUNGEON2,\r\n    LA_SUBMAP_DUNGEON3,\r\n    LA_SUBMAP_DUNGEON4,\r\n    LA_SUBMAP_DUNGEON5,\r\n    LA_SUBMAP_DUNGEON6,\r\n    LA_SUBMAP_DUNGEON7,\r\n    LA_SUBMAP_DUNGEON8,\r\n    LA_SUBMAP_COLORDUNGEON,\r\n    LA_SUBMAP_ALTDUNGEON7,\r\n];\r\n\r\nexport const GetUWIDFromSubmapID = (viewID, subMapID) => {\r\n\r\n    let result;\r\n\r\n    if (viewID === VIEWID_E0) {\r\n        return UW_0;\r\n    };\r\n\r\n    switch (subMapID) {\r\n        case LA_SUBMAP_DUNGEON1:\r\n        case LA_SUBMAP_DUNGEON2:\r\n        case LA_SUBMAP_DUNGEON3:\r\n        case LA_SUBMAP_DUNGEON4:\r\n        case LA_SUBMAP_DUNGEON5:\r\n        case LA_SUBMAP_DUNGEON6 :       result = UW_1; break;\r\n        case LA_SUBMAP_DUNGEON7:\r\n        case LA_SUBMAP_DUNGEON8:\r\n        case LA_SUBMAP_EGG:\r\n        case LA_SUBMAP_BLANK:\r\n        case LA_SUBMAP_CAVES :          result = UW_2; break;\r\n        case LA_SUBMAP_COLORDUNGEON :   result = UW_3; break;\r\n        case LA_SUBMAP_ALTDUNGEON7 :    result = UW_2; break;\r\n        case LA_SUBMAP_0D:\r\n        case LA_SUBMAP_0E:\r\n        case LA_SUBMAP_0F:\r\n        case LA_SUBMAP_10:\r\n        case LA_SUBMAP_11:\r\n        case LA_SUBMAP_12:\r\n        case LA_SUBMAP_13:\r\n        case LA_SUBMAP_14:\r\n        case LA_SUBMAP_15:\r\n        case LA_SUBMAP_16:              result = UW_2; break;\r\n        case LA_SUBMAP_1D:\r\n        case LA_SUBMAP_1E:\r\n        case LA_SUBMAP_1F:              result = UW_1; break;\r\n        case LA_SUBMAP_FF:              result = UW_3; break;\r\n        default:                        \r\n            result = 255;\r\n            console.error('[ERROR] GetUWIDFromSubmapID - Invalid subMapID given: ' + IntToHex(subMapID, 2));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const GetSubMapName = (submapID) => {\r\n    switch (submapID) {\r\n        case LA_SUBMAP_DUNGEON1     : return 'Dungeon 1';\r\n        case LA_SUBMAP_DUNGEON2     : return 'Dungeon 2';\r\n        case LA_SUBMAP_DUNGEON3     : return 'Dungeon 3';\r\n        case LA_SUBMAP_DUNGEON4     : return 'Dungeon 4';\r\n        case LA_SUBMAP_DUNGEON5     : return 'Dungeon 5';\r\n        case LA_SUBMAP_DUNGEON6     : return 'Dungeon 6';\r\n        case LA_SUBMAP_DUNGEON7     : return 'Dungeon 7';\r\n        case LA_SUBMAP_DUNGEON8     : return 'Dungeon 8';\r\n        case LA_SUBMAP_EGG          : return 'Wind Fish Egg';\r\n        case LA_SUBMAP_BLANK        : return 'Blank';\r\n        case LA_SUBMAP_CAVES        : return 'Caves';\r\n        case LA_SUBMAP_COLORDUNGEON : return 'Color Dungeon';\r\n        case LA_SUBMAP_ALTDUNGEON7  : return 'Alt Dungeon 7';\r\n        default                     : console.error('[ERROR] GetSubMapName - Invalid subMapID given: ' + IntToHex(submapID, 2)); return '???';\r\n    }\r\n}\r\n\r\n//===================================================================================================\r\n//\r\n//                                        Submap\r\n//\r\n//===================================================================================================\r\n\r\nexport const GetSubMapAddress = (submapID) => {\r\n\r\n    let result;\r\n\r\n    if (submapID > LA_SUBMAP_ALTDUNGEON7) {\r\n        throw new Error('GetSubMapAddress - Invalid submapID given: ' + IntToStr(submapID));\r\n    }\r\n\r\n    result = LA_SubmapDefinitions[0] + (submapID * 64);\r\n    return result;\r\n}\r\n\r\nexport const GetSubMapRoomID = (f, submapID, idx) => {\r\n     \r\n    let startAddr;\r\n    let addr;\r\n    let roomID;\r\n\r\n    // Address - start of the submap's roomIDs.\r\n    startAddr = GetSubMapAddress(submapID);\r\n\r\n    // Address\r\n    addr = startAddr + idx;\r\n\r\n    // Data\r\n    roomID = ReadByteFromFile(f, addr);\r\n    return roomID;\r\n};\r\n\r\nexport const GetSubMapID = (f, uwID, roomID) => {\r\n\r\n    switch (uwID) {\r\n        case 0 : \r\n            return 0;\r\n        \r\n        case 1 : \r\n            for (let subMapID = LA_SUBMAP_DUNGEON1; subMapID <= LA_SUBMAP_DUNGEON6; subMapID++) {\r\n                for (let y = 0; y < SUBMAP_SIZE_Y; y++) {\r\n                    for (let x = 0; x < SUBMAP_SIZE_X; x++) {\r\n                        let idx = x + (y * SUBMAP_SIZE_Y);\r\n                        let roomID2 = GetSubMapRoomID(f, subMapID, idx);\r\n\r\n                        if (roomID === roomID2) {\r\n                            return subMapID;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return -1;\r\n\r\n        case 2 :\r\n            for (let subMapID = LA_SUBMAP_DUNGEON7; subMapID <= LA_SUBMAP_CAVES; subMapID++) {\r\n                for (let y = 0; y < SUBMAP_SIZE_Y; y++) {\r\n                    for (let x = 0; x < SUBMAP_SIZE_X; x++) {\r\n                        let idx = x + (y * SUBMAP_SIZE_Y);\r\n                        let roomID2 = GetSubMapRoomID(f, subMapID, idx);\r\n\r\n                        if (roomID === roomID2) {\r\n                            return subMapID;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let subMapID = LA_SUBMAP_ALTDUNGEON7; subMapID <= LA_SUBMAP_ALTDUNGEON7; subMapID++) {\r\n                for (let y = 0; y < SUBMAP_SIZE_Y; y++) {\r\n                    for (let x = 0; x < SUBMAP_SIZE_X; x++) {\r\n                        let idx = x + (y * SUBMAP_SIZE_Y);\r\n                        let roomID2 = GetSubMapRoomID(f, subMapID, idx);\r\n\r\n                        if (roomID === roomID2) {\r\n                            return subMapID;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return -2;\r\n\r\n        case 3 : \r\n            for (let subMapID = LA_SUBMAP_COLORDUNGEON; subMapID <= LA_SUBMAP_COLORDUNGEON; subMapID++) {\r\n                for (let y = 0; y < SUBMAP_SIZE_Y; y++) {\r\n                    for (let x = 0; x < SUBMAP_SIZE_X; x++) {\r\n                        let idx = x + (y * SUBMAP_SIZE_Y);\r\n                        let roomID2 = GetSubMapRoomID(f, subMapID, idx);\r\n\r\n                        if (roomID === roomID2) {\r\n                            return subMapID;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return -3;\r\n\r\n        default : \r\n            return -4;\r\n    }\r\n};\r\n\r\n// export const GetSumMap\r\n\r\n// export const GetSubmapSquares = (subMapID) => {\r\n//     let x, y;\r\n//     let uwID;\r\n//     let idx;\r\n//     let allNodes;\r\n//     let squareNodes;\r\n//     let squareNodes2;\r\n//     let i;\r\n//     let square;\r\n//     let square2;\r\n//     let roomID;\r\n//     let j;\r\n//     let sprite;\r\n\r\n//     if (subMapID > LA_SUBMAP_ALTDUNGEON7) {\r\n//         console.error('GetSubmapSquares - Submap cannot be greater than ' + IntToStr(LA_SUBMAP_ALTDUNGEON7));\r\n//         return [];\r\n//     }\r\n\r\n//     uwID = GetUWIDFromSubmapID(0xE1, subMapID);\r\n//     idx = 0;\r\n\r\n//     for (y = 0; y <= SUBMAP_SIZE_Y; y++) {\r\n//         for (x = 0; x <= SUBMAP_SIZE_X; x++) {\r\n        \r\n//             roomID = GetSubMapRoomID(subMapID, idx);\r\n//             squareNodes = GetRoomDataSquares(uwID, roomID);\r\n//             squareNodes2 = GetRoomSpriteSquares(uwID, roomID);\r\n\r\n\r\n//             for (i = 0; i <= squareNodes.length; i++) {\r\n//                 square = TSquare(squareNodes[i]);\r\n//                 square2 = TSquare(squareNodes2[i]);\r\n\r\n//                 // Move the x and y in terms of the 8x8 submap\r\n//                 square.x = square.x + (10 * (idx % 8) );\r\n//                 square.y = square.y + (8 * Math.Trunc(idx / 8) );\r\n      \r\n//                 // Merge the sprite data into the square\r\n//                 square.IsSprite = square2.IsSprite;\r\n//                 if (square2.IsSprite) {\r\n//                     for (j = 0; j <= square2.SpriteData.length; j++) {\r\n//                         sprite = square2.SpriteData[j];\r\n//                         if (!square.SpriteData.Contains(sprite.id)) {\r\n//                             square.SpriteData.AddSprite(sprite.Clone);\r\n//                         }\r\n//                     };\r\n//                 }\r\n//                 square.OrbHittable = square2.OrbHittable;\r\n\r\n//                 // Event data\r\n//                 square.EventID = GetEventContent(uwID, roomID);\r\n      \r\n//                 allNodes.Add(square.Clone);\r\n//             }\r\n//         }\r\n        \r\n//         idx++;\r\n//     }\r\n\r\n//     allNodes.SetSquaresXY;\r\n//     allNodes.SetSquaresThatCanHitOrb;\r\n//     return allNodes;\r\n// }\r\n\r\n\r\n\r\n","import { LA_SmallKey, LA_FEATHER, LA_BOOTS, LA_Gel, GetChestContent, SetChestContent, LA_ITEMS_DUNGEONUNIQUE_SET, LA_POWERBRACLET, LA_FLIPPERS, LA_FIREROD, LA_ITEMS_OVERWORLD_KEYS, LA_ITEMS_DUNGEONONLY_SET } from \"../../Read/Chests\";\r\nimport { RoomExists, RandomRange, IntToHex } from \"../../../utilities\";\r\nimport { LA_SUBMAP_DUNGEON1, LA_SUBMAP_ALTDUNGEON7, GetUWIDFromSubmapID, GetSubMapRoomID, LA_SUBMAP_CAVES, LA_SUBMAP_DUNGEON_SET, GetSubMapID } from \"../../Read/Submap\";\r\nimport { LA_HOOKSHOT, LA_NightmareKey, GetChestContentName } from './../../Read/Chests';\r\n\r\nconst ShuffleChests = (f) => {\r\n    // let goodCount = 0;\r\n    // let badCount = 0;\r\n    for (let i = 0; i <= 0; i++) {                          // Change upper limit if you want to test multiple shuffles\r\n        let b;\r\n        let mapping = ChestSoftRules();\r\n        let isGood = true;\r\n\r\n        ShuffleUniqueChests(f);\r\n        ShuffleDungeonChests(f);\r\n        ShuffleAllChests(f);\r\n\r\n        for (let uwID = 0; uwID <= 3; uwID++) {\r\n            for (let roomID = 0; roomID <= 0xFF; roomID++) {\r\n                if (RoomExists(uwID, roomID)) {\r\n                    if (isGood) {\r\n                        b = GetChestContent(f, uwID, roomID);\r\n    \r\n                        if (b !== LA_Gel) {\r\n                            let map = mapping[uwID][roomID];\r\n                            \r\n                            if (map.includes(b)) {\r\n                                isGood = false;\r\n                                console.log(`${isGood} - uwID ${uwID} roomID 0x${IntToHex(roomID)} chest ${GetChestContentName(b)}`);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // if (isGood) {\r\n        //     // console.log(isGood);\r\n        //     goodCount++;\r\n        // }\r\n        // else {\r\n        //     badCount++;\r\n        // }\r\n    }\r\n    // console.log(`Good ${goodCount} Bad ${badCount}`);\r\n};\r\n\r\nconst ShuffleUniqueChests = (f) => {\r\n    let arr = [];\r\n    let uwID;\r\n    let roomID;\r\n    let b;\r\n    let randNum1;\r\n    let randNum2;\r\n    let temp;\r\n    let i;\r\n    let val1;\r\n    let val2;\r\n    let mapping = ChestSoftRules();\r\n\r\n    /* Get */\r\n    arr = [];\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                b = GetChestContent(f, uwID, roomID);\r\n                if (LA_ITEMS_DUNGEONUNIQUE_SET.includes(b)) {\r\n                    arr.push({\r\n                        uwID : uwID,\r\n                        roomID: roomID,\r\n                        value: b\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (arr.length === 0) {\r\n        return;\r\n    }\r\n\r\n    /* Shuffle */\r\n    for (i = 0; i < 200; i++) {\r\n        randNum1 = RandomRange(0, arr.length-1);\r\n        randNum2 = RandomRange(0, arr.length-1);\r\n\r\n        val1 = arr[randNum1];\r\n        val2 = arr[randNum2];\r\n\r\n        if (\r\n            (!mapping[val1.uwID][val1.roomID].includes(val2.value)) &&\r\n            (!mapping[val2.uwID][val2.roomID].includes(val1.value))\r\n        ) {\r\n            temp = arr[randNum1].value;\r\n            arr[randNum1].value = arr[randNum2].value;\r\n            arr[randNum2].value = temp;\r\n        }\r\n        else {\r\n            i--;\r\n        }\r\n    }\r\n\r\n    /* Set */\r\n    arr.forEach(o => {\r\n        SetChestContent(f, o.uwID, o.roomID, o.value);\r\n    });\r\n\r\n    return true;\r\n};\r\n\r\nconst ShuffleDungeonChests = (f) => {\r\n    let arr = [];\r\n    let uwID;\r\n    let roomID;\r\n    let b;\r\n    let randNum1;\r\n    let randNum2;\r\n    let temp;\r\n\r\n    let idx;\r\n    let y;\r\n    let x;\r\n    let submapID;\r\n    let i;\r\n    let val1;\r\n    let val2;\r\n    let mapping = ChestSoftRules();\r\n\r\n    for (submapID = LA_SUBMAP_DUNGEON1; submapID <= LA_SUBMAP_ALTDUNGEON7; submapID++) {\r\n\r\n        /* Dungeons only! */\r\n        if ([LA_SUBMAP_CAVES].includes(submapID)) {\r\n            continue;\r\n        }\r\n\r\n        /* Get */\r\n        arr = [];\r\n        uwID = GetUWIDFromSubmapID(0xE1, submapID);\r\n        idx = 0;\r\n        for (y = 0; y <= 7; y++) {\r\n            for (x = 0; x <= 7; x++) {\r\n                roomID = GetSubMapRoomID(f, submapID, idx);\r\n                if (RoomExists(uwID, roomID)) {\r\n                    b = GetChestContent(f, uwID, roomID);\r\n                    if ((b !== LA_SmallKey) && (b !== LA_Gel)) {                     // Don't shuffle small keys nor OOB               \r\n                        arr.push({\r\n                            uwID : uwID,\r\n                            roomID: roomID,\r\n                            value : b\r\n                        });\r\n                    }\r\n                }\r\n                idx++;     \r\n            }\r\n        }\r\n\r\n        if (arr.length === 0) {\r\n            continue;\r\n        }\r\n\r\n        /* Shuffle */\r\n        for (i = 0; i < 200; i++) {\r\n            randNum1 = RandomRange(0, arr.length-1);\r\n            randNum2 = RandomRange(0, arr.length-1);\r\n\r\n            val1 = arr[randNum1];\r\n            val2 = arr[randNum2];\r\n\r\n            if (\r\n                (!mapping[val1.uwID][val1.roomID].includes(val2.value)) &&\r\n                (!mapping[val2.uwID][val2.roomID].includes(val1.value))\r\n            ) {\r\n                temp = arr[randNum1].value;\r\n                arr[randNum1].value = arr[randNum2].value;\r\n                arr[randNum2].value = temp;\r\n            }\r\n            else {\r\n                i--;\r\n            }\r\n        }\r\n\r\n        /* Set */\r\n        arr.forEach(o => {\r\n            SetChestContent(f, o.uwID, o.roomID, o.value);\r\n        });\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nconst ShuffleAllChests = (f) => {\r\n    let arr = [];\r\n    let uwID;\r\n    let roomID;\r\n    let b;\r\n    let randNum1;\r\n    let randNum2;\r\n    let temp;\r\n    let i;\r\n    let val1;\r\n    let val2;\r\n    let mapping = ChestSoftRules();\r\n\r\n    /* Get */\r\n    arr = [];\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                b = GetChestContent(f, uwID, roomID);\r\n                if (!LA_ITEMS_DUNGEONONLY_SET.includes(b) && (b !== LA_Gel)) {      // don't shuffle map, compass, beak, nightmarekey, smallkey\r\n                    arr.push({\r\n                        uwID : uwID,\r\n                        roomID: roomID,\r\n                        value: b\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (arr.length === 0) {\r\n        return;\r\n    }\r\n\r\n    /* Shuffle */\r\n    for (i = 0; i < 500; i++) {\r\n        randNum1 = RandomRange(0, arr.length-1);\r\n        randNum2 = RandomRange(0, arr.length-1);\r\n\r\n        val1 = arr[randNum1];\r\n        val2 = arr[randNum2];\r\n\r\n        if (\r\n            (!mapping[val1.uwID][val1.roomID].includes(val2.value)) &&\r\n            (!mapping[val2.uwID][val2.roomID].includes(val1.value))\r\n        ) {\r\n            /* Don't put overworld keys in dungeons */\r\n            if (LA_ITEMS_OVERWORLD_KEYS.includes(val1.value) && LA_SUBMAP_DUNGEON_SET.includes(GetSubMapID(f, val2.uwID, val2.roomID))) {\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            if (LA_ITEMS_OVERWORLD_KEYS.includes(val2.value) && LA_SUBMAP_DUNGEON_SET.includes(GetSubMapID(f, val1.uwID, val1.roomID))) {\r\n                i--;\r\n                continue;\r\n            }\r\n\r\n            temp = arr[randNum1].value;\r\n            arr[randNum1].value = arr[randNum2].value;\r\n            arr[randNum2].value = temp;\r\n        }\r\n        else {\r\n            i--;\r\n        }\r\n    }\r\n\r\n    /* Set */\r\n    arr.forEach(o => {\r\n        SetChestContent(f, o.uwID, o.roomID, o.value);\r\n    });\r\n\r\n    return true;\r\n};\r\n\r\nconst ChestSoftRules = () => {\r\n    const f = LA_FEATHER;\r\n    const p = LA_POWERBRACLET;\r\n    const b = LA_BOOTS;\r\n    const w = LA_FLIPPERS;\r\n    const h = LA_HOOKSHOT;\r\n    const r = LA_FIREROD;\r\n    const n = LA_NightmareKey;\r\n    const s = LA_SmallKey;\r\n    const p2 = LA_POWERBRACLET;  // Level 2 potential problems\r\n\r\n    const fb = [f, b];\r\n    const fbw = [f, b, w];\r\n    const phs = [p, h, s];\r\n    const fr = [f, r];\r\n    const fh = [f, h];\r\n    const fhr = [f, h, r];\r\n    const wh = [w, h];\r\n    const hns = [h, n, s];\r\n    const fs = [f, s];\r\n    const sp2 = [s, p2];\r\n    \r\n    return (\r\n        [\r\n            [\r\n             // 0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    A,    B,    C,    D,    E,    F}\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 0\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 1\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 2\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 3\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 4\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 5\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 6\r\n                [],   [p2], [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 7\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 8\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 9\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // A\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // B\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // C\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // D\r\n                [],   [],   [],   [],   [],   [p2], [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // E\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // F\r\n            ],\r\n            [\r\n             // 0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    A,    B,    C,    D,    E,    F}\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [f],  [],   [],   [],   [],   [],   [],   [],   // 0\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 1\r\n                [f],  [f],  [f],  [],   [],   [],   [f],  [f],  [],   [],   [],   [],   [],   [],   [],   [],   // 2\r\n                [],   [],   [],   [],   [],   [],   [p2], [],   [],   [f],  [],   [],   [],   [],   [],   [],   // 3\r\n                [],   [],   [],   [],   [],   [],   [],   fb,   [],   [],   [],   [],   [],   [],   [b],  [],   // 4\r\n                [],   [],   [],   [b],  [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 5\r\n                fb,   [],   [],   [],   [],   fb,   [],   [],   fb,   [],   [],   [],   [],   fb,   [f],  [],   // 6\r\n                fb,   [],   [],   [],   [],   fbw,  fbw,  [],   [],   [],   [],   [],   [],   [],   [],   [],   // 7\r\n                [],   [],   [],   [f],  [],   [],   wh,   [],   fh,   [],   [],   [],   [],   [],   [f],  fh,   // 8\r\n                [],   [],   [],   [],   [],   [],   [],   [h],  [],   [],   [],   [],   [],   [],   [],   [],   // 9\r\n                [h],  [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // A\r\n                [],   [p],  [],   [],   [],   [],   phs,  [],   [],   [],   [],   [],   [],   [],   [p],  [],   // B\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [p],  [],   [],   [],   [],   [],   [p],  // C\r\n                [],   [p],  [],   [],   [],   [],   [],   [p],  [],   [],   [],   [],   [],   [],   [],   [],   // D\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // E\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // F\r\n            ],\r\n            [\r\n             // 0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    A,    B,    C,    D,    E,    F}\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 0\r\n                [],   [],   sp2,  [],   [],   [],   [],   [],   [],   [],   [],   [],   [h],  [],   [],   [],   // 1\r\n                hns,  [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 2\r\n                [],   [],   fr,   [],   [],   fh,   [],   fs,   [],   [],   fhr,  [],   [],   [f],  [],   [],   // 3\r\n                [f],  [],   [],   [],   [],   [],   fr,   [],   [],   [],   [],   [],   [],   [],   [],   [f],  // 4\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [f],  // 5\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 6\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 7\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 8\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 9\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [f],  [p2], // A\r\n                [],   [],   [],   [h],  [],   [],   [],   [],   [],   [],   [],   [h],  [],   [],   [],   [],   // B\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [f],  [],   [],   [],   [],   [],   [],   [],   // C\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   fh,   // D\r\n                [],   [],   [],   [],   [],   [b],  fh,   [],   [],   [],   [],   [],   [],   [],   [],   [],   // E\r\n                [],   [],   [w],  [],   [b],  [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // F\r\n            ], \r\n            [\r\n             // 0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    A,    B,    C,    D,    E,    F}\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 0\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 1\r\n                [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   [],   // 2\r\n            ]\r\n        ]\r\n    );\r\n};\r\n\r\nexport default ShuffleChests;","import { ReadByteFromFile, WriteBytesToFile } from \"./ReadRom\";\r\nimport { TDataAddresses } from \"../Constants/uAddresses\";\r\nimport { UW_0, UW_1, UW_2, UW_3 } from \"../Constants/uConstants\";\r\n\r\nexport const GetEventAddress = (uwID, roomID) => {\r\n    let result = 0;\r\n    let startAddr = 0;\r\n    let addr = 0;\r\n\r\n    /* Underworld ID */\r\n    switch (uwID) {\r\n        case UW_0 : return result;\r\n        case UW_1 : startAddr = TDataAddresses.Events[1]; break; //$50000;\r\n        case UW_2 : startAddr = TDataAddresses.Events[2]; break; //$50100;\r\n        case UW_3 : startAddr = TDataAddresses.Events[3]; break; //$50200;\r\n        default : break;\r\n    }\r\n  \r\n    /* Address */\r\n    addr = startAddr + roomID;\r\n  \r\n    /* Data */\r\n    result = addr;\r\n\r\n    return result;\r\n};\r\n\r\nexport const GetEventContent = (f, uwID, roomID) => {\r\n    let result = 0;\r\n    let addr = 0;\r\n    let b = 0;\r\n\r\n    if (uwID === 0) {\r\n        result = 0;\r\n        return result;\r\n    }\r\n  \r\n    /* Address */\r\n    addr = GetEventAddress(uwID, roomID);\r\n  \r\n    /* Data */\r\n    b = ReadByteFromFile(f, addr);\r\n    result = b;\r\n\r\n    return result;\r\n};\r\n\r\nexport const SetEventContent = (f, uwID, roomID, value) => {\r\n    try {\r\n        if (uwID === 0) {\r\n            return;\r\n        }\r\n        \r\n        /* Address */\r\n        let addr = GetEventAddress(uwID, roomID);\r\n\r\n        /* Data */\r\n        WriteBytesToFile(f, addr, [value]);\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n    }\r\n\r\n    return true;\r\n};","import { ReadByteFromFile, WriteBytesToFile, GetROMVersion } from \"../../../data/Read/ReadRom\";\r\nimport { GetEventContent, SetEventContent } from \"../../../data/Read/Events\";\r\nimport { WriteRoomTile } from \"../../../data/Read/RoomTiles\";\r\nimport { LowNibble, HexToInt, IntToHex, RandomRange } from \"../../../utilities\";\r\nimport { GetChestContent, SetChestContent, \r\n    LA_Gel,\r\n    LA_20Rupees,\r\n    LA_50Rupees,\r\n    LA_100Rupees,\r\n    LA_200Rupees,\r\n    LA_500Rupees,\r\n    LA_SeaShell,\r\n    LA_BOMB,\r\n} from \"../../Read/Chests\";\r\nimport { TDataAddresses } from \"../../Constants/uAddresses\";\r\nimport { LA_SPRITE_HEART_PIECE, LA_SPRITE_RUPEE_HIDDEN, ReadSprite, WriteSprite, GetSpriteObjects, SetSpritePointer } from \"../../../data/Read/Sprites\";\r\nimport { SetRoomObject, GetRoomObjectByID } from \"../../../data/Read/RoomData\";\r\nimport { UNDERWORLD_SIZE_X, UNDERWORLD_SIZE_Y } from \"../../Constants/uConstants\";\r\nimport { ReplaceRoomObjectWithChest } from \"../RandomizeUtil\";\r\n\r\nconst ShuffleHeartPieces = (f) => {\r\n    let currAddr;\r\n    let randNum;\r\n\r\n    /* Blank out unused data at the end of the sprite bank */\r\n    for (currAddr = TDataAddresses.DeadSpriteArea[0]; currAddr <= TDataAddresses.DeadSpriteArea[1]; currAddr++) {\r\n        WriteBytesToFile(f, currAddr, [0x00]);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 0, 0x00, 11);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 0, 0x44, 2);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 1, 0xE8, 5);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 2, 0xA4, 0);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 2, 0xAB, 3);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 2, 0xBA, 10);\r\n    }\r\n\r\n    randNum =RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 2, 0xE5, 4);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 2, 0xDF, 9);\r\n    }\r\n\r\n    randNum = RandomRange(0, 11);\r\n    if (randNum >= 3) {\r\n        ReplaceHeartContainerWithChest(f, 2, 0xE6, 8);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /* Do not randomize */\r\n\r\n    // randNum = RandomRange(0, 12);\r\n    // if (randNum >= 3) {\r\n    //     ReplaceHeartContainerWithChest(f, 0, 0x78, 6); // heart next to castle\r\n    // }\r\n\r\n    // randNum = RandomRange(0, 12);\r\n    // if (randNum >= 3) {\r\n    //     ReplaceHeartContainerWithChest(f, 1, 0xF2, 7); // deep water cave\r\n    // }\r\n\r\n    // randNum = RandomRange(0, 11);\r\n    // if (randNum >= 3) {\r\n    //     ReplaceHeartContainerWithChest(f, 2, 0xB1, 1); // Fishing game\r\n    // }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ReplaceHeartContainerWithChest = (f, uwID, roomID, idx) => {\r\n    let result = false;\r\n\r\n    let sprite = {};\r\n    let RO1 = {};\r\n    let RO2 = {};\r\n    let x = 0;\r\n    let y = 0;\r\n    let mapping = 0;\r\n    let b = 0;\r\n    let chestMapping = [];\r\n    let randNum = 0;\r\n    let chestContent = 0;\r\n    let loop_uwID = 0;\r\n    let loop_roomID = 0;\r\n    let replace_uwID = 0;\r\n    let replace_roomID = 0;\r\n    let i = 0;\r\n    let ol = [];\r\n    let newAddr = 0;\r\n    let newPointer = 0;\r\n    let s = \"\";\r\n    let addr = 0;\r\n    let bytesAvailable = 0;\r\n    let needNumBytes = 0;\r\n    let eventID = 0;\r\n    let yxChestPosition = 0;\r\n    let RAM_FlagUWID = 0;\r\n    let b1 = 0;\r\n    let b2 = 0;\r\n    let b3 = 0;\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Find a chest to replace */\r\n\r\n    /* Find all chests that could possibly be replaced. */\r\n    for (loop_uwID = 0; loop_uwID <= 2; loop_uwID++) {\r\n        for (y = 0x00; y <= UNDERWORLD_SIZE_Y; y++) {\r\n            for (x = 0x00; x <= UNDERWORLD_SIZE_X; x++) {\r\n                loop_roomID = (0x10 * y) + x;\r\n                b = GetChestContent(f, loop_uwID, loop_roomID);\r\n                if ([\r\n                    LA_20Rupees, \r\n                    LA_50Rupees, \r\n                    LA_100Rupees, \r\n                    LA_200Rupees, \r\n                    LA_500Rupees, \r\n                    LA_SeaShell, \r\n                    LA_BOMB].includes(b)\r\n                ) {\r\n                    if (\r\n                        (! ((loop_uwID === 1) && (loop_roomID = 0xF2))) &&   // ignore water heart cave\r\n                        (! ((loop_uwID === 2) && (loop_roomID = 0xF2))) &&   // ignore 5 chest room\r\n                        (! ((loop_uwID === 2) && (loop_roomID = 0x1C)))      // Ignore D7 hookshot chest\r\n                    ) {\r\n                        chestMapping.push((0x100 * loop_uwID) + loop_roomID);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Pick one to replace */\r\n    randNum = RandomRange(0, chestMapping.length-1);\r\n    mapping = chestMapping[randNum];\r\n    replace_uwID = Math.trunc(mapping / 0x100);\r\n    replace_roomID = mapping % 0x100;\r\n\r\n\r\n\r\n    // Debug\r\n\r\n    // console.log(`${replace_uwID} ${replace_roomID}`);\r\n    // if ((replace_uwID === 0) && (replace_roomID === 0x71)) { \r\n    //     debugger;\r\n    // }\r\n\r\n    // replace_uwID = 0;\r\n    // replace_roomID = 0x71;\r\n\r\n\r\n\r\n\r\n\r\n    /* What are we replacing? */\r\n    chestContent = GetChestContent(f, replace_uwID, replace_roomID);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Do we have space? */\r\n\r\n    /* Find space at the end of the bank to put in sprite data. */\r\n    newAddr = 0;\r\n    bytesAvailable = 0;\r\n    for (addr = (TDataAddresses.DeadSpriteArea[1]-1); addr >= TDataAddresses.DeadSpriteArea[0]; addr--) {\r\n        b = ReadByteFromFile(f, addr);\r\n        if (b === 0) {\r\n            newAddr = addr;\r\n            bytesAvailable++;\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    /* Is there space? */\r\n    if (newAddr === 0) {\r\n        console.error('ERROR: Nowhere to add new sprite data.  Exiting...');\r\n        return;\r\n    }\r\n\r\n    /* Is there enough space? */\r\n    ol = GetSpriteObjects(f, replace_uwID, replace_roomID);\r\n    needNumBytes = (ol.length*2) + 2 + 1; // plus heart yx and id, final 0xFF\r\n    if (needNumBytes > bytesAvailable) {\r\n        console.error('ERROR: Not enough space to add new sprite data.  Exiting...');\r\n        return;\r\n    }\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Can't do yet, would need to remove heart altogether. */\r\n    //  if (uwID = 0) and (roomID = 0x78) then\r\n    //  begin\r\n    //    ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x70, 0x04, 0x45, chestContent); // check castle heart\r\n    //  end;\r\n\r\n    /* Can't do yet, would need to remove heart altogether. */\r\n    //  if (uwID = 1) and (roomID = 0xF2) then\r\n    //  begin\r\n    //    ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x09, 0xDF, 0x45, chestContent); // check deep water\r\n    //  end;\r\n\r\n    /* Replace heart container with a chest */\r\n    if (ReadSprite(f, uwID, roomID, LA_SPRITE_HEART_PIECE, sprite)) {\r\n        /* Replace Heart Container with random sprite */\r\n        sprite.yx = 0x00;\r\n        sprite.id = LA_SPRITE_RUPEE_HIDDEN;\r\n        WriteSprite(f, sprite);\r\n        sprite = {};\r\n        result = true;\r\n\r\n        switch (uwID) {\r\n            case 0:\r\n                switch (roomID) {\r\n                    case 0x00: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x79, 0x09, 0x25, chestContent); break;\r\n                    case 0x44: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x58, 0x44, 0x44, chestContent); break;\r\n                    //case 0x78: done above\r\n                    default: break;\r\n                }\r\n                break;\r\n\r\n            case 1:\r\n                switch (roomID) {\r\n                    case 0xE8: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x67, 0x0F, 0x14, chestContent); break;\r\n                    //case 0xF2: done above\r\n                    default: break;\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                switch (roomID) {\r\n                    case 0xA4: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x57, 0x0F, 0x44, chestContent); break;\r\n                    case 0xAB: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x64, 0x0D, 0x33, chestContent); break;\r\n                    case 0xBA: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x18, 0x0F, 0x33, chestContent); break;\r\n                    case 0xE5: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x55, 0x05, 0x35, chestContent); break;\r\n                    case 0xDF: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x57, 0xAE, 0x16, chestContent); break;\r\n                    case 0xE6: ReplaceRoomObjectWithChest(f, uwID, roomID, 1, 0x39, 0x05, 0x11, chestContent); break;\r\n                    default: break;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    else {\r\n        console.error('ERROR: Could not find Heart Container sprite!');\r\n        return;\r\n    }\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Remove the random select chest [PB is default value] */\r\n    SetChestContent(f, replace_uwID, replace_roomID, LA_Gel);\r\n\r\n    /* If an event spawned this chest, remove the event. */\r\n    eventID = GetEventContent(f, replace_uwID, replace_roomID);\r\n    if (LowNibble(eventID) === 0x06) {\r\n        SetEventContent(f, replace_uwID, replace_roomID, 0x00);\r\n    }\r\n\r\n    /* Change the room data to a floor tile */\r\n    yxChestPosition = 0x00;\r\n    if (replace_uwID !== 0) {\r\n        RO1 = GetRoomObjectByID(f, replace_uwID, replace_roomID, 0xA0);\r\n        RO2 = GetRoomObjectByID(f, replace_uwID, replace_roomID, 0xA1);\r\n        if (RO1) {\r\n            yxChestPosition = RO1.yx;\r\n            RO1.id = 0x0F;\r\n            SetRoomObject(f, RO1);\r\n            RO1 = {};\r\n        }\r\n        else if (RO2) {\r\n            yxChestPosition = RO2.yx;\r\n            RO2.id = 0x0F;\r\n            SetRoomObject(f, RO2);\r\n            RO2 = {};\r\n        }\r\n        else {\r\n            console.error('ERROR: Could not find RoomData Object!');\r\n        }\r\n    }\r\n    else {\r\n        RO1 = GetRoomObjectByID(f, replace_uwID, replace_roomID, 0xA0);\r\n        RO2 = GetRoomObjectByID(f, replace_uwID, replace_roomID, 0xA1);\r\n        if (RO1) {\r\n            yxChestPosition = RO1.yx;\r\n            RO1.id = 0x03;\r\n            SetRoomObject(f, RO1);\r\n            if (replace_uwID === 0) {\r\n                WriteRoomTile(f, replace_uwID, replace_roomID, RO1.yx, 0x03);\r\n            }\r\n            RO1 = {};\r\n        }\r\n        else if (RO2) {\r\n            yxChestPosition = RO2.yx;\r\n            RO2.id = 0x03;\r\n            SetRoomObject(f, RO2);\r\n            if (replace_uwID === 0) {\r\n                WriteRoomTile(f, replace_uwID, replace_roomID, RO2.yx, 0x03);\r\n            }\r\n            RO2 = {};\r\n        }\r\n        else {\r\n            console.error('ERROR: Could not find RoomData Object sprite!');\r\n        }\r\n    }\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Insert sprite... */\r\n\r\n    /* Write new pointer */\r\n    newPointer = (newAddr % 0x4000) + 0x4000;\r\n    s = IntToHex(newPointer, 4);\r\n    SetSpritePointer(f, replace_uwID, replace_roomID, HexToInt(s[2] + s[3]), HexToInt(s[0] + s[1]));\r\n\r\n    /* Write sprites to new address */\r\n    for (i = 0; i <= ol.length-1; i++) {\r\n        sprite = ol[i];\r\n        b1 = sprite.yx;\r\n        b2 = sprite.id;\r\n        WriteBytesToFile(f, newAddr, [b1, b2]);\r\n\r\n        newAddr = newAddr + 2;\r\n    }\r\n\r\n    /* yx, id, end */\r\n    b1 = yxChestPosition;       // heart piece yx\r\n    b2 = LA_SPRITE_HEART_PIECE; // heart piece id\r\n    b3 = 0xFF;                   // end\r\n    WriteBytesToFile(f, newAddr, [b1, b2, b3]);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Change the heart container room flag to the new room.  The game checks\r\n        these areas of memory when a death or reset happens, and adds up how many\r\n        of them have the item grabbed flag. */\r\n    switch (replace_uwID) {\r\n        case 0: RAM_FlagUWID = 0xD8; break;\r\n        case 1: RAM_FlagUWID = 0xD9; break;\r\n        case 2: RAM_FlagUWID = 0xDA; break;\r\n        default: RAM_FlagUWID = 0xD8; // meh\r\n    }\r\n\r\n    /* Move to the correct heart index flag */\r\n    switch (GetROMVersion(f)) {\r\n        case 0:\r\n            // These flags are not in this verison?\r\n            break;\r\n\r\n        case 2:\r\n            addr = 0x5EB2 + (idx * 2);\r\n            b1 = replace_roomID;\r\n            b2 = RAM_FlagUWID;\r\n            WriteBytesToFile(f, addr, [b1, b2]);\r\n            break;\r\n\r\n        default: \r\n            break;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport default ShuffleHeartPieces;","import { WriteBytesToFile, GetROMVersion } from \"../../../data/Read/ReadRom\";\r\nimport { RandomRange, HexToInt } from \"../../../utilities\";\r\n\r\nexport const ShuffleSeashellReq = (f) => {\r\n    let randNum = RandomRange(11, 22);\r\n  \r\n    /* Seashell mansion checks for base 10 number instead of base 16 like normal */\r\n    switch (GetROMVersion(f)) {\r\n        case 0 : WriteBytesToFile(f, 0x672A6, [HexToInt('0x' + randNum)]); break;\r\n        case 2 : WriteBytesToFile(f, 0x672AC, [HexToInt('0x' + randNum)]); break;\r\n        default : console.error(\"[Error] function ShuffleSeashellReq - invalid ROM version\");\r\n    }\r\n};\r\n\r\nexport default ShuffleSeashellReq;","import { WriteBytesToFileVersion } from \"../../../data/Read/ReadRom\";\r\nimport { RandomRange, RoomExists } from \"../../../utilities\";\r\nimport {\r\n    LA_POWERBRACLET,\r\n    LA_SWORDv0,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_POWDER,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_BOOTS,\r\n    GetChestContent,\r\n    SetChestContent,\r\n} from \"../../Read/Chests\";\r\n\r\nconst ShuffleShopItems = (f) => {\r\n\r\n    let equipItem00 = 0;\r\n    let equipItem01 = 0;      // eslint-disable-line no-unused-vars\r\n    let equipItem02 = 0;      // eslint-disable-line no-unused-vars\r\n    let equipItem03 = 0;      // eslint-disable-line no-unused-vars\r\n    let equipItem04 = 0;\r\n    let equipItem05 = 0;      // eslint-disable-line no-unused-vars \r\n\r\n    let item00GraphicIdx = 0;\r\n    let item01GraphicIdx = 0; // eslint-disable-line no-unused-vars\r\n    let item02GraphicIdx = 0; // eslint-disable-line no-unused-vars\r\n    let item03GraphicIdx = 0; // eslint-disable-line no-unused-vars\r\n    let item04GraphicIdx = 0;\r\n    let item05GraphicIdx = 0; // eslint-disable-line no-unused-vars\r\n\r\n    let bank      = 0;\r\n    let startAddr = 0;\r\n    let item      = 0;       // eslint-disable-line no-unused-vars\r\n\r\n    let uwID   = 0;\r\n    let roomID = 0;\r\n    let b      = 0;\r\n    let found  = false;\r\n    let result;\r\n\r\n    const EquipItemToChestItem = (value) => {\r\n\r\n        let result;\r\n\r\n        switch (value) {\r\n            case 0x03 : result = LA_POWERBRACLET; break;\r\n            case 0x01 : result = LA_SWORDv0; break;\r\n            case 0x04 : result = LA_MIRRORSHIELD; break;\r\n            case 0x05 : result = LA_BOW; break;\r\n            case 0x06 : result = LA_HOOKSHOT; break;\r\n            case 0x07 : result = LA_FIREROD; break;\r\n            case 0x0C : result = LA_POWDER; break;\r\n            case 0x09 : result = LA_OCARINA; break;\r\n            case 0x0A : result = LA_FEATHER; break;\r\n            case 0x0B : result = LA_SHOVEL; break;\r\n            case 0x08 : result = LA_BOOTS; break;\r\n            default : \r\n                result = 0;\r\n                console.error('[ERROR] EquipItemToChestItem given invalid byte!');\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    const ChooseRandomItem = () => {\r\n        let selectedItem = 0;\r\n        let graphicIdx = 0;\r\n        let equipItem = 0;\r\n\r\n        selectedItem = RandomRange(0x01, 0x07);\r\n\r\n        // selectedItem = 0x08;\r\n\r\n        switch (selectedItem) {\r\n            case 0x01 : graphicIdx = 0x88; break;      // Bow\r\n            case 0x02 : graphicIdx = 0x8A; break;      // Hookshot\r\n            case 0x03 : graphicIdx = 0x8C; break;      // Firerod\r\n            case 0x04 : graphicIdx = 0x90; break;      // Ocarina\r\n            case 0x05 : graphicIdx = 0x92; break;      // Feather\r\n            case 0x06 : graphicIdx = 0x96; break;      // Shovel\r\n            case 0x07 : graphicIdx = 0x98; break;      // Boots\r\n            // case 0x01 : graphicIdx = 0x82; break;   // Power Bracelet\r\n            // case 0x02 : graphicIdx = 0x86; break;   // Shield\r\n            // case 0x01 : graphicIdx = 0x80; break;   // Bomb\r\n            // case 0x0E : graphicIdx = 0x9E; break;   // Seashell\r\n            // case 0x0F : graphicIdx = 0xA0; break;   // Medicine\r\n            // case 0x07 : graphicIdx = 0x8E; break;   // Powder\r\n            // case 0x07 : graphicIdx = 0x94; break;   // Flippers Fails because it goes into inventory slots instead of flipper spot\r\n            //case 0x02 : graphicIdx = 0x84; break;    // Sword Fails because sword level does not increase\r\n            default : graphicIdx = 0x82; break;\r\n        }\r\n\r\n        switch (selectedItem) {\r\n            case 0x01 : equipItem = 0x05; break;      // Bow\r\n            case 0x02 : equipItem = 0x06; break;      // Hookshot\r\n            case 0x03 : equipItem = 0x07; break;      // Firerod\r\n            case 0x04 : equipItem = 0x09; break;      // Ocarina\r\n            case 0x05 : equipItem = 0x0A; break;      // Feather\r\n            case 0x06 : equipItem = 0x0B; break;      // Shovel\r\n            case 0x07 : equipItem = 0x08; break;      // Boots\r\n            // case 0x01 : equipItem = 0x03; break;   // Power Bracelet\r\n            // case 0x02 : equipItem = 0x04; break;   // Shield\r\n            // case 0x01 : equipItem = 0x02; break;   // Bomb\r\n            // case 0x0E : equipItem = 0x9E; break;   // Seashell\r\n            // case 0x0F : equipItem = 0xA0; break;   // Medicine\r\n            // case 0x07 : equipItem = 0x0C; break;   // Powder\r\n            //case 0x07 : equipItem = 0x94; break;    // Flippers Fails because it goes into inventory slots instead of flipper spot\r\n            // case 0x02 : equipItem = 0x01; break;   // Sword Fails because sword level does not increase\r\n            default : equipItem = 0x03; break;\r\n        }\r\n\r\n        return ({\r\n            graphicIdx : graphicIdx,\r\n            equipItem : equipItem\r\n        });\r\n    };\r\n\r\n    bank = 4;\r\n    startAddr = ((bank - 1) * 0x4000);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Item graphic [transparent] */\r\n    WriteBytesToFileVersion(f, startAddr + 0x7B5A, startAddr + 0x7B66, [0xFF]);                   // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x7B62, startAddr + 0x7B6E, [0xFF]);                   // bow\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    while (equipItem00 === equipItem04) {\r\n        /* Choose item */\r\n        result = ChooseRandomItem();\r\n        item00GraphicIdx = result.graphicIdx;\r\n        equipItem00 = result.equipItem;\r\n    \r\n        result = ChooseRandomItem();\r\n        item01GraphicIdx = result.graphicIdx;\r\n        equipItem01 = result.equipItem;\r\n    \r\n        result = ChooseRandomItem();\r\n        item02GraphicIdx = result.graphicIdx;\r\n        equipItem02 = result.equipItem;\r\n    \r\n        result = ChooseRandomItem();\r\n        item03GraphicIdx = result.graphicIdx;\r\n        equipItem03 = result.equipItem;\r\n    \r\n        result = ChooseRandomItem();\r\n        item04GraphicIdx = result.graphicIdx;\r\n        equipItem04 = result.equipItem;\r\n    \r\n        result = ChooseRandomItem();\r\n        item05GraphicIdx = result.graphicIdx;\r\n        equipItem05 = result.equipItem;\r\n    }\r\n\r\n    /* If Bow becomes the first item, then we can't swap the shovel anywhere, so it becomes the 2nd item */\r\n    if (EquipItemToChestItem(equipItem00) === LA_BOW) {\r\n        item04GraphicIdx = 0x96;\r\n        equipItem04 = 0x0B;\r\n    }\r\n\r\n    /* Item graphic [real] */\r\n    WriteBytesToFileVersion(f, startAddr + 0x7B5A, startAddr + 0x7B66, [item00GraphicIdx]);      // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x7B62, startAddr + 0x7B6E, [item04GraphicIdx]);      // bow\r\n\r\n    /* Purchased */\r\n    WriteBytesToFileVersion(f, startAddr + 0x7AAA, startAddr + 0x7AB6, [equipItem00]);           // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x7A74, startAddr + 0x7A80, [equipItem04]);           // bow\r\n\r\n    /* Determine phase */\r\n    WriteBytesToFileVersion(f, startAddr + 0x784F, startAddr + 0x784F, [equipItem00]);           // shovel with goriya\r\n    WriteBytesToFileVersion(f, startAddr + 0x7854, startAddr + 0x7854, [equipItem00]);           // shovel with player\r\n    WriteBytesToFileVersion(f, startAddr + 0x7868, startAddr + 0x7868, [equipItem04]);           // bow with goriya\r\n    WriteBytesToFileVersion(f, startAddr + 0x786D, startAddr + 0x786D, [equipItem04]);           // bow with player\r\n\r\n    /* Shovel - Replace new shop item's chest with original shop item */\r\n    found = false;\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                if (!found) {\r\n                    b = GetChestContent(f, uwID, roomID);\r\n                    if (b === EquipItemToChestItem(equipItem00)) {\r\n                        b = LA_SHOVEL;\r\n                        SetChestContent(f, uwID, roomID, b);\r\n                        found = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Bow - Replace new shop item's chest with original shop item */\r\n    found = false;\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                if (!found) {\r\n                    b = GetChestContent(f, uwID, roomID);\r\n                    if (b === EquipItemToChestItem(equipItem04)) {\r\n                        b = LA_BOW;\r\n                        SetChestContent(f, uwID, roomID, b);\r\n                        found = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default ShuffleShopItems;\r\n","import { WriteBytesToFileVersion } from \"../../../data/Read/ReadRom\";\r\nimport { RandomRange, StrToInt, LeftPad } from \"../../../utilities\";\r\n\r\nconst ShuffleShopPrices = (f) => {\r\n\r\n    let itemPrice00 = 0;\r\n    let itemPrice01 = 0;\r\n    let itemPrice02 = 0;\r\n    let itemPrice03 = 0;\r\n    let itemPrice04 = 0;\r\n    let itemPrice05 = 0;\r\n\r\n    let itemPrice0Hi = 0;\r\n    let itemPrice1Hi = 0;\r\n    let itemPrice2Hi = 0; \r\n    let itemPrice3Hi = 0;\r\n    let itemPrice4Hi = 0;\r\n    let itemPrice5Hi = 0;\r\n    let itemPrice0Lo = 0;\r\n    let itemPrice1Lo = 0;\r\n    let itemPrice2Lo = 0;\r\n    let itemPrice3Lo = 0;\r\n    let itemPrice4Lo = 0;\r\n    let itemPrice5Lo = 0;\r\n\r\n    let bank         = 0;\r\n    let startAddr    = 0;\r\n    let result;\r\n\r\n    const NumberToTextByte = (b) => {\r\n        switch (b) {\r\n            case 0 : result = 0xB0; break;\r\n            case 1 : result = 0xB1; break;\r\n            case 2 : result = 0xB2; break;\r\n            case 3 : result = 0xB3; break;\r\n            case 4 : result = 0xB4; break;\r\n            case 5 : result = 0xB5; break;\r\n            case 6 : result = 0xB6; break;\r\n            case 7 : result = 0xB7; break;\r\n            case 8 : result = 0xB8; break;\r\n            case 9 : result = 0xB9; break;\r\n            default :\r\n                console.error('Error: NumberToTextByte given invalid byte!');\r\n                result = 0x00;\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    const PriceToText = (n) => {\r\n        let result = [];\r\n        let s = '';\r\n        \r\n        s = LeftPad(n, 3);\r\n\r\n        result[0] = 0x7F;\r\n        result[1] = 0x7F;\r\n        result[2] = 0x7F;\r\n\r\n        /* Only display digit 3 if not zero */\r\n        if (StrToInt(s[0]) !== 0) {\r\n            result[0] = NumberToTextByte(StrToInt(s[0]));\r\n        } \r\n\r\n        /* Only display digit 2 if not zero or digit 3 is not zero */\r\n        if ((StrToInt(s[1]) !== 0) || (StrToInt(s[0]) !== 0)) {\r\n            result[1] = NumberToTextByte(StrToInt(s[1]));\r\n        }\r\n\r\n        /* Always display digit 1 */\r\n        result[2] = NumberToTextByte(StrToInt(s[2]));\r\n\r\n        return result;\r\n    };\r\n\r\n    const PriceToPriceCode = (n) => {\r\n        return ({\r\n            hi : Math.floor(n / 256),\r\n            lo : n % 256\r\n        });\r\n    };\r\n\r\n    bank = 4;\r\n    startAddr = ((bank - 1) * 0x4000);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Price text [transparent] */\r\n    WriteBytesToFileVersion(f, startAddr + 0x7735, startAddr + 0x7735, [0x7F, 0x7F, 0x7F]);         // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x7740, startAddr + 0x7740, [0x7F, 0x7F, 0x7F]);         // heart\r\n    WriteBytesToFileVersion(f, startAddr + 0x774B, startAddr + 0x774B, [0x7F, 0x7F, 0x7F]);         // shield\r\n    WriteBytesToFileVersion(f, startAddr + 0x7756, startAddr + 0x7756, [0x7F, 0x7F, 0x7F]);         // bomb\r\n    WriteBytesToFileVersion(f, startAddr + 0x7761, startAddr + 0x7761, [0x7F, 0x7F, 0x7F]);         // bow\r\n    WriteBytesToFileVersion(f, startAddr + 0x776C, startAddr + 0x776C, [0x7F, 0x7F, 0x7F]);         // arrow\r\n\r\n    /* Side text [transparent] */\r\n    WriteBytesToFileVersion(f, startAddr + 0x773B, startAddr + 0x773B, [0x7F, 0x7F]);              // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x7746, startAddr + 0x7746, [0x7F, 0x7F]);              // heart\r\n    WriteBytesToFileVersion(f, startAddr + 0x7751, startAddr + 0x7751, [0x7F, 0x7F]);              // shield\r\n    WriteBytesToFileVersion(f, startAddr + 0x775C, startAddr + 0x775C, [0x7F, 0x7F]);              // bomb\r\n    WriteBytesToFileVersion(f, startAddr + 0x7767, startAddr + 0x7767, [0x7F, 0x7F]);              // bow\r\n    WriteBytesToFileVersion(f, startAddr + 0x7772, startAddr + 0x7772, [0x7F, 0x7F]);              // arrow\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    itemPrice00 = RandomRange(100, 300);  // shovel\r\n    itemPrice01 = RandomRange(1, 20);     // heart\r\n    itemPrice02 = RandomRange(1, 30);     // shield\r\n    itemPrice03 = RandomRange(1, 30);     // bomb\r\n    itemPrice04 = RandomRange(500, 999);  // bow\r\n    itemPrice05 = RandomRange(1, 40);     // arrow\r\n\r\n    /* Debug */\r\n    //  itemPrice00 = 100;  // shovel\r\n    //  itemPrice01 = 200;  // heart\r\n    //  itemPrice02 = 300;  // shield\r\n    //  itemPrice03 = 400;  // bomb\r\n    //  itemPrice04 = 500;  // bow\r\n    //  itemPrice05 = 600;  // arrow\r\n\r\n    /* Price text [real] */\r\n    WriteBytesToFileVersion(f, startAddr + 0x7735, startAddr + 0x7735, PriceToText(itemPrice00));  // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x7740, startAddr + 0x7740, PriceToText(itemPrice01));  // heart\r\n    WriteBytesToFileVersion(f, startAddr + 0x774B, startAddr + 0x774B, PriceToText(itemPrice02));  // shield\r\n    WriteBytesToFileVersion(f, startAddr + 0x7756, startAddr + 0x7756, PriceToText(itemPrice03));  // bomb\r\n    WriteBytesToFileVersion(f, startAddr + 0x7761, startAddr + 0x7761, PriceToText(itemPrice04));  // bow\r\n    WriteBytesToFileVersion(f, startAddr + 0x776C, startAddr + 0x776C, PriceToText(itemPrice05));  // arrow\r\n\r\n    result = PriceToPriceCode(itemPrice00);                                                     // shovel\r\n    itemPrice0Hi = result.hi; \r\n    itemPrice0Lo = result.lo; \r\n\r\n    result = PriceToPriceCode(itemPrice01);                                                     // heart\r\n    itemPrice1Hi = result.hi; \r\n    itemPrice1Lo = result.lo; \r\n\r\n    result = PriceToPriceCode(itemPrice02);                                                     // shield\r\n    itemPrice2Hi = result.hi; \r\n    itemPrice2Lo = result.lo; \r\n\r\n    result = PriceToPriceCode(itemPrice03);                                                     // bomb\r\n    itemPrice3Hi = result.hi; \r\n    itemPrice3Lo = result.lo; \r\n\r\n    result = PriceToPriceCode(itemPrice04);                                                     // bow\r\n    itemPrice4Hi = result.hi; \r\n    itemPrice4Lo = result.lo; \r\n\r\n    result = PriceToPriceCode(itemPrice05);                                                     // arrow\r\n    itemPrice5Hi = result.hi; \r\n    itemPrice5Lo = result.lo; \r\n\r\n    let itemPriceStr00 = itemPrice00.toString().padStart(3, '0');\r\n    let itemPriceStr01 = itemPrice01.toString().padStart(3, '0');\r\n    let itemPriceStr02 = itemPrice02.toString().padStart(3, '0');\r\n    let itemPriceStr03 = itemPrice03.toString().padStart(3, '0');\r\n    let itemPriceStr04 = itemPrice04.toString().padStart(3, '0');\r\n    let itemPriceStr05 = itemPrice05.toString().padStart(3, '0');\r\n\r\n    let itemPriceHiNeeded00 = parseInt(itemPriceStr00[0]);\r\n    let itemPriceHiNeeded01 = parseInt(itemPriceStr01[0]);\r\n    let itemPriceHiNeeded02 = parseInt(itemPriceStr02[0]);\r\n    let itemPriceHiNeeded03 = parseInt(itemPriceStr03[0]);\r\n    let itemPriceHiNeeded04 = parseInt(itemPriceStr04[0]);\r\n    let itemPriceHiNeeded05 = parseInt(itemPriceStr05[0]);\r\n\r\n    let itemPriceLoNeeded00 = parseInt(itemPriceStr00.slice(1, 3), 16);\r\n    let itemPriceLoNeeded01 = parseInt(itemPriceStr01.slice(1, 3), 16);\r\n    let itemPriceLoNeeded02 = parseInt(itemPriceStr02.slice(1, 3), 16);\r\n    let itemPriceLoNeeded03 = parseInt(itemPriceStr03.slice(1, 3), 16);\r\n    let itemPriceLoNeeded04 = parseInt(itemPriceStr04.slice(1, 3), 16);\r\n    let itemPriceLoNeeded05 = parseInt(itemPriceStr05.slice(1, 3), 16);\r\n\r\n    /* Price Hi Needed */\r\n    WriteBytesToFileVersion(f, startAddr + 0x77D4, startAddr + 0x77D4, [itemPriceHiNeeded00]);            // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x77D5, startAddr + 0x77D5, [itemPriceHiNeeded01]);            // heart\r\n    WriteBytesToFileVersion(f, startAddr + 0x77D6, startAddr + 0x77D6, [itemPriceHiNeeded02]);            // shield\r\n    WriteBytesToFileVersion(f, startAddr + 0x77D7, startAddr + 0x77D7, [itemPriceHiNeeded03]);            // bomb\r\n    WriteBytesToFileVersion(f, startAddr + 0x77D8, startAddr + 0x77D8, [itemPriceHiNeeded04]);            // bow\r\n    WriteBytesToFileVersion(f, startAddr + 0x77D9, startAddr + 0x77D9, [itemPriceHiNeeded05]);            // arrow\r\n\r\n    /* Price Lo Needed */\r\n    WriteBytesToFileVersion(f, startAddr + 0x77DD, startAddr + 0x77DD, [itemPriceLoNeeded00]);            // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x77DE, startAddr + 0x77DE, [itemPriceLoNeeded01]);            // heart\r\n    WriteBytesToFileVersion(f, startAddr + 0x77DF, startAddr + 0x77DF, [itemPriceLoNeeded02]);            // shield\r\n    WriteBytesToFileVersion(f, startAddr + 0x77E0, startAddr + 0x77E0, [itemPriceLoNeeded03]);            // bomb\r\n    WriteBytesToFileVersion(f, startAddr + 0x77E1, startAddr + 0x77E1, [itemPriceLoNeeded04]);            // bow\r\n    WriteBytesToFileVersion(f, startAddr + 0x77E2, startAddr + 0x77E2, [itemPriceLoNeeded05]);            // arrow\r\n\r\n    /* Price Hi Deduction */\r\n    WriteBytesToFileVersion(f, startAddr + 0x77E6, startAddr + 0x77E6, [itemPrice0Hi]);            // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x77E7, startAddr + 0x77E7, [itemPrice1Hi]);            // heart\r\n    WriteBytesToFileVersion(f, startAddr + 0x77E8, startAddr + 0x77E8, [itemPrice2Hi]);            // shield\r\n    WriteBytesToFileVersion(f, startAddr + 0x77E9, startAddr + 0x77E9, [itemPrice3Hi]);            // bomb\r\n    WriteBytesToFileVersion(f, startAddr + 0x77EA, startAddr + 0x77EA, [itemPrice4Hi]);            // bow\r\n    WriteBytesToFileVersion(f, startAddr + 0x77EB, startAddr + 0x77EB, [itemPrice5Hi]);            // arrow\r\n\r\n    /* Price Lo Deduction */\r\n    WriteBytesToFileVersion(f, startAddr + 0x77EF, startAddr + 0x77EF, [itemPrice0Lo]);            // shovel\r\n    WriteBytesToFileVersion(f, startAddr + 0x77F0, startAddr + 0x77F0, [itemPrice1Lo]);            // heart\r\n    WriteBytesToFileVersion(f, startAddr + 0x77F1, startAddr + 0x77F1, [itemPrice2Lo]);            // shield\r\n    WriteBytesToFileVersion(f, startAddr + 0x77F2, startAddr + 0x77F2, [itemPrice3Lo]);            // bomb\r\n    WriteBytesToFileVersion(f, startAddr + 0x77F3, startAddr + 0x77F3, [itemPrice4Lo]);            // bow\r\n    WriteBytesToFileVersion(f, startAddr + 0x77F4, startAddr + 0x77F4, [itemPrice5Lo]);            // arrow\r\n};\r\n\r\nexport default ShuffleShopPrices;","import { WriteSpriteID, LA_SPRITE_SPRITE_SWORD, LA_SPRITE_RUPEE_HIDDEN } from \"../../../data/Read/Sprites\";\r\nimport { LA_SWORDv0 } from \"../../Read/Chests\";\r\nimport { ReplaceRoomObjectWithChest } from \"../RandomizeUtil\";\r\nimport { WriteRoomTile } from \"../../Read/RoomTiles\";\r\n// import { WriteBytesToFile, WriteBytesToFileVersion } from \"../../../data/Read/ReadRom\";\r\n\r\nexport const SwordInChest = (f) => {\r\n    /* Replace sword sprite */\r\n    WriteSpriteID(f, 0, 0xF2, LA_SPRITE_SPRITE_SWORD, LA_SPRITE_RUPEE_HIDDEN);\r\n\r\n    /* Draw chest on overworld */\r\n    WriteRoomTile(f, 0, 0xF2, 0x45, 0xA0);\r\n    ReplaceRoomObjectWithChest(f, 0, 0xF2, 1, 0x44, 0x23, 0x45, LA_SWORDv0);\r\n\r\n    /* Older hack */\r\n\r\n    // /* When checking what a chest contains, jump to spaceotter's custom code to check for sword */\r\n    // WriteBytesToFileVersion(f, 0x0D10C, 0x0D10B, [\r\n    //     0xCD, 0x91, 0x00, 0x00\r\n    // ]);\r\n\r\n    // /* Custom code: If chest contains sword, upgrade sword level.  If not, check if its a bomb \r\n    //    (thats the code that was gutted before) and continue like normal */\r\n    // WriteBytesToFile(f, 0x00091, [\r\n    //     0xFE, 0x0B, 0x20, 0x04, 0x21, 0x4E, 0xDB, 0x34, 0xF0, 0xE8, 0xFE, 0x0A, 0xC9\r\n    // ]); \r\n    \r\n    // /* Add a chest to replace the sword */\r\n    // WriteBytesToFile(f, 0x69B3F, [0xA0]);\r\n    // ReplaceRoomObjectWithChest(f, 0, 0xF2, 1, 0x44, 0x23, 0x44, LA_SWORDv0);\r\n};\r\n\r\nexport default SwordInChest;","import { RoomExists } from \"../../../utilities\";\r\nimport { GetChestContent, SetChestContent, LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees } from \"../../Read/Chests\";\r\n\r\nexport const UpgradeRupeeChests = (f) => {\r\n\r\n    let len;\r\n    let uwID;\r\n    let roomID;\r\n    let arr = [];\r\n    \r\n    /* Get */\r\n    len = 0;\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                arr[len] = GetChestContent(f, uwID, roomID);\r\n                len++;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Upgrade */\r\n    for (let i = 0; i <= arr.length-1; i++) {\r\n        switch (arr[i]) {\r\n            case LA_20Rupees  : arr[i] = LA_50Rupees; break;\r\n            case LA_50Rupees  : arr[i] = LA_100Rupees; break;\r\n            case LA_100Rupees : arr[i] = LA_200Rupees; break;\r\n            default           : break;\r\n        }\r\n    }\r\n\r\n    /* Set */\r\n    len = 0;\r\n    for (uwID = 0; uwID <= 3; uwID++) {\r\n        for (roomID = 0; roomID <= 0xFF; roomID++) {\r\n            if (RoomExists(uwID, roomID)) {\r\n                SetChestContent(f, uwID, roomID, arr[len]);\r\n                len++;\r\n            }\r\n        }\r\n    }\r\n\r\n};\r\n\r\nexport default UpgradeRupeeChests;","import { ReadByteFromFile, WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { IntToHex, StrToInt } from \"../../../utilities\";\r\n\r\nexport const Blackout = (f) => {\r\n    let i = 0;\r\n    let currPointer = 0;\r\n    let b1 = 0;\r\n    let b2 = 0;\r\n    let pointerAddr = 0;\r\n    let currAddr  = 0;\r\n    let s1 = \"\";\r\n    let s2 = \"\";\r\n\r\n    currPointer = 0x843EF;\r\n    do {\r\n        /* Get the pointer address */\r\n        b1 = ReadByteFromFile(f, currPointer); \r\n        b2 = ReadByteFromFile(f, currPointer + 1);\r\n        s1 = IntToHex(b1, 2);\r\n        s2 = IntToHex(b2, 2);\r\n        pointerAddr = StrToInt('0x' + s2[0] + s2[1] + s1[0] + s1[1]);\r\n    \r\n        if (pointerAddr !== 0) {\r\n            /* Get the address */\r\n            currAddr = 0x84000 - 0x4000 + pointerAddr;\r\n    \r\n            /* Blackout the pallette */\r\n            for (i = 0; i <= 31; i++) {\r\n                if (![0, 4, 8, 9, 12, 17].includes(i)) {\r\n                    WriteBytesToFile(f, currAddr, [0x00, 0x00]);\r\n                }\r\n                currAddr = currAddr + 2;\r\n            }\r\n        }\r\n  \r\n        /* Increment to the next pointer address */\r\n        currPointer = currPointer + 2;\r\n  \r\n    } while (currPointer < 0x84412);\r\n\r\n    //----------------------------------------------------------------------------\r\n\r\n    /* Odd rooms */\r\n    currPointer = 0x851F6;\r\n    do {\r\n        /* Get the pointer address */\r\n        b1 = ReadByteFromFile(f, currPointer); \r\n        b2 = ReadByteFromFile(f, currPointer + 1);\r\n        s1 = IntToHex(b1, 2);\r\n        s2 = IntToHex(b2, 2);\r\n        pointerAddr = StrToInt('0x' + s2[0] + s2[1] + s1[0] + s1[1]);\r\n\r\n        if (pointerAddr !== 0) {\r\n            /* Get the address */\r\n            currAddr = 0x84000 - 0x4000 + pointerAddr;\r\n\r\n            /* Blackout the pallette */\r\n            for (i = 0; i <= 31; i++) {\r\n                if (![4, 8, 9, 12, 17].includes(i)) {\r\n                    WriteBytesToFile(f, currAddr, [0x00, 0x00]);\r\n                }\r\n                currAddr = currAddr + 2;\r\n            }\r\n        }\r\n\r\n        /* Increment to the next pointer address */\r\n        currPointer = currPointer + 2;\r\n\r\n    } while (currPointer < 0x85211);\r\n};\r\n\r\nexport default Blackout;","import { ReadByteFromFile } from \"../../data/Read/ReadRom\";\r\nimport { Transpose8By8Graphic } from \"../../utilities\";\r\n\r\nexport const TransposeGraphic = (f, addr) => {\r\n    let result = [];\r\n    let temp1  = [];\r\n    let temp2  = [];\r\n    let temp3  = [];\r\n    let temp4  = [];\r\n    let i      = 0;\r\n\r\n    /* Transpose #1 */\r\n    temp1[0] = ReadByteFromFile(f, addr + 0x00);\r\n    temp1[1] = ReadByteFromFile(f, addr + 0x02);\r\n    temp1[2] = ReadByteFromFile(f, addr + 0x04);\r\n    temp1[3] = ReadByteFromFile(f, addr + 0x06);\r\n    temp1[4] = ReadByteFromFile(f, addr + 0x08);\r\n    temp1[5] = ReadByteFromFile(f, addr + 0x0A);\r\n    temp1[6] = ReadByteFromFile(f, addr + 0x0C);\r\n    temp1[7] = ReadByteFromFile(f, addr + 0x0E);\r\n    temp2 = Transpose8By8Graphic(temp1);\r\n\r\n    /* Transpose #2 */\r\n    temp3[0] = ReadByteFromFile(f, addr + 0x01);\r\n    temp3[1] = ReadByteFromFile(f, addr + 0x03);\r\n    temp3[2] = ReadByteFromFile(f, addr + 0x05);\r\n    temp3[3] = ReadByteFromFile(f, addr + 0x07);\r\n    temp3[4] = ReadByteFromFile(f, addr + 0x09);\r\n    temp3[5] = ReadByteFromFile(f, addr + 0x0B);\r\n    temp3[6] = ReadByteFromFile(f, addr + 0x0D);\r\n    temp3[7] = ReadByteFromFile(f, addr + 0x0F);\r\n    temp4 = Transpose8By8Graphic(temp3);\r\n\r\n    /* Get the new full transposed graphic */\r\n    for (i = 0; i <= 7; i++) {\r\n        result[i*2] = temp2[i];\r\n    }\r\n    for (i = 0; i <= 7; i++) {\r\n        result[i*2 + 1] = temp4[i];\r\n    }\r\n\r\n    return result;\r\n};","import { ReadBytesFromFile, WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { TransposeGraphic } from \"../../../data/Read/Graphics\";\r\nimport { RandomRange } from \"../../../utilities\";\r\n\r\nexport const FunPercent = (f) => {\r\n    let arr = [];\r\n    let transposed8By8_1 = [];\r\n    let transposed8By8_2 = [];\r\n    let randNum = 0;\r\n    let currAddr = 0;\r\n\r\n    /**\r\n      YOSHI DOLL\r\n      ---------------------------------------------------\r\n  \r\n      CF CF 6F 27 FF 07 FF 27 F3 CD C3 CD E1 E1 DF C3\r\n  \r\n      Normal image\r\n      1: CF - 1100 1111, CF - 1100 1111\r\n      2: 6F - 0110 1111, 27 - 0010 0111\r\n      3: FF - 1111 1111, 07 - 0000 0111\r\n      4: FF - 1111 1111, 27 - 0010 0111\r\n      5: F3 - 1111 0011, CD - 1100 1101\r\n      6: C3 - 1100 0011, CD - 1100 1101\r\n      7: E1 - 1110 0001, E1 - 1110 0001\r\n      8: DF - 1101 1111, C3 - 1100 0011\r\n  \r\n      Transponse / Flip on side\r\n      1:    - 1111 1111     - 1111 1111\r\n      2:    - 1111 1101     - 1111 0001\r\n      3:    - 1111 0001     - 1111 1100\r\n      4:    - 1111 0001     - 1000 1100\r\n      5:    - 0011 1001     - 0000 0000\r\n      6:    - 0111 1010     - 0101 0010\r\n      7:    - 1111 1111     - 1000 1111\r\n      8:    - 1011 1111     - 1000 1111\r\n  \r\n      0-0 = black\r\n      1-0 = green\r\n      1-1 = white\r\n      0-1 = purple\r\n    */\r\n    \r\n    /* Sword swing Graphics - Remove the sword */\r\n    WriteBytesToFile(f, 0xB0000 + (5*0x20), [\r\n        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x05, 0x03, 0x0B, 0x07, 0x17, 0x0E, 0x2E, 0x1C,\r\n        0x3C, 0x18, 0x54, 0x38, 0x78, 0x30, 0x68, 0x30, 0x70, 0x20, 0x70, 0x20, 0x70, 0x20, 0x00, 0x00,\r\n        0x3F, 0x00, 0xDF, 0x3F, 0x77, 0xF8, 0xD8, 0xE0, 0xE0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n  \r\n    //----------------------------------------------------------------------------\r\n  \r\n    /* Goat statue */\r\n    arr = ReadBytesFromFile(f, 0xC7000 + (32*0x20), 0x10 * 4);                                 // Goat head\r\n    WriteBytesToFile(f, 0x49800 + (36*0x20), arr);                                  // Statue head when moving\r\n    WriteBytesToFile(f, 0xC9800 + (36*0x20), arr);                                  // Statue head when moving\r\n  \r\n    /* The rotating tail is somewhere else... */\r\n    //WriteBytesToFile(f, 0x3E600 + (0*0x20), arr);                                  // Statue head\r\n    //WriteBytesToFile(f, 0x3E700 + (0*0x20), arr);                                  // Statue head\r\n    //WriteBytesToFile(f, 0xBE600 + (0*0x20), arr);                                  // Statue head\r\n    //WriteBytesToFile(f, 0xBE700 + (0*0x20), arr);                                  // Statue head\r\n  \r\n    //----------------------------------------------------------------------------\r\n  \r\n    /* Rooster -> Kiki */\r\n    WriteBytesToFile(f, 0xC9800 + (40*0x20), [\r\n        0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x0F, 0x00, 0x1F, 0x0D, 0x1F, 0x0F, 0x3F, 0x0A, 0x3F, 0x1F,\r\n        0x7F, 0x3B, 0x7F, 0x04, 0x3F, 0x1F, 0x1F, 0x00, 0x1F, 0x04, 0x3F, 0x16, 0x3F, 0x06, 0x07, 0x00,\r\n        0x00, 0x00, 0xE0, 0x00, 0xF0, 0x00, 0xF8, 0x10, 0xF8, 0x90, 0xF8, 0xC0, 0xFC, 0xC0, 0xFE, 0xC0,\r\n        0xDE, 0xE0, 0xD6, 0x68, 0xB6, 0xC8, 0xEC, 0x10, 0xFC, 0x40, 0xEE, 0xDC, 0xFE, 0xC0, 0xC0, 0x00,\r\n        0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x0F, 0x00, 0x1F, 0x0D, 0x1F, 0x0F, 0x3F, 0x0A, 0x3F, 0x1F,\r\n        0x7F, 0x3B, 0x7F, 0x04, 0x3F, 0x1F, 0x1F, 0x00, 0x1F, 0x08, 0x3F, 0x1C, 0x3F, 0x0C, 0x07, 0x00,\r\n        0x00, 0x00, 0xE0, 0x00, 0xF0, 0x00, 0xF8, 0x10, 0xF8, 0x90, 0xF8, 0xC0, 0xFC, 0xC0, 0xFE, 0xC0,\r\n        0xDE, 0xE0, 0xDA, 0x64, 0xBA, 0xC4, 0xF4, 0x08, 0xFC, 0x20, 0xF6, 0x6C, 0xFE, 0x60, 0xC0, 0x00,\r\n        0x00, 0x00, 0x1C, 0x00, 0x3F, 0x1C, 0x7F, 0x0C, 0xFF, 0x00, 0xFF, 0x05, 0xFF, 0x07, 0x7F, 0x0B,\r\n        0x3F, 0x0F, 0x7F, 0x0E, 0x7F, 0x11, 0x3F, 0x0F, 0x1F, 0x00, 0x1F, 0x00, 0x37, 0x18, 0x3F, 0x00,\r\n        0x00, 0x00, 0x0E, 0x00, 0x1F, 0x0E, 0x3F, 0x06, 0x3F, 0x00, 0x7F, 0x05, 0x7F, 0x07, 0x7F, 0x0B,\r\n        0x3F, 0x0F, 0x7F, 0x0E, 0x7F, 0x11, 0x3F, 0x0F, 0x1F, 0x00, 0x1F, 0x00, 0x37, 0x18, 0x3F, 0x00,\r\n        0x00, 0x00, 0x03, 0x00, 0x0F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x0F, 0x00,\r\n        0x3F, 0x00, 0x73, 0x0C, 0xF1, 0x0E, 0xF9, 0x06, 0xDF, 0xC0, 0x1F, 0x00, 0x1F, 0x0E, 0x1F, 0x00,\r\n        0x00, 0x00, 0x03, 0x00, 0x0F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0xDF, 0x00, 0xEF, 0x00,\r\n        0xFF, 0x00, 0x73, 0x0C, 0x31, 0x0E, 0x39, 0x06, 0x1F, 0x00, 0x1F, 0x00, 0x1F, 0x0E, 0x1F, 0x00,\r\n        0x38, 0x00, 0x78, 0x30, 0xF0, 0x40, 0xE7, 0x00, 0xBF, 0x67, 0xEF, 0x1F, 0x57, 0x3E, 0x5F, 0x2C,\r\n        0x7F, 0x0C, 0x7F, 0x34, 0xFB, 0x77, 0xF4, 0x5B, 0xFF, 0x60, 0xE2, 0x5D, 0xC1, 0x22, 0x00, 0x01,\r\n        0x03, 0x00, 0x67, 0x02, 0xFA, 0x64, 0xDC, 0x20, 0xFE, 0x8C, 0xFB, 0xD6, 0xDD, 0x6A, 0xFE, 0x69,\r\n        0xD4, 0x6A, 0x5C, 0xE2, 0xBC, 0xC2, 0x63, 0x9C, 0xC7, 0x3A, 0xFD, 0xC6, 0x3A, 0xDC, 0xFC, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x03, 0x00, 0x6F, 0x00, 0xFF, 0x6D, 0xFF, 0x4A, 0xFF, 0x5F, 0xFF, 0x3B, 0x7F, 0x04, 0x5F, 0x3F,\r\n        0x2F, 0x1F, 0x1F, 0x00, 0x13, 0x0C, 0x18, 0x07, 0x0F, 0x00, 0x07, 0x00, 0x03, 0x01, 0x01, 0x00,\r\n        0xC0, 0x00, 0xF8, 0x00, 0xFC, 0xB8, 0xFE, 0xBC, 0xFE, 0x84, 0xFE, 0xC0, 0xFE, 0x60, 0xDE, 0xE0,\r\n        0xFC, 0x80, 0xFC, 0x00, 0x1E, 0xE0, 0x1E, 0xE0, 0xFF, 0x04, 0xFF, 0x0E, 0xCF, 0x86, 0xC6, 0x00\r\n    ]);\r\n  \r\n    /* Gannon -> Green walrus */\r\n    WriteBytesToFile(f, 0xCA800 + (8*0x20), [\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x03, 0x01, 0x05, 0x03, 0x04, 0x03,\r\n        0x08, 0x07, 0x08, 0x07, 0x08, 0x07, 0x10, 0x0F, 0x10, 0x0F, 0x30, 0x0F, 0x60, 0x1F, 0xC0, 0x3F,\r\n        0x0F, 0x00, 0x33, 0x0F, 0xC4, 0x3B, 0x8E, 0x71, 0x1E, 0xED, 0x1E, 0xE9, 0x14, 0xEB, 0x1C, 0xFF,\r\n        0x30, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF\r\n    ]);\r\n    WriteBytesToFile(f, 0xCB000 + (5*0x20), [\r\n        0x48, 0x37, 0x20, 0x1F, 0x50, 0x3F, 0xB0, 0x7F, 0xA0, 0x7F, 0x80, 0x7F, 0x88, 0x77, 0x88, 0x77,\r\n        0x9C, 0x63, 0x63, 0x00, 0x01, 0x00, 0x02, 0x01, 0x02, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x01, 0xFE, 0x03, 0xFF, 0x00, 0xFF, 0x0C, 0xF3, 0x30, 0xCF,\r\n        0x4C, 0xBF, 0xBC, 0x7F, 0xF8, 0xFF, 0xE1, 0xFE, 0x03, 0xFC, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    ]);\r\n    WriteBytesToFile(f, 0xCB000 + (7*0x20), [\r\n        0xC0, 0x00, 0xB0, 0xC0, 0xF8, 0xF0, 0x3C, 0xF8, 0x0A, 0xFC, 0x32, 0xCC, 0x13, 0xEC, 0x41, 0xBE,\r\n        0x87, 0x78, 0xBF, 0x42, 0xBF, 0x76, 0xED, 0x76, 0xFE, 0x64, 0xDA, 0x64, 0xFC, 0x40, 0x68, 0x90\r\n    ]);\r\n  \r\n    //  /* Gannon -> Shadow walrus */\r\n    //  WriteBytesToFile(f, 0xCA800 + (8*0x20), [\r\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x07, 0x00, 0x07, 0x00,\r\n    //    0x0F, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x1F, 0x00, 0x1F, 0x00, 0x3F, 0x00, 0x7F, 0x00, 0xFF, 0x00,\r\n    //    0x0F, 0x00, 0x3F, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x0C, 0xFF, 0x08, 0xFF, 0x00, 0xFF, 0x00,\r\n    //    0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00\r\n    //  ]);\r\n    //  WriteBytesToFile(f, 0xCB000 + (5*0x20), [\r\n    //    0x7F, 0x00, 0x3F, 0x00, 0x7F, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,\r\n    //    0xFF, 0x00, 0x63, 0x00, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    //    0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00,\r\n    //    0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00\r\n    //  ]);\r\n    //  WriteBytesToFile(f, 0xCB000 + (7*0x20), [\r\n    //    0xC0, 0x00, 0xF0, 0x00, 0xF8, 0x00, 0xFC, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0x00, 0xFF, 0x00,\r\n    //    0xFF, 0x00, 0xFF, 0x02, 0xFF, 0x36, 0xFF, 0x64, 0xFE, 0x64, 0xFE, 0x40, 0xFC, 0x40, 0xF8, 0x00\r\n    //  ]);\r\n  \r\n    /* Ganon keese -> owl */\r\n    arr = ReadBytesFromFile(f, 0xB8800 + (36*0x20), 0x10 * 4);                                 // Owl\r\n    WriteBytesToFile(f, 0xCA800 + (10*0x20), arr);                                  // Gannon keese\r\n  \r\n    //----------------------------------------------------------------------------\r\n  \r\n    arr = [];\r\n  \r\n    //  /* Debug - bracelet */\r\n    //  ReadBytesFromFile(f, 0xB0800 + (1*0x20), arr);\r\n  \r\n    randNum = RandomRange(0, 34);\r\n    switch (randNum) {\r\n        /* Row 1 */\r\n        case 0:  currAddr = 0xB0000 + (2*0x20); break;                                          // sword updown\r\n        case 1:  currAddr = 0xB0000 + (7*0x20); break;                                           // music note\r\n        case 2:  currAddr = 0xB0000 + (16*0x20); break;                                          // fairy\r\n    \r\n        /* Row 2 */\r\n        case 3:  currAddr = 0xB0800 + (0*0x20); break;                                           // bombs\r\n        case 4:  currAddr = 0xB0800 + (1*0x20); break;                                           // bracelet\r\n        case 5:  currAddr = 0xB0800 + (2*0x20); break;                                           // sword\r\n        case 6:  currAddr = 0xB0800 + (3*0x20); break;                                           // shield\r\n        case 7:  currAddr = 0xB0800 + (4*0x20); break;                                           // bow\r\n        case 8:  currAddr = 0xB0800 + (5*0x20); break;                                           // hookshot\r\n        case 9:  currAddr = 0xB0800 + (6*0x20); break;                                           // firerod\r\n        case 10: currAddr = 0xB0800 + (7*0x20); break;                                           // powder\r\n        case 11: currAddr = 0xB0800 + (8*0x20); break;                                           // ocarina\r\n        case 12: currAddr = 0xB0800 + (9*0x20); break;                                           // feather\r\n        case 13: currAddr = 0xB0800 + (10*0x20); break;                                          // flippers\r\n        case 14: currAddr = 0xB0800 + (11*0x20); break;                                          // shovel\r\n        case 15: currAddr = 0xB0800 + (12*0x20); break;                                          // boots\r\n    \r\n        case 16: currAddr = 0xB0800 + (15*0x20); break;                                          // seashell\r\n        case 17: currAddr = 0xB0800 + (16*0x20); break;                                          // medicine\r\n        case 18: currAddr = 0xB0800 + (17*0x20); break;                                          // arrowup\r\n        case 19: currAddr = 0xB0800 + (18*0x20); break;                                          // boomerang\r\n        case 20: currAddr = 0xB0800 + (19*0x20); break;                                          // rupee\r\n        case 21: currAddr = 0xB0800 + (20*0x20); break;                                          // heart\r\n        case 22: currAddr = 0xB0800 + (21*0x20); break;                                          // heartcontainer\r\n        case 23: currAddr = 0xB0800 + (22*0x20); break;                                          // piece of heart\r\n        case 24: currAddr = 0xB0800 + (23*0x20); break;                                          // acorn\r\n    \r\n        /* Other */\r\n        case 25: currAddr = 0xB0800 + (32*0x20); break;                                          // tail key\r\n        case 26: currAddr = 0xB0800 + (33*0x20); break;                                          // angler key\r\n        case 27: currAddr = 0xB0800 + (34*0x20); break;                                          // face key\r\n        case 28: currAddr = 0xB0800 + (35*0x20); break;                                          // bird key\r\n    \r\n        case 29: currAddr = 0xB0800 + (37*0x20); break;                                          // golden leaf\r\n    \r\n        case 30: currAddr = 0xB2800 + (7*0x20); break;                                           // slime key\r\n        case 31: currAddr = 0xB2800 + (6*0x20); break;                                           // mushroom\r\n        case 32: currAddr = 0xB8800 + (55*0x20); break;                                          // mushroom\r\n        case 33: currAddr = 0xC9800 + (63*0x20); break;                                          // mushroom\r\n        case 34: currAddr = 0xCA000 + (21*0x20); break;                                          // mushroom\r\n        default : break;\r\n    }\r\n  \r\n    /* Read */\r\n    arr = ReadBytesFromFile(f, currAddr, 0x10 * 2);\r\n  \r\n    //  /* Blank graphic 8x8 */\r\n    //  SetLength(blankArr, 0x10 * 1);\r\n    //  ReadBytesFromFile(f, 0xB0000 + (3*0x20), blankArr);\r\n  \r\n    /* Flip a 8x16 image 90 degrees to the left */\r\n    transposed8By8_1 = TransposeGraphic(f, currAddr);\r\n    transposed8By8_2 = TransposeGraphic(f, currAddr + 0x10);\r\n  \r\n    //----------------------------------------------------------------------------\r\n  \r\n    WriteBytesToFile(f, 0xB0000 + (3*0x20) + 0x10, transposed8By8_1);                 // sword leftright\r\n    WriteBytesToFile(f, 0xB0000 + (4*0x20) + 0x10, transposed8By8_2);                 // sword leftright\r\n  \r\n    WriteBytesToFile(f, 0xB0000 + (22*0x20), transposed8By8_1);                      // arrow leftright\r\n    WriteBytesToFile(f, 0xB0000 + (23*0x20), transposed8By8_2);                      // arrow leftright\r\n    WriteBytesToFile(f, 0xB0000 + (22*0x20) + 0x10, transposed8By8_1);                // arrow leftright\r\n    WriteBytesToFile(f, 0xB0000 + (23*0x20) + 0x10, transposed8By8_2);                // arrow leftright\r\n  \r\n    /* Row 1 */\r\n    WriteBytesToFile(f, 0xB0000 + (2*0x20), arr);                                    // sword updown\r\n    WriteBytesToFile(f, 0xB0000 + (7*0x20), arr);                                    // music note\r\n    WriteBytesToFile(f, 0xB0000 + (16*0x20), arr);                                   // fairy\r\n    WriteBytesToFile(f, 0xB0000 + (21*0x20), arr);                                   // arrow updown\r\n  \r\n    /* Row 2 */\r\n    WriteBytesToFile(f, 0xB0800 + (0*0x20), arr);                                    // bombs\r\n    WriteBytesToFile(f, 0xB0800 + (1*0x20), arr);                                    // bracelet\r\n    WriteBytesToFile(f, 0xB0800 + (2*0x20), arr);                                    // sword\r\n    WriteBytesToFile(f, 0xB0800 + (3*0x20), arr);                                    // shield\r\n    WriteBytesToFile(f, 0xB0800 + (4*0x20), arr);                                    // bow\r\n    WriteBytesToFile(f, 0xB0800 + (5*0x20), arr);                                    // hookshot\r\n    WriteBytesToFile(f, 0xB0800 + (6*0x20), arr);                                    // firerod\r\n    WriteBytesToFile(f, 0xB0800 + (7*0x20), arr);                                    // powder\r\n    WriteBytesToFile(f, 0xB0800 + (8*0x20), arr);                                    // ocarina\r\n    WriteBytesToFile(f, 0xB0800 + (9*0x20), arr);                                    // feather\r\n    WriteBytesToFile(f, 0xB0800 + (10*0x20), arr);                                   // flippers\r\n    WriteBytesToFile(f, 0xB0800 + (11*0x20), arr);                                   // shovel\r\n    WriteBytesToFile(f, 0xB0800 + (12*0x20), arr);                                   // boots\r\n  \r\n    WriteBytesToFile(f, 0xB0800 + (15*0x20), arr);                                   // seashell\r\n    WriteBytesToFile(f, 0xB0800 + (16*0x20), arr);                                   // medicine\r\n    //WriteBytesToFile(f, 0xB0800 + (17*0x20), arr);                                 // arrowup\r\n    WriteBytesToFile(f, 0xB0800 + (18*0x20), arr);                                   // boomerang\r\n    WriteBytesToFile(f, 0xB0800 + (19*0x20), arr);                                   // rupee\r\n    //WriteBytesToFile(0xB0800 + (20*0x20), arr);                                   // heart\r\n    WriteBytesToFile(f, 0xB0800 + (21*0x20), arr);                                   // heartcontainer\r\n    WriteBytesToFile(f, 0xB0800 + (22*0x20), arr);                                   // piece of heart\r\n    WriteBytesToFile(f, 0xB0800 + (23*0x20), arr);                                   // acorn\r\n  \r\n    /* Other */\r\n    WriteBytesToFile(f, 0xB0800 + (32*0x20), arr);                                   // tail key\r\n    WriteBytesToFile(f, 0xB0800 + (33*0x20), arr);                                   // angler key\r\n    WriteBytesToFile(f, 0xB0800 + (34*0x20), arr);                                   // face key\r\n    WriteBytesToFile(f, 0xB0800 + (35*0x20), arr);                                   // bird key\r\n  \r\n    WriteBytesToFile(f, 0xB0800 + (37*0x20), arr);                                   // golden leaf\r\n  \r\n    WriteBytesToFile(f, 0xB2800 + (7*0x20), arr);                                   // slime key\r\n    WriteBytesToFile(f, 0xB2800 + (6*0x20), arr);                                   // mushroom\r\n    WriteBytesToFile(f, 0xB8800 + (55*0x20), arr);                                   // mushroom\r\n    WriteBytesToFile(f, 0xC9800 + (63*0x20), arr);                                   // mushroom\r\n    WriteBytesToFile(f, 0xCA000 + (21*0x20), arr);                                   // mushroom\r\n  \r\n    //----------------------------------------------------------------------------\r\n  \r\n    WriteBytesToFile(f, 0x30000 + (3*0x20) + 0x10, transposed8By8_1);                 // sword leftright\r\n    WriteBytesToFile(f, 0x30000 + (4*0x20) + 0x10, transposed8By8_2);                 // sword leftright\r\n  \r\n    WriteBytesToFile(f, 0x30000 + (22*0x20), transposed8By8_1);                      // arrow leftright\r\n    WriteBytesToFile(f, 0x30000 + (23*0x20), transposed8By8_2);                      // arrow leftright\r\n    WriteBytesToFile(f, 0x30000 + (22*0x20) + 0x10, transposed8By8_1);                // arrow leftright\r\n    WriteBytesToFile(f, 0x30000 + (23*0x20) + 0x10, transposed8By8_2);                // arrow leftright\r\n  \r\n    /* Row 1 */\r\n    WriteBytesToFile(f, 0x30000 + (2*0x20), arr);                                    // sword updown\r\n    WriteBytesToFile(f, 0x30000 + (7*0x20), arr);                                    // music note\r\n    WriteBytesToFile(f, 0x30000 + (16*0x20), arr);                                   // fairy\r\n    WriteBytesToFile(f, 0x30000 + (21*0x20), arr);                                   // arrow updown\r\n  \r\n    /* Row 2 */\r\n    WriteBytesToFile(f, 0x30800 + (0*0x20), arr);                                    // bombs\r\n    WriteBytesToFile(f, 0x30800 + (1*0x20), arr);                                    // bracelet\r\n    WriteBytesToFile(f, 0x30800 + (2*0x20), arr);                                    // sword\r\n    WriteBytesToFile(f, 0x30800 + (3*0x20), arr);                                    // shield\r\n    WriteBytesToFile(f, 0x30800 + (4*0x20), arr);                                    // bow\r\n    WriteBytesToFile(f, 0x30800 + (5*0x20), arr);                                    // hookshot\r\n    WriteBytesToFile(f, 0x30800 + (6*0x20), arr);                                    // firerod\r\n    WriteBytesToFile(f, 0x30800 + (7*0x20), arr);                                    // powder\r\n    WriteBytesToFile(f, 0x30800 + (8*0x20), arr);                                    // ocarina\r\n    WriteBytesToFile(f, 0x30800 + (9*0x20), arr);                                    // feather\r\n    WriteBytesToFile(f, 0x30800 + (10*0x20), arr);                                   // flippers\r\n    WriteBytesToFile(f, 0x30800 + (11*0x20), arr);                                   // shovel\r\n    WriteBytesToFile(f, 0x30800 + (12*0x20), arr);                                   // boots\r\n  \r\n    WriteBytesToFile(f, 0x30800 + (15*0x20), arr);                                   // seashell\r\n    WriteBytesToFile(f, 0x30800 + (16*0x20), arr);                                   // medicine\r\n    //WriteBytesToFile(f, 0x30800 + (17*0x20), arr);                                 // arrowup\r\n    WriteBytesToFile(f, 0x30800 + (18*0x20), arr);                                   // boomerang\r\n    WriteBytesToFile(f, 0x30800 + (19*0x20), arr);                                   // rupee\r\n    //WriteBytesToFile(0x30800 + (20*0x20), arr);                                   // heart\r\n    WriteBytesToFile(f, 0x30800 + (21*0x20), arr);                                   // heartcontainer\r\n    WriteBytesToFile(f, 0x30800 + (22*0x20), arr);                                   // piece of heart\r\n    WriteBytesToFile(f, 0x30800 + (23*0x20), arr);                                   // acorn\r\n  \r\n    /* Other */\r\n    WriteBytesToFile(f, 0x30800 + (32*0x20), arr);                                   // tail key\r\n    WriteBytesToFile(f, 0x30800 + (33*0x20), arr);                                   // angler key\r\n    WriteBytesToFile(f, 0x30800 + (34*0x20), arr);                                   // face key\r\n    WriteBytesToFile(f, 0x30800 + (35*0x20), arr);                                   // bird key\r\n  \r\n    WriteBytesToFile(f, 0x30800 + (37*0x20), arr);                                   // golden leaf\r\n  \r\n    WriteBytesToFile(f, 0x32800 + (7*0x20), arr);                                   // slime key\r\n    WriteBytesToFile(f, 0x32800 + (6*0x20), arr);                                   // mushroom\r\n    WriteBytesToFile(f, 0x38800 + (55*0x20), arr);                                   // mushroom\r\n    WriteBytesToFile(f, 0x49800 + (63*0x20), arr);                                   // mushroom\r\n    WriteBytesToFile(f, 0x4A000 + (21*0x20), arr);                                   // mushroom\r\n};\r\n\r\nexport default FunPercent;","import axios from 'axios';\r\nimport { WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport Link from \"../../Graphics/GraphicsLink.bin\";\r\nimport AgesGirl from \"../../Graphics/GraphicsAgesGirl.bin\";\r\nimport Bowwwow from \"../../Graphics/GraphicsBowwow.bin\";\r\nimport Bunny from \"../../Graphics/GraphicsBunny.bin\";\r\nimport Kirby from \"../../Graphics/GraphicsKirby.bin\";\r\nimport Marin from \"../../Graphics/GraphicsMarin.bin\";\r\nimport Mario from \"../../Graphics/GraphicsMario.bin\";\r\nimport Martha from \"../../Graphics/GraphicsMartha.bin\";\r\nimport Meme from \"../../Graphics/GraphicsMeme.bin\";\r\nimport Richard from \"../../Graphics/GraphicsRichard.bin\";\r\nimport Rooster from \"../../Graphics/GraphicsRooster.bin\";\r\nimport Subrosian from \"../../Graphics/GraphicsSubrosian.bin\";\r\nimport Tarin from \"../../Graphics/GraphicsTarin.bin\";\r\n\r\nexport async function LinkSprite(f, itemIndex) { \r\n    let filePath;\r\n    \r\n    switch (itemIndex) {\r\n        case 0 : filePath = Link; break;\r\n        case 1 : filePath = AgesGirl; break;\r\n        case 2 : filePath = Bowwwow; break;\r\n        case 3 : filePath = Bunny; break;\r\n        case 4 : filePath = Kirby; break;\r\n        case 5 : filePath = Marin; break;\r\n        case 6 : filePath = Mario; break;\r\n        case 7 : filePath = Martha; break;\r\n        case 8 : filePath = Meme; break;\r\n        case 9 : filePath = Richard; break;\r\n        case 10 : filePath = Rooster; break;\r\n        case 11 : filePath = Subrosian; break;\r\n        case 12 : filePath = Tarin; break;\r\n        default : \r\n            console.error(\"[Error] LinkSprite - file not found.\");\r\n            return;\r\n    }\r\n    \r\n    let response1 = await axios.get(filePath, {\r\n        responseType: 'arraybuffer',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/pdf'\r\n        }\r\n    });\r\n\r\n    let uint8 = new Uint8Array(response1.data);\r\n    WriteBytesToFile(f, 0xB0000, uint8);\r\n};\r\n\r\nexport default LinkSprite;","import { GetROMVersion, WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { \r\n    ADDR_PowerUp_Text1_V10,  \r\n    ADDR_PowerUp_Text2_V10, \r\n    ADDR_PowerUp_Music1_V10, \r\n    ADDR_PowerUp_Music2_V10,\r\n    ADDR_PowerUp_Text1_V12,  \r\n    ADDR_PowerUp_Text2_V12, \r\n    ADDR_PowerUp_Music1_V12, \r\n    ADDR_PowerUp_Music2_V12,\r\n} from \"../../Constants/uAddresses\";\r\n\r\nexport const RemoveAcornPoPDelay = (f) => {\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : \r\n            /* Remove Acorn / PoP Animation and Text */\r\n            WriteBytesToFile(f, ADDR_PowerUp_Text1_V10, [0x00]);\r\n            WriteBytesToFile(f, ADDR_PowerUp_Text2_V10, [0x00]);\r\n\r\n            /* Remove Music */\r\n            WriteBytesToFile(f, ADDR_PowerUp_Music1_V10, [0x00]);\r\n            WriteBytesToFile(f, ADDR_PowerUp_Music2_V10, [0x00]);\r\n            break;\r\n\r\n        case 2  : \r\n            /* Remove Acorn / PoP Animation and Text */\r\n            WriteBytesToFile(f, ADDR_PowerUp_Text1_V12, [0x00]);\r\n            WriteBytesToFile(f, ADDR_PowerUp_Text2_V12, [0x00]);\r\n    \r\n            /* Remove Music */\r\n            WriteBytesToFile(f, ADDR_PowerUp_Music1_V12, [0x00]);\r\n            WriteBytesToFile(f, ADDR_PowerUp_Music2_V12, [0x00]);\r\n            break;\r\n\r\n        default : \r\n            console.error(\"[Error] function RemoveAcornPoPDelay - invalid ROM version\");\r\n    }\r\n};\r\n\r\nexport default RemoveAcornPoPDelay;","import { ADDR_NoChestDialog_V10, ADDR_NoChestDialog_V12 } from \"../../Constants/uAddresses\";\r\nimport { WriteBytesToFileVersion, WriteBytesToFile, GetROMVersion } from \"../../../data/Read/ReadRom\";\r\n\r\nconst RemoveChestDialog = (f) => {\r\n    WriteBytesToFileVersion(f, ADDR_NoChestDialog_V10, ADDR_NoChestDialog_V12, [0x13]);\r\n\r\n    // Blank out the call to the dialog shower (call 237C)\r\n    if (GetROMVersion(f) === 2) {\r\n        WriteBytesToFile(f, 0x1FD22, [0x00, 0x00, 0x00]);\r\n    }\r\n};\r\n\r\nexport default RemoveChestDialog;","import { GetROMVersion, WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\nimport { ADDR_LowHealthBeep_V10, ADDR_LowHealthBeep_V12 } from \"../../Constants/uAddresses\";\r\n\r\nexport const RemoveLowHealthBeep = (f) => {\r\n    switch (GetROMVersion(f)) {\r\n        case 0  : WriteBytesToFile(f, ADDR_LowHealthBeep_V10, [0x80, 0xD7]); break; \r\n        case 2  : WriteBytesToFile(f, ADDR_LowHealthBeep_V12, [0x80, 0xD7]); break;\r\n        default : console.error(\"[Error] function RemoveLowHealthBeep - invalid ROM version\");\r\n    }\r\n};\r\n\r\nexport default RemoveLowHealthBeep;","import { ADDR_SwordlessMusic1, ADDR_SwordlessMusic2_V10, ADDR_SwordlessMusic2_V12 } from \"../../Constants/uAddresses\";\r\nimport { WriteBytesToFile, GetROMVersion } from \"../../../data/Read/ReadRom\";\r\n\r\nconst RemoveSwordlessMusic = (f) => {\r\n    WriteBytesToFile(f, ADDR_SwordlessMusic1, [0x58]);\r\n\r\n    switch (GetROMVersion(f)) {\r\n        case 0: WriteBytesToFile(f, ADDR_SwordlessMusic2_V10, [0x00]); break;\r\n        case 2: WriteBytesToFile(f, ADDR_SwordlessMusic2_V12, [0x00]); break;\r\n        default : console.error(\"[Error] function RemoveSwordlessMusic - invalid ROM version\");\r\n    }\r\n};\r\n\r\nexport default RemoveSwordlessMusic;","import { TDataAddresses } from \"../../Constants/uAddresses\";\r\nimport { ReadByteFromFile, WriteBytesToFile } from \"../../../data/Read/ReadRom\";\r\n\r\nconst RemoveText = (f) => {\r\n    ShortenText(f, TDataAddresses.Text0[0], TDataAddresses.Text0[1]);\r\n    ShortenText(f, TDataAddresses.Text1[0], TDataAddresses.Text1[1]);\r\n    ShortenText(f, TDataAddresses.Text2[0], TDataAddresses.Text2[1]); \r\n    ShortenText(f, TDataAddresses.Text3[0], TDataAddresses.Text3[1]);\r\n    ShortenText(f, TDataAddresses.Text4[0], TDataAddresses.Text4[1]);\r\n    ShortenText(f, TDataAddresses.Text4_2[0], TDataAddresses.Text4_2[1]);\r\n};\r\n\r\nconst GetStringDetails = (f, currAddr, endAddr) => {\r\n    let allZeros = 0;\r\n    let yesNoQuestion = 0;\r\n    let endStrAddr = 0;\r\n    let b = 0;\r\n  \r\n    while ((b !== 0xFF) && (b !== 0xFE) && (currAddr <= endAddr)) {\r\n        b = ReadByteFromFile(f, currAddr);\r\n        currAddr++;\r\n    \r\n        if (b !== 0) {\r\n            allZeros = false;\r\n        }\r\n    }\r\n\r\n    switch (b) {\r\n        case 0xFE : yesNoQuestion = true; break;\r\n        case 0xFF : yesNoQuestion = false; break;\r\n        default : break;\r\n    }\r\n  \r\n    endStrAddr = currAddr - 1;\r\n\r\n    return ({\r\n        allZeros : allZeros,\r\n        yesNoQuestion : yesNoQuestion, \r\n        endStrAddr : endStrAddr,\r\n    });\r\n};\r\n\r\nconst ShortenText = (f, startAddr, endAddr) => {\r\n\r\n    let currAddr      = 0;\r\n    let yesNoQuestion = false;\r\n    let endStrAddr    = 0;\r\n    let allZeros      = false;\r\n\r\n    currAddr = startAddr;\r\n\r\n    while (currAddr <= endAddr) {    \r\n        let result = GetStringDetails(f, currAddr, endAddr);\r\n        allZeros = result.allZeros;\r\n        yesNoQuestion = result.yesNoQuestion;\r\n        endStrAddr = result.endStrAddr;\r\n        \r\n        if (allZeros) {\r\n            //GBDebug('Text block has all zeroes at ' + IntToHex(currAddr, 5) + ' - ' + IntToHex(endStrAddr, 5) );\r\n            currAddr = endStrAddr + 1;\r\n            continue;\r\n        }\r\n\r\n        /* DO NOT CHANGE */\r\n        if (\r\n            ((currAddr >= 0x74772) && (currAddr <= 0x747F5)) ||                        // sign post maze, all signs\r\n            (currAddr === 0x26A6C) ||                                                    // color dungeon fairy, \"Are you sure?  YES  NO\"\r\n            (currAddr === 0x75F44) ||                                                    // Fishing game heart piece fish\r\n            (currAddr === 0x27CE5) ||                                                    // Are you sure?  yes no\r\n            (currAddr === 0x53F2C) ||                                                    // Angler key  [done in minor fixes]\r\n            (currAddr === 0x59701) ||                                                    // Face key    [done in minor fixes]\r\n            (currAddr === 0x5971B) ||                                                    // Bird key    [done in minor fixes]\r\n            (currAddr === 0x53EE3)                                                       // Slime key   [done in minor fixes]\r\n        ) {\r\n            currAddr = endStrAddr + 1;\r\n            continue;\r\n        }\r\n\r\n        /* Crane game - \"Challenge Again?  Play No\" */\r\n        if ((currAddr === 0x52BFD)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x43, 0x68, 0x61, 0x6C, 0x6C, 0x65, 0x6E, 0x67, 0x65, 0x20, 0x41, 0x67, 0x61, 0x69, 0x6E, 0x3F,\r\n                0x20, 0x20, 0x20, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x20, 0x4E, 0x6F, 0xFE]);\r\n        }\r\n        \r\n        /* Color Dungeon Fairy - \"RED  BLUE\"*/\r\n        else if ((currAddr === 0x26DEE)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x3F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x52, 0x45, 0x44, 0x20, 0x20, 0x42, 0x4C, 0x55, 0x45, 0xFE]); \r\n        }\r\n        \r\n        /* Color Dungeon Fairy - repeat \"RED  BLUE\"*/\r\n        else if ((currAddr === 0x26A1E)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x3F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x52, 0x45, 0x44, 0x20, 0x20, 0x42, 0x4C, 0x55, 0x45, 0xFE]);\r\n        }\r\n\r\n        /* Color dungeon skeleton - \"RED  BLUE\"*/\r\n        else if ((currAddr === 0x26AE3)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x3F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x52, 0x45, 0x44, 0x20, 0x20, 0x42, 0x4C, 0x55, 0x45, 0xFE]);\r\n        }\r\n\r\n        /* Upgrade bat - \"Are you ready?!    Yes   N-No\"*/\r\n        else if ((currAddr === 0x5B4B1)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x41, 0x72, 0x65, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x72, 0x65, 0x61, 0x64, 0x79, 0x3F, 0x21, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x59, 0x65, 0x73, 0x20, 0x20, 0x4E, 0x2D, 0x4E, 0x6F, 0xFE]);\r\n        }\r\n\r\n        /* Upgrade bat - \"Magic Powder!    Yes   N-No\"*/\r\n        else if ((currAddr === 0x5B52F)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x4D, 0x61, 0x67, 0x69, 0x63, 0x50, 0x6F, 0x77, 0x64, 0x65, 0x72, 0x20, 0x20, 0x20, 0x20, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x59, 0x65, 0x73, 0x20, 0x20, 0x4E, 0x2D, 0x4E, 0x6F, 0xFE]);\r\n        }\r\n\r\n        /* Upgrade bat - \"Bombs!    Yes   N-No\"*/\r\n        else if ((currAddr === 0x5B57D)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x42, 0x6F, 0x6D, 0x62, 0x73, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x59, 0x65, 0x73, 0x20, 0x20, 0x4E, 0x2D, 0x4E, 0x6F, 0xFE]);\r\n        }\r\n\r\n        /* Upgrade bat - \"Arrows!    Yes   N-No\"*/\r\n        else if ((currAddr === 0x5B5CB)) {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x41, 0x72, 0x72, 0x6F, 0x77, 0x73, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x59, 0x65, 0x73, 0x20, 0x20, 0x4E, 0x2D, 0x4E, 0x6F, 0xFE])\r\n        }\r\n\r\n        /* YES  NO */\r\n        else {\r\n            currAddr = SetStringChanges(f, currAddr, endStrAddr, yesNoQuestion,\r\n                [0x3F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\r\n                0x20, 0x20, 0x20, 0x20, 0x59, 0x45, 0x53, 0x20, 0x20, 0x4E, 0x4F, 0xFE]);\r\n        }\r\n\r\n    }\r\n};\r\n\r\nconst SetStringChanges = (f, currAddr, endStrAddr, yesNoQuestion, customYesNo) => {\r\n\r\n    let i, b;\r\n    let addr = 0;\r\n\r\n    /* Change */\r\n    if (!yesNoQuestion) {\r\n        /* End string */\r\n        WriteBytesToFile(f, currAddr, [0xFF]);\r\n        currAddr++;\r\n    }\r\n    else {\r\n        /* CUSTOM */\r\n        for (i = 0; i <= customYesNo.length-1; i++) {\r\n            b = customYesNo[i];\r\n            WriteBytesToFile(f, currAddr, [b]);\r\n            currAddr++;\r\n        }\r\n    }\r\n\r\n    /* Blank out the rest until the next string */\r\n    for (addr = currAddr; addr <= endStrAddr; addr++) {\r\n        WriteBytesToFile(f, currAddr, [0x00]);\r\n        currAddr = addr + 1;\r\n    }\r\n\r\n    return currAddr;\r\n};\r\n\r\nexport default RemoveText;","import { WriteBytesToFile, ReadByteFromFile } from \"../../../data/Read/ReadRom\";\r\nimport { GBShuffle } from \"../../../utilities\";\r\n\r\nconst ShuffleDungeonPalettes = (f) => {\r\n\r\n    let b1;\r\n    let b2;\r\n    let currAddr;\r\n    \r\n    /* Change white tiles from egg palette to something else */\r\n    WriteBytesToFile(f, 0x86850, [0x00, 0x41, 0x1F, 0x22, 0x10, 0x00]);\r\n    WriteBytesToFile(f, 0x8685A, [0x60, 0x76, 0x40, 0x3D]);\r\n\r\n    let arr1 = [];\r\n    let arr2 = [];\r\n    let map = [];\r\n\r\n    /* Read */\r\n    currAddr = 0x843EF;\r\n    for (let i = 0; i <= 8; i++) {\r\n        b1 = ReadByteFromFile(f, currAddr);\r\n        b2 = ReadByteFromFile(f, currAddr + 1);\r\n  \r\n        arr1[i] = b1;\r\n        arr2[i] = b2;\r\n        map[i] = i;\r\n        currAddr = currAddr + 2;\r\n    }\r\n  \r\n    /* Shuffle */\r\n    GBShuffle(map);\r\n\r\n    /* Write */\r\n    currAddr = 0x843EF;\r\n    for (let i = 0; i <= 8; i++) {\r\n        WriteBytesToFile(f, currAddr, [arr1[map[i]]]);\r\n        WriteBytesToFile(f, currAddr + 1, [arr2[map[i]]]);\r\n        currAddr = currAddr + 2;\r\n    }\r\n\r\n    /* There are some oddities from the norm... */\r\n\r\n    /* D1 */\r\n    WriteBytesToFile(f, 0x851F6 + 0, [arr1[map[0]]]);\r\n    WriteBytesToFile(f, 0x851F6 + 1, [arr2[map[0]]]);\r\n\r\n    /* D1 first room */\r\n    WriteBytesToFile(f, 0x851F8 + 0, [arr1[map[0]]]);\r\n    WriteBytesToFile(f, 0x851F8 + 1, [arr2[map[0]]]);\r\n\r\n    /* D3 */\r\n    WriteBytesToFile(f, 0x851FA + 0, [arr1[map[2]]]);\r\n    WriteBytesToFile(f, 0x851FA + 1, [arr2[map[2]]]);\r\n\r\n    /* D3 first room */\r\n    WriteBytesToFile(f, 0x851FC + 0, [arr1[map[2]]]);\r\n    WriteBytesToFile(f, 0x851FC + 1, [arr2[map[2]]]);\r\n\r\n    /* D5 */\r\n    WriteBytesToFile(f, 0x851FE + 0, [arr1[map[4]]]);\r\n    WriteBytesToFile(f, 0x851FE + 1, [arr2[map[4]]]);\r\n\r\n    /* D5 first room */\r\n    WriteBytesToFile(f, 0x85200 + 0, [arr1[map[4]]]);\r\n    WriteBytesToFile(f, 0x85200 + 1, [arr2[map[4]]]);\r\n\r\n    /* D5 first smallkey room */\r\n    WriteBytesToFile(f, 0x85202 + 0, [arr1[map[4]]]);\r\n    WriteBytesToFile(f, 0x85202 + 1, [arr2[map[4]]]);\r\n\r\n    /* D7 first room */\r\n    WriteBytesToFile(f, 0x85204 + 0, [arr1[map[6]]]);\r\n    WriteBytesToFile(f, 0x85204 + 1, [arr2[map[6]]]);\r\n  \r\n    /* D7 */\r\n    WriteBytesToFile(f, 0x85208 + 0, [arr1[map[6]]]);\r\n    WriteBytesToFile(f, 0x85208 + 1, [arr2[map[6]]]);\r\n\r\n    /* D1 first room sideview [skip] */\r\n    // Read(f, 0x8520A + 0;\r\n    // Read(f, 0x8520A + 1;\r\n\r\n    /* D4 */\r\n    WriteBytesToFile(f, 0x8520C + 0, [arr1[map[3]]]);\r\n    WriteBytesToFile(f, 0x8520C + 1, [arr2[map[3]]]);\r\n\r\n    /* D4 some room */\r\n    WriteBytesToFile(f, 0x8520E + 0, [arr1[map[3]]]);\r\n    WriteBytesToFile(f, 0x8520E + 1, [arr2[map[3]]]);\r\n\r\n    /* D4 some room again */\r\n    WriteBytesToFile(f, 0x85210 + 0, [arr1[map[3]]]);\r\n    WriteBytesToFile(f, 0x85210 + 1, [arr2[map[3]]]);\r\n  \r\n    /* ... */\r\n  \r\n    /* D8 */\r\n    WriteBytesToFile(f, 0x85214 + 0, [arr1[map[5]]]);\r\n    WriteBytesToFile(f, 0x85214 + 1, [arr2[map[5]]]);\r\n  \r\n    /* D6 */\r\n    WriteBytesToFile(f, 0x85218 + 0, [arr1[map[5]]]);\r\n    WriteBytesToFile(f, 0x85218 + 1, [arr2[map[5]]]);\r\n  \r\n  //  startAddr := 0x86FE0;\r\n  //\r\n  //  0x85FE0  // D1  0x86020\r\n  //  0x86120  // D2\r\n  //  0x861D0  // D3\r\n  //  0x862C0  // D4\r\n  //  0x863B0  // D5\r\n  //  0x86500  // D6                        5186\r\n  //  0x86650  // D7\r\n  //  0x866B0  // D8\r\n  //\r\n  //\r\n  //  (* D1 Pink *)\r\n  //  WriteBytesToFile(f, 0x85FE0, [\r\n  //    0xFF, 0x47, 0xF2, 0x7F, 0x21, 0x15, 0x00, 0x00,  // Statues, some walls\r\n  //    0xFF, 0x47, 0xF3, 0x51, 0x67, 0x28, 0x00, 0x00,\r\n  //    0xFF, 0x47, 0x17, 0x14, 0x08, 0x10, 0x00, 0x00,\r\n  //    0xFF, 0x47, 0xD9, 0x11, 0xCE, 0x10, 0x00, 0x00,\r\n  //\r\n  //    0xBF, 0x7B, 0xFF, 0x72, 0x5E, 0x7A, 0x00, 0x00,  // Walls\r\n  //    0xEC, 0x6E, 0x80, 0x7B, 0x0D, 0x76, 0x00, 0x00,  // Floors\r\n  //    0x87, 0x7D, 0x16, 0x7E, 0x8D, 0x38, 0x00, 0x00,\r\n  //    0xBD, 0x77, 0x03, 0x63, 0x60, 0x4E, 0x00, 0x00   // Detail Floor\r\n  //  ]);\r\n  //\r\n  //  WriteBytesToFile(f, 0x86080, [\r\n  //    0xFF, 0x47, 0xF2, 0x7F, 0x21, 0x15, 0x00, 0x00,  // Statues, some walls\r\n  //    0xFF, 0x47, 0xF3, 0x51, 0x67, 0x28, 0x00, 0x00,\r\n  //    0xFF, 0x47, 0x17, 0x14, 0x08, 0x10, 0x00, 0x00,\r\n  //    0xFF, 0x47, 0xD9, 0x11, 0xCE, 0x10, 0x00, 0x00,\r\n  //\r\n  //    0xBF, 0x7B, 0xFF, 0x72, 0x5E, 0x7A, 0x00, 0x00,  // Walls\r\n  //    0xEC, 0x6E, 0x80, 0x7B, 0x0D, 0x76, 0x00, 0x00,  // Floors\r\n  //    0x87, 0x7D, 0x16, 0x7E, 0x8D, 0x38, 0x00, 0x00,\r\n  //    0xBD, 0x77, 0x03, 0x63, 0x60, 0x4E, 0x00, 0x00   // Detail Floor\r\n  //  ]);\r\n  //\r\n  //  (* D2 Green *)\r\n  //  WriteBytesToFile(f, 0x86120, [\r\n  //    0x94, 0x7E, 0x21, 0x13, 0x42, 0x05, 0x00, 0x00,\r\n  //    0xFF, 0x47, 0xF3, 0x51, 0x67, 0x28, 0x00, 0x00,\r\n  //    0xFF, 0x47, 0x17, 0x14, 0x08, 0x10, 0x00, 0x00\r\n  //    0xFF, 0x47, 0xD9, 0x11, 0xCE, 0x10, 0x00, 0x00\r\n  //\r\n  //    0x83, 0x29, 0xA2, 0x3B, 0x00, 0x02, 0x00, 0x00\r\n  //    0xBA, 0x3A, 0x70, 0x09, 0xC9, 0x08, 0x00, 0x00\r\n  //    0x57, 0x2E, 0xD9, 0x11, 0xCE, 0x10, 0x00, 0x00\r\n  //    0x18, 0x5B, 0x0A, 0x5E, 0xE0, 0x5C, 0x00, 0x00\r\n  //  ]);\r\n  //\r\n  //\r\n\r\n};\r\n\r\nexport default ShuffleDungeonPalettes;","import { WriteBytesToFile, ReadByteFromFile } from \"../../../data/Read/ReadRom\";\r\nimport { TDataAddresses } from \"../../Constants/uAddresses\";\r\nimport { GBGetPos, GBShuffle } from \"../../../utilities\";\r\n\r\nconst MusicShuffle = (f) => {\r\n\r\n    let originalArr = [];\r\n    let len = 0;\r\n    let modifiedArr = [];\r\n    let pos;\r\n\r\n    /* Addresses */\r\n    let startAddr = TDataAddresses.Music[0];\r\n    let endAddr   = TDataAddresses.Music[1];\r\n  \r\n    /* Read the music */\r\n    let b;\r\n    for (let currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        b = ReadByteFromFile(f, currAddr);\r\n\r\n        if (b !== 0) {\r\n            if (GBGetPos(b, originalArr) === -1) {\r\n                len = originalArr.length;\r\n                originalArr[len] = b;\r\n        \r\n                len = modifiedArr.length;\r\n                modifiedArr[len] = b;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Sort the music */\r\n    GBShuffle(modifiedArr);\r\n      \r\n    /* Write the music */\r\n    for (let currAddr = startAddr; currAddr <= endAddr; currAddr++) {\r\n        b = ReadByteFromFile(f, currAddr);\r\n        pos = GBGetPos(b, originalArr);\r\n        if (pos !== -1) {\r\n            b = modifiedArr[pos];\r\n            WriteBytesToFile(f, currAddr, [b]);\r\n        }\r\n    }\r\n};\r\n\r\nexport default MusicShuffle;","import { HexToInt, ConvertToBase2 } from \"../../utilities\";\r\nimport * as RandomizerFunctions from \"../Randomize/index\";\r\n\r\n/* global BigInt */\r\n\r\nexport const DeveloperMode = false;\r\nexport const Z4_VERSION = '0.50';\r\n\r\nexport const state = {\r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                         OVERWORLD\r\n    //\r\n    //==========================================================================================================================================\r\n\r\n    ShuffleEntrances : { value : false, max : 2/*, fn: RandomizerFunctions.ShuffleEntrances*/, tooltip : \"Shuffle all transitions on the overworld\" },\r\n    MoveWalrus : { value : false, max : 2, fn: RandomizerFunctions.MoveWalrus, tooltip: \"The walrus will no longer block the desert.\" },\r\n    RemoveQuickSandTransition : { value : false, max : 2, fn: RandomizerFunctions.RemoveQuickSandTransition, tooltip: \"Falling into the quicksand will not transfer you to another screen\" },\r\n    // AddOverworldWarps : { value : false, max : 2/*, fn: RandomizerFunctions.AddOverworldWarps*/, tooltip: \"Adds overworld warps.\" },\r\n    \r\n    RoosterCaveNoTransitions : { value : false, max : 2, fn: RandomizerFunctions.RoosterCaveNoTransitions, tooltip: \"Falling into a pit in the bird key cave will not transfer you to another screen.\" },\r\n    \r\n    ChangeRequiredInstruments : { value : 0, max : 10, fn: RandomizerFunctions.ChangeRequiredInstruments, tooltip: \"The amount of instruments needed to open the egg.  They can be any instruments.\" },\r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                           ITEMS\r\n    //\r\n    //==========================================================================================================================================\r\n\r\n    ShuffleHeartPieces : { value : true, max : 2, fn: RandomizerFunctions.ShuffleHeartPieces, tooltip: \"Shuffles 9 out of the 12 heart pieces with a random rupee, seashell or bomb chest.  The only hearts not shuffled are the one from the fishing game and the two you dive into deep water to get.\" },\r\n    ShuffleSeashellReq : { value : true, max : 2, fn: RandomizerFunctions.ShuffleSeashellReq, tooltip: \"The seashell mansion will require anywhere from 11 to 22 seashells to complete.\" },\r\n    UpgradeRupeeChests : { value : true, max : 2, fn: RandomizerFunctions.UpgradeRupeeChests, tooltip: \"Each rupee amount from a chest has been upgraded to the next state. [20 -> 50 -> 100 -> 200]\" },\r\n    \r\n    ShuffleShopItems : { value : false, max : 2, fn: RandomizerFunctions.ShuffleShopItems, needSanity : undefined, tooltip: \"Randomizes the items at the shop.\" },\r\n    ShuffleShopPrices : { value : false, max : 2, fn: RandomizerFunctions.ShuffleShopPrices, tooltip: \"Randomizes the prices at the shop.\" },\r\n    NoStealing : { value : false, max : 2, fn: RandomizerFunctions.NoStealing, tooltip: \"Adds a barrier in the shop that prevents the ability to steal an item under normal conditions.\" },\r\n\r\n    SwordInChest : { value : true, max : 2, fn: RandomizerFunctions.SwordInChest, tooltip: \"Replaces the sword on the beach with a chest containing the sword.  Allows the sword to be shuffled with shuffle chests.\" },\r\n    ChestInLinksHouse : { value : true, max : 2, fn: RandomizerFunctions.ChestInLinksHouse, tooltip: \"Adds a chest in Marin's house with 20 rupees.  Originally used to garentee at least one chest to be accessable during randomization to continue progress.\" },\r\n    AddChestInColorDungeon : { value : true, max : 2, fn: RandomizerFunctions.AddChestInColorDungeon, tooltip: \"Replaces the rupee room in color dungeon with a chest containing 200 rupees.  This prevents an infinite money farm.\" },\r\n    AddCaveAboveCastleCheckBox : { value : true, max : 2, fn: RandomizerFunctions.AddCaveAboveCastle, tooltip : \"Adds a new cave above the castle via swimming. (This room was hidden from the original game.)\" },\r\n    AddOverworldKeysInChests : { value : true, max : 2, fn: RandomizerFunctions.AddOverworldKeysInChests, tooltip: \"Adds three chests.  One where the bird key was.  One above the master armos room (Face key).  One below lanmola's room (Anglar key)\" },\r\n    HiddenShellsAsChests : { value : true, max : 2, fn: RandomizerFunctions.HiddenShellsAsChests, tooltip: \"Replaces all hidden overworld seashells with a chest containing the seashell.\" },\r\n    CastleHeartChest : { value : true, max : 2, fn: RandomizerFunctions.AddChestCastleHeart, tooltip: \"Replaces diving heart piece below the castle with a chest.\" }, \r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                           ENEMY\r\n    //\r\n    //==========================================================================================================================================\r\n    \r\n    ShuffleBosses : { value : false, max : 2, fn: RandomizerFunctions.ShuffleBosses, needSanity : undefined, tooltip: \"All bosses are shuffled amoung themselves, with...some side quirks.\" },\r\n    DuplicateBosses : { value : true, max : 2, fn: RandomizerFunctions.DuplicateBosses, needSanity : undefined, tooltip: \"Allows the same boss to appear in multiple dungeons.\" },\r\n    RemoveForceBarrier : { value : false, max : 2, fn: RandomizerFunctions.RemoveForceBarrier, tooltip: \"Removes the force that pushes you into a room with a boss or instrument (perhaps other things?)  Recommended for boss shuffle.\" },\r\n\r\n    EnemyDamage : { value : 0, max : 6, fn: RandomizerFunctions.EnemyDamage, tooltip: \"Change the amount of damage enemies do.\" },\r\n    MiscDamage : { value : 0, max : 3, fn: RandomizerFunctions.MiscDamage, tooltip: \"Change the amount of damage pits, lava and floor spikes do.\" },\r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                           MISC.\r\n    //\r\n    //==========================================================================================================================================\r\n\r\n    FunPercent : { value : false, max : 2, fn: RandomizerFunctions.FunPercent, tooltip: \"Most item graphics are replaced with one common graphic. Have fun figuring out what's what!\" },\r\n    BlackOut : { value : false, max : 2, fn: RandomizerFunctions.Blackout, tooltip: \"Most dungeon tiles are black, making it harder to navigate around!\" },\r\n    RemoveText : { value : false, max : 2, fn: RandomizerFunctions.RemoveText, tooltip: \"Removes most text from dialogs.\" },\r\n    RemoveChestDialog : { value : false, max : 2, fn: RandomizerFunctions.RemoveChestDialog, tooltip: \"Removes the dialog box that appears when opening a chest.\" },\r\n    ShuffleDungeonPalettes : { value : false, max : 2, fn: RandomizerFunctions.ShuffleDungeonPalettes, tooltip: \"Changes each dungeon's palette.\" },\r\n    ShuffleMusic : { value : false, max : 2, fn: RandomizerFunctions.ShuffleMusic, tooltip: \"Shuffles the available music.\" },\r\n    CharacterSpeedUp : { value : true, max : 2, fn: RandomizerFunctions.CharacterSpeedUp, tooltip: \"Your character will move at a faster pace (mainly for debugging).\" },\r\n    \r\n    LinkSprite : { value : 0, max : 13, fn: RandomizerFunctions.LinkSprite, tooltip: \"Changes your main character (and perhaps some other graphics).\", ignoreFlags : true },\r\n    RemoveSwordlessMusic : { value : false, max : 2, fn: RandomizerFunctions.RemoveSwordlessMusic, tooltip: \"Removes the music that plays when your character does not have a sword.\", ignoreFlags : true },\r\n    RemoveAcornPoPDelay : { value : false, max : 2, fn: RandomizerFunctions.RemoveAcornPoPDelay, tooltip: \"Removes the dialog and music that plays when you grab a guardian acorn or piece of power.\", ignoreFlags : true },\r\n    RemoveLowHealthBeep : { value : false, max : 2, fn: RandomizerFunctions.RemoveLowHealthBeep, tooltip: \"Removes the beeping noise when you are at low health.\", ignoreFlags : true },\r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                           Extra\r\n    //\r\n    //==========================================================================================================================================\r\n\r\n    ExtraFeather : { value : false, max : 2, fn: RandomizerFunctions.ExtraFeather, tooltip: \"Replaces one rupee chest with an additional feather.\" },\r\n    ExtraPowerBraceletL1 : { value : false, max : 2, fn: RandomizerFunctions.ExtraPowerBraceletL1, tooltip: \"Replaces one rupee chest with an additional power bracelet.\" },\r\n    ExtraBoots : { value : false, max : 2, fn: RandomizerFunctions.ExtraBoots, tooltip: \"Replaces one rupee chest with an additional boots.\" },\r\n    ExtraFlippers : { value : false, max : 2, fn: RandomizerFunctions.ExtraFlippers, tooltip: \"Replaces one rupee chest with an additional flippers.\" },\r\n    ExtraHookshot : { value : false, max : 2, fn: RandomizerFunctions.ExtraHookshot, tooltip: \"Replaces one rupee chest with an additional hookshot.\" },\r\n    ExtraPowerBraceletL2 : { value : false, max : 2, fn: RandomizerFunctions.ExtraPowerBraceletL2, tooltip: \"Replaces one rupee chest with an additional power bracelet.\" },\r\n    ExtraMirrorShield : { value : false, max : 2, fn: RandomizerFunctions.ExtraMirrorShield, tooltip: \"Replaces one rupee chest with an additional mirror shield.\" },\r\n    ExtraFirerod : { value : false, max : 2, fn: RandomizerFunctions.ExtraFirerod, tooltip: \"Replaces one rupee chest with an additional firerod.\" },\r\n    ExtraBow : { value : false, max : 2, fn: RandomizerFunctions.ExtraBow, tooltip: \"Replaces one rupee chest with an additional bow.\" },\r\n    ExtraShovel : { value : false, max : 2, fn: RandomizerFunctions.ExtraShovel, tooltip: \"Replaces one rupee chest with an additional shovel.\" },\r\n    ExtraOcarina : { value : false, max : 2, fn: RandomizerFunctions.ExtraOcarina, tooltip: \"Replaces one rupee chest with an additional ocarina.\" },\r\n    AddSeashells : { value : false, max : 2, fn: RandomizerFunctions.AddSeashells, tooltip: \"Replaces eight 20/50 rupee chests with additional seashells.\" },\r\n    \r\n    AddInstantTransferCaves : { value : false, max : 2, fn: RandomizerFunctions.AddInstantTransferCaves, tooltip: \"New transition doors are added to some screen on the overworld that lead back to the starting house to prevent potential softlocks.  The inclusion of the select map warp trick negates this need.\" },\r\n    AddOverworldModifications : { value : false, max : 2, fn: RandomizerFunctions.AddOverworldModifications, tooltip: \"Changes six screens on the overworld to make it more open for early exploration.\" },\r\n    RemoveCaveObstacles : { value : false, max : 2, fn: RandomizerFunctions.RemoveCaveObstacles, tooltip: \"Removes some obstacles from four cave connectors to allow for earlier exploration.\" },\r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                           DEVELOPER\r\n    //\r\n    //==========================================================================================================================================\r\n   \r\n    // DEVELOPER\r\n    CoreChanges : { value : true, max : 2, fn: RandomizerFunctions.CoreChanges, tooltip: \"Necesary actions to randomizing this game.\", ignoreFlags : true, disabled: !DeveloperMode },\r\n    // MapWarpToStart : { value : true, max : 2, fn: RandomizerFunctions.MapWarpToStart, tooltip: \"On the select menu, hold start + B to warp back to the start house.\" },\r\n    NoModifiedFiles : { value : true, max : 2, fn: RandomizerFunctions.NoModifiedFiles, tooltip: \"Only ROM version 1.0 and 1.2 files can be used.\", ignoreFlags : true, disabled: !DeveloperMode },\r\n    FileSelectCode : { value : true, max : 2, fn: RandomizerFunctions.FileSelectCode, tooltip: \"Converts the checksum to a four graphic code on the top left of the file select screen.  Use this to confirm your seed with another person.\", ignoreFlags : true, disabled: !DeveloperMode },\r\n    // RemoveOwls : { value : true, max : 2, fn: RandomizerFunctions.RemoveOwls, tooltip: \"Owls no longer appear on the overworld.\" },\r\n    SanityChecks : { value : true, max : 2, fn: () => {}, tooltip: \"Makes sure the seed is beatable.\", ignoreFlags : true, disabled: !DeveloperMode },\r\n\r\n    RemoveUW0TileProperties : { value : DeveloperMode, max : 2, fn: RandomizerFunctions.RemoveUW0TileProperties, tooltip: \"Removes most overworld collisions (debug).\", ignoreFlags : true, disabled: !DeveloperMode },\r\n    RemoveUW1TileProperties : { value : DeveloperMode, max : 2, fn: RandomizerFunctions.RemoveUW1TileProperties, tooltip: \"Removes most underworld 1 collisions (debug).\", ignoreFlags : true, disabled: !DeveloperMode },\r\n    RemoveUW2TileProperties : { value : DeveloperMode, max : 2, fn: RandomizerFunctions.RemoveUW2TileProperties, tooltip: \"Removes most underworld 2 collisions (debug).\", ignoreFlags : true, disabled: !DeveloperMode },\r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                           DO LAST\r\n    //\r\n    //==========================================================================================================================================\r\n\r\n    ShufflePitsGrassRocks : { value : false, max : 2, fn: RandomizerFunctions.ShufflePitsGrassRocks, needSanity : undefined, tooltip : \"Shuffles grass, rocks, and pits around the overworld.\" },\r\n    ShuffleChests : { value : true, max : 2, fn: RandomizerFunctions.ShuffleChests, needSanity : undefined, tooltip: \"Allows all chests to be shuffled anywhere, excluding small keys.\" },\r\n\r\n    //==========================================================================================================================================\r\n    //\r\n    //                                                             DEAD\r\n    //\r\n    //==========================================================================================================================================\r\n    \r\n    // ShuffleLanmolaItem : { value : false, max : 2 },\r\n    // AllowRoosterLogic : { value : false, max : 2, /*fn: RandomizerFunctions.AllowRoosterLogic, */ tooltip: \"When enabled, the rooster is factored into the logic of solving the game.  It still may not be required, but you never know...\", ignoreFlags : true },\r\n};\r\n\r\nexport const ConvertStateToFlags = (value, possible) => {\r\n    // Number = Number * Possible + Selected\r\n    let n = BigInt(0);\r\n    let i;\r\n    let result;\r\n\r\n    for (i = 0; i <= value.length-1; i++) {\r\n        n = (n * BigInt(HexToInt(possible[i]))) + BigInt(HexToInt(value[i]));\r\n    }\r\n  \r\n    result = ConvertToBase2(10, 62, n.toString());\r\n\r\n    return result;\r\n};\r\n\r\nexport const ConvertFlagsToState = (s, state) => {\r\n    // Convert base62 flags to formula\r\n    let flags = BigInt(ConvertToBase2(62, 10, s));\r\n\r\n    // f is a function that has the obj as 'this' and the property name as first parameter\r\n    function reverseForIn(obj, fn) {\r\n        var arr = [];\r\n        for (var key in obj) {\r\n            // add hasOwnPropertyCheck if needed\r\n            arr.push(key);\r\n        }\r\n        for (var i=arr.length-1; i>=0; i--) {\r\n            fn.call(obj, arr[i]);\r\n        }\r\n    }\r\n  \r\n    //usage\r\n    let arr = [];\r\n    reverseForIn(state, function(key){ \r\n        arr.push(key);\r\n    });\r\n\r\n    arr.forEach(x => {\r\n        if (state[x].ignoreFlags) {\r\n            return;\r\n        }\r\n\r\n        if (state[x].max === 2) {\r\n            // let Quotient = flags / BigInt(2);\r\n            let Remainder = flags % BigInt(2);\r\n            let value;\r\n\r\n            if (Remainder === BigInt(0)) {\r\n                value = false;\r\n            }\r\n            else {\r\n                value = true;\r\n            }\r\n\r\n            state[x].value = value;\r\n\r\n            flags = BigInt(flags / BigInt(2));\r\n        }\r\n\r\n        else if (state[x].max >= 1) {\r\n            let max = state[x].max;\r\n            let Remainder = flags % BigInt(max);\r\n            let value;\r\n\r\n            value = Number(Remainder);\r\n\r\n            state[x].value = value;\r\n\r\n            flags = BigInt(flags / BigInt(max));\r\n        }\r\n\r\n        else {\r\n            console.error(\"Missed converting something in FlagsToState!\");\r\n            debugger;\r\n        }\r\n\r\n    });\r\n\r\n    return state;\r\n};","import React, { useState, useEffect } from 'react';\r\nimport Checkbox from 'muicss/lib/react/checkbox';\r\nimport Tabs from 'muicss/lib/react/tabs';\r\nimport Tab from 'muicss/lib/react/tab';\r\nimport { isNumeric, clone, isBoolean } from \"../../utilities\";\r\nimport { ConvertStateToFlags, ConvertFlagsToState, state, Z4_VERSION } from \"./state\";\r\n\r\nconst Client = (props) => {\r\n    const { userState, onGenerate } = props;\r\n\r\n    const [file, setFile] = useState(undefined);\r\n    const [fileName, setFileName] = useState(\"\");\r\n    const [seed, setSeed] = useState(123456789);\r\n    const [flags, setFlags] = useState(\"\");\r\n    const [checkedItems, setCheckedItems] = useState(clone(userState));\r\n    const [disableGenerate, setDisableGenerate] = useState(false);\r\n\r\n    //----------------------------------------------------------------------------------------------------\r\n    //\r\n    //                                       Top Section Events\r\n    //\r\n    //----------------------------------------------------------------------------------------------------\r\n\r\n    const onROMButtonClick = () => {\r\n        document.getElementById('fileInput').click();\r\n    };\r\n\r\n    const onROMLoad = () => {\r\n        let fileInput = document.getElementById('fileInput');\r\n\r\n        var file = fileInput.files[0];\r\n\r\n        if (!file) {\r\n            return;\r\n        }\r\n\r\n        var reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n            let f = new Uint8Array(reader.result);\r\n            setFileName(file.name);\r\n            setFile(f);\r\n        };\r\n\r\n        reader.readAsArrayBuffer(file);  \r\n    };\r\n\r\n    const onSeedChange = (e) => {\r\n        if (e.target.value.length <= 10) {\r\n            if (isNumeric(e.target.value)) {\r\n                setSeed(e.target.value);\r\n            }\r\n        }\r\n    };\r\n\r\n    const onNewSeedClick = () => {\r\n        setSeed(Math.floor(Math.random() * 200000000) + 1);     // returns a random integer from 1 to 2000000000\r\n    };\r\n\r\n    const onFlagsChange = (e) => {\r\n        let value = e.target.value;\r\n        setFlags(value);\r\n\r\n        let x = clone(checkedItems);\r\n        let newCheckedItems = ConvertFlagsToState(value, x);\r\n        setCheckedItems(newCheckedItems);\r\n    };\r\n\r\n    //----------------------------------------------------------------------------------------------------\r\n    //\r\n    //                                       Option Change\r\n    //\r\n    //----------------------------------------------------------------------------------------------------\r\n\r\n    const onCheckboxChange = (e) => {\r\n        setCheckedItems({\r\n            ...checkedItems,\r\n            [e.target.name] : {\r\n                ...checkedItems[e.target.name],\r\n                value : e.target.checked, \r\n            }\r\n        });\r\n    };\r\n\r\n    const onInstrumentsRequiredChange = (e) => {\r\n        setCheckedItems({\r\n            ...checkedItems,\r\n            ChangeRequiredInstruments : {\r\n                ...checkedItems[\"ChangeRequiredInstruments\"],\r\n                value : e.target.selectedIndex\r\n            }\r\n        });\r\n    };\r\n\r\n    const onLinkSpriteChange = (e) => {\r\n        setCheckedItems({\r\n            ...checkedItems,\r\n            LinkSprite : {\r\n                ...checkedItems[\"LinkSprite\"],\r\n                value : e.target.selectedIndex, \r\n            },\r\n        });\r\n    };\r\n\r\n    const onEnemyDamageChange = (e) => {\r\n        setCheckedItems({\r\n            ...checkedItems,\r\n            EnemyDamage : {\r\n                ...checkedItems[\"EnemyDamage\"],\r\n                value : e.target.selectedIndex, \r\n            },\r\n        });\r\n    };\r\n\r\n    const onMiscDamageChange = (e) => {\r\n        setCheckedItems({\r\n            ...checkedItems,\r\n            MiscDamage : {\r\n                ...checkedItems[\"MiscDamage\"],\r\n                value : e.target.selectedIndex, \r\n            },\r\n        });\r\n    };\r\n\r\n    //----------------------------------------------------------------------------------------------------\r\n    //\r\n    //                                       On state change\r\n    //\r\n    //----------------------------------------------------------------------------------------------------\r\n\r\n    useEffect(() => {\r\n        let value = '';\r\n        let possible = '';\r\n    \r\n        for (var prop in checkedItems) {\r\n            if (checkedItems.hasOwnProperty(prop)) {\r\n\r\n                if (checkedItems[prop].ignoreFlags) {\r\n                    continue;\r\n                }\r\n\r\n                let value1 = checkedItems[prop].value;\r\n                let max1 = checkedItems[prop].max;\r\n    \r\n                if (isBoolean(value1)) {\r\n                    value += (value1 ? 1 : 0).toString(); \r\n                }\r\n                else {\r\n                    value += value1.toString(16); \r\n                }\r\n\r\n                possible += (max1).toString(16);\r\n            }\r\n        }\r\n\r\n        let flags = ConvertStateToFlags(value, possible);\r\n\r\n        setFlags(flags);\r\n    }, [checkedItems]);\r\n\r\n    //----------------------------------------------------------------------------------------------------\r\n    //\r\n    //                                          Generate\r\n    //\r\n    //----------------------------------------------------------------------------------------------------\r\n\r\n    const onGenerateClick = () => {\r\n        if (typeof file === 'undefined') {\r\n            alert('Please select a valid ROM file.');\r\n            return;\r\n        }\r\n\r\n        if (seed < 0 || seed > 200000000) {\r\n            alert('Please select a valid seed range (0 - 200000000).');\r\n            return;\r\n        }\r\n\r\n        if (typeof checkedItems === 'undefined') {\r\n            alert('Not sure how you messed the state up.  Welp.  Error.');\r\n            return;\r\n        }\r\n\r\n        const finishFn = () => {\r\n            setDisableGenerate(false);\r\n        };\r\n\r\n        setDisableGenerate(true);\r\n\r\n        setTimeout(() => { \r\n            onGenerate(file, fileName, seed, flags, checkedItems, finishFn);\r\n        }, 100);\r\n    };\r\n\r\n    //----------------------------------------------------------------------------------------------------\r\n    //\r\n    //                                          Render\r\n    //\r\n    //----------------------------------------------------------------------------------------------------\r\n\r\n    const styles = {\r\n        tabs : {\r\n            height: 370, \r\n            overflow: 'auto',\r\n            // background: 'blue'\r\n        },\r\n        tab : {\r\n            paddingTop: 10, \r\n            paddingLeft: 25,\r\n            height: 300,\r\n            // background: 'red',\r\n        },\r\n        // tabContent : {\r\n        //     paddingLeft: 25,\r\n        // },\r\n        subCheckbox : {\r\n            paddingLeft: 20\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{height: 550, width: 800, border: '1px solid black', margin: '20px auto', overflow: 'auto', position: 'relative', background: 'white'}}>\r\n\r\n            <div className=\"AppBar\" style={{width: '100%', height: 30, background: '#0067d0'}}>\r\n                <InlineBlock style={{color: 'white', margin: '5px 15px'}}>\r\n                    <img src=\"./Z4Randomizer_Icon.ico\" alt=\"Logo\" style={{height: 18, float: 'left'}} />\r\n                    <div style={{marginLeft: 25}}>Zelda 4 Randomizer Beta {Z4_VERSION}</div>\r\n                </InlineBlock>\r\n            </div>\r\n\r\n            <div className=\"TopSection\" style={{padding: '5px 15px'}}>\r\n                <Block>\r\n                    <Title>Original ROM</Title>\r\n                    <Text value={fileName} readOnly style={{width: 120}} />\r\n                    <Button value=\"Choose...\" onClick={onROMButtonClick} style={{width: 70}} /> \r\n                    <input type=\"file\" id=\"fileInput\" accept=\".gbc\" onChange={onROMLoad} style={{display: 'none'}} />\r\n                </Block>\r\n\r\n                <InlineBlock>\r\n                    <Title>Seed</Title>\r\n                    <Text value={seed} onChange={onSeedChange} style={{width: 120}} />\r\n                    <Button value=\"New seed\" onClick={onNewSeedClick} style={{width: 70}} />\r\n                </InlineBlock>\r\n\r\n                <InlineBlock>\r\n                    <Title>Flags</Title>\r\n                    <Text value={flags} onChange={onFlagsChange} style={{width: 150}} />\r\n                </InlineBlock>\r\n            </div>\r\n            \r\n            <Tabs defaultSelectedIndex={0} style={styles.tabs}>\r\n                <Tab label=\"General\">\r\n                    <Block style={styles.tab}>\r\n\r\n                        <InlineBlock>\r\n                            <Title>Overworld</Title>\r\n                            <Block style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleEntrances\" label=\"Shuffle entrances\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShufflePitsGrassRocks\" label=\"Shuffle pits, grass, rocks\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"MoveWalrus\" label=\"Walrus not required\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveQuickSandTransition\" label=\"Remove quick sand transition\" />\r\n                                {/* <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"AddOverworldWarps\" label=\"Add overworld warps\" /> */}\r\n                            </Block>   \r\n\r\n                            <Title>Caves</Title>\r\n                            <Block style={{marginLeft: 10}}>        \r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RoosterCaveNoTransitions\" label=\"Remove rooster cave pit transitions\" />\r\n                            </Block>   \r\n                        </InlineBlock>\r\n\r\n                        <InlineBlock>\r\n                            <Title>Required instruments</Title>\r\n                            <Select2\r\n                                items={[8, 7, 6, 5, 4, 3, 2, 1, 0, \"Random\"]}\r\n                                itemIndex={checkedItems.ChangeRequiredInstruments.value}\r\n                                onChange={onInstrumentsRequiredChange}\r\n                                title={checkedItems.ChangeRequiredInstruments.tooltip}\r\n                            />\r\n                        </InlineBlock>\r\n\r\n                    </Block>   \r\n                </Tab>\r\n                <Tab label=\"Items\">\r\n                    <Block style={styles.tab}>\r\n                        <InlineBlock style={{marginRight: 85}}>\r\n                            <Title>Items</Title>\r\n                            <Block style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleChests\" label=\"Shuffle chests\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleHeartPieces\" label=\"Shuffle heart pieces\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleSeashellReq\" label=\"Shuffle seashell requirement\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"UpgradeRupeeChests\" label=\"Upgrade chest rupees\" />\r\n                                {/* <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleLanmolaItem\" label=\"Shuffle lanmola item\" /> */}\r\n                            </Block>\r\n\r\n                            <Block>\r\n                                <Title>Shop</Title>\r\n                                <div style={{marginLeft: 10}}>\r\n                                    <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleShopItems\" label=\"Shuffle shop items\" />\r\n                                    <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleShopPrices\" label=\"Shuffle shop prices\" />\r\n                                    <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"NoStealing\" label=\"No stealing from shop\" />\r\n                                </div>\r\n                            </Block>\r\n                        </InlineBlock>\r\n                        <InlineBlock>\r\n                            <Title>New chests</Title>\r\n                            <div style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"SwordInChest\" label=\"Add chest in replace of sword (+1)\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ChestInLinksHouse\" label=\"Add chest in start house (+1)\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"AddChestInColorDungeon\" label=\"Add chest in color dungeon (+1)\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"AddCaveAboveCastleCheckBox\" label=\"Add new cave above castle (+1)\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"AddOverworldKeysInChests\" label=\"Add overworld key chests (+3)\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"HiddenShellsAsChests\" label=\"Replace hidden seashells as chests (+16)\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"CastleHeartChest\" label=\"Replace castle diving heart with chest (+1)\" />\r\n                            </div>\r\n                        </InlineBlock>\r\n                    </Block>\r\n                </Tab>\r\n                <Tab label=\"Enemy\">\r\n                    <Block style={styles.tab}>\r\n                        <InlineBlock style={{marginRight: 85}}>\r\n                            <Title>Bosses</Title>\r\n                            <div style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleBosses\" label=\"Shuffle bosses\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"DuplicateBosses\" label=\"Allow duplicate bosses\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveForceBarrier\" label=\"Remove boss force barrier\" />\r\n                            </div>\r\n                        </InlineBlock>\r\n                        <InlineBlock>\r\n                            <div>\r\n                                <Block style={{marginBottom: 15}}>\r\n                                    <Title>Enemy Damage</Title>\r\n                                    <Select2\r\n                                        items={[\"Normal\", \"Shuffle\", \"+/- 2\", \"+/- 4\", \"Zero\", \"OHKO\"]}\r\n                                        itemIndex={checkedItems.EnemyDamage.value}\r\n                                        onChange={onEnemyDamageChange}\r\n                                        title={checkedItems.EnemyDamage.tooltip}\r\n                                    />\r\n                                </Block>\r\n                                <Block>\r\n                                    <Title>Misc. Damage</Title>\r\n                                    <Select2\r\n                                        items={[\"Normal\", \"Zero\", \"OHKO\"]}\r\n                                        itemIndex={checkedItems.MiscDamage.value}\r\n                                        onChange={onMiscDamageChange}\r\n                                        title={checkedItems.MiscDamage.tooltip}\r\n                                    />\r\n                                </Block>\r\n                            </div>\r\n                        </InlineBlock>\r\n                    </Block>\r\n                </Tab>\r\n                <Tab label=\"Misc.\">\r\n                    <Block style={styles.tab}>\r\n                        <InlineBlock style={{marginRight: 85}}>\r\n                            <Title>Misc.</Title>\r\n                            <div style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"FunPercent\" label=\"Fun %\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"BlackOut\" label=\"Blackout\" />\r\n                                {/* <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"PrintInfo\" label=\"Print info\" /> */}\r\n                                \r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveText\" label=\"Remove text\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveChestDialog\" label=\"Remove chest dialog\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleDungeonPalettes\" label=\"Shuffle dungeon palettes\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ShuffleMusic\" label=\"Shuffle music\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"CharacterSpeedUp\" label=\"Character moves faster\" />\r\n                            </div>\r\n                        </InlineBlock>\r\n                        \r\n                        <InlineBlock style={{marginRight: 85}}>\r\n                            <div style={{marginLeft: 10}}>\r\n                                <Title>Link Sprite</Title>\r\n                                <Select2\r\n                                    items={[\r\n                                        \"Link\",\r\n                                        \"Ages girl\",\r\n                                        \"Bowwwow\",\r\n                                        \"Bunny\",\r\n                                        \"Kirby\",\r\n                                        \"Marin\",\r\n                                        \"Mario\",\r\n                                        \"Martha\",\r\n                                        \"Meme\",\r\n                                        \"Richard\",\r\n                                        \"Rooster\",\r\n                                        \"Subrosian\",\r\n                                        \"Tarin\"\r\n                                    ]}\r\n                                    itemIndex={checkedItems.LinkSprite.value}\r\n                                    onChange={onLinkSpriteChange}\r\n                                />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveSwordlessMusic\" label=\"Remove swordless music\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveAcornPoPDelay\" label=\"Remove PoP/Acorn delay\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveLowHealthBeep\" label=\"Remove low health beeping\" />\r\n                            </div>\r\n                        </InlineBlock>\r\n                    </Block>\r\n                </Tab>\r\n                <Tab label=\"Extra\">\r\n                    <Block style={styles.tab}>\r\n                        <InlineBlock style={{marginRight: 85}}>\r\n                            <Title>Add items in chest</Title>\r\n                            <div style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraFeather\" label=\"Feather\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraPowerBraceletL1\" label=\"Power Bracelet\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraBoots\" label=\"Boots\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraFlippers\" label=\"Flippers\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraHookshot\" label=\"Hookshot\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraPowerBraceletL2\" label=\"Power Bracelet\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraMirrorShield\" label=\"Mirror Shield\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraFirerod\" label=\"Firerod\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraBow\" label=\"Bow\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraShovel\" label=\"Shovel\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"ExtraOcarina\" label=\"Ocarina\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"AddSeashells\" label=\"More seashells\" />\r\n                            </div>\r\n                        </InlineBlock>\r\n                            \r\n                        <InlineBlock style={{marginLeft: 10}}>\r\n                            <Title>Add other</Title>\r\n                            <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"AddInstantTransferCaves\" label=\"Add instant transfer caves\" />\r\n                            <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"AddOverworldModifications\" label=\"Add overworld modifications\" />\r\n                            <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveCaveObstacles\" label=\"Remove some cave obstacles\" />\r\n                        </InlineBlock>\r\n                    </Block>\r\n                </Tab>\r\n                <Tab label=\"Developer\">\r\n                    <Block style={styles.tab}>\r\n                        <InlineBlock style={{marginRight: 85}}>\r\n                            <Title>Standard</Title>\r\n                            <div style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"CoreChanges\" label=\"Core changes\" />\r\n                                {/* <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"MapWarpToStart\" label=\"Map warp to start\" /> */}\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"NoModifiedFiles\" label=\"No modified files\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"FileSelectCode\" label=\"Player select code\" />\r\n                                {/* <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveOwls\" label=\"Remove owls\" /> */}\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"SanityChecks\" label=\"Do Sanity Checks\" />\r\n                            </div>\r\n                        </InlineBlock>\r\n\r\n                        <InlineBlock style={{marginRight: 85}}>\r\n                            <Title>Debug</Title>\r\n                            <div style={{marginLeft: 10}}>\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveUW0TileProperties\" label=\"Remove UW0 Tile Properties\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveUW1TileProperties\" label=\"Remove UW1 Tile Properties\" />\r\n                                <Checkbox2 onChange={onCheckboxChange} checkedItems={checkedItems} name=\"RemoveUW2TileProperties\" label=\"Remove UW2 Tile Properties\" />\r\n                            </div>\r\n                        </InlineBlock>\r\n                    </Block>\r\n                </Tab>\r\n            </Tabs>\r\n\r\n            {\r\n                disableGenerate ?\r\n                    null :\r\n                    <div style={{position: 'absolute', bottom: 0, left: 0, right: 0, height: 42, borderTop: '1px solid #CCC'}}>\r\n                        <Button value=\"Generate\" onClick={onGenerateClick} style={{width: 170, margin: 8}} disabled={disableGenerate} /> \r\n                    </div>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst Select2 = (props) => {\r\n    const { itemIndex, items, onChange, title } = props;\r\n\r\n    const styles = {\r\n        select : {\r\n            width: 100\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <select value={items[itemIndex]} onChange={onChange} title={title} style={styles.select}>\r\n            {\r\n                items.map((x, i) => (\r\n                    <option key={i}>\r\n                        {items[i]}\r\n                    </option>\r\n                ))\r\n            }\r\n        </select>\r\n    );\r\n};\r\n\r\nconst Checkbox2 = (props) => {\r\n    const { checkedItems, style, ...rest } = props;\r\n\r\n    const styles = {\r\n        div : {\r\n            marginBottom: 8, \r\n            fontSize: 14, \r\n            fontFamily: \"Tahoma\",\r\n            color: !state[props.name].fn ? 'red' : checkedItems[props.name].ignoreFlags ? \"#008dad\" : checkedItems[props.name].needSanity ? \"blue\" : \"initial\",\r\n            ...style\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Checkbox style={styles.div} checked={checkedItems[props.name].value} disabled={checkedItems[props.name].disabled} title={checkedItems[props.name].tooltip} {...rest} />\r\n    );\r\n};\r\n\r\nconst InlineBlock = (props) => {\r\n    const { style } = props;\r\n\r\n    const styles = {\r\n        div : {\r\n            // margin: \"5px 15px\",\r\n            display: \"inline-block\",\r\n            verticalAlign: 'top',\r\n            marginBottom: 5,\r\n            marginRight: 15,\r\n            ...style\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={styles.div}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Block = (props) => {\r\n    const { style } = props;\r\n    \r\n    const styles = {\r\n        div : {\r\n            // margin: \"5px 15px\",\r\n            display: \"block\",\r\n            marginBottom: 5,\r\n            marginRight: 15,\r\n            ...style\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={styles.div}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Title = (props) => {\r\n    const styles = {\r\n        smallTitle : {\r\n            fontWeight: 'bold',\r\n            fontSize: '11px',\r\n            fontFamily: \"Tahoma\",\r\n            marginBottom: 5,\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={styles.smallTitle}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Text = (props) => {\r\n    const { style, ...rest } = props;\r\n\r\n    const styles = {\r\n        text : {\r\n            fontWeight: 'bold',\r\n            fontSize: '11px',\r\n            fontFamily: \"Tahoma\",\r\n            padding: 3,\r\n            ...style\r\n        }\r\n    };\r\n\r\n    return (\r\n        <input type=\"text\" style={styles.text} {...rest} />\r\n    );\r\n};\r\n\r\nconst Button = (props) => {\r\n    const { style, ...rest } = props;\r\n\r\n    const styles = {\r\n        button : {\r\n            fontWeight: 'bold',\r\n            fontSize: '11px',\r\n            fontFamily: \"Tahoma\",\r\n            padding: 3,\r\n            marginLeft: 5,\r\n            ...style\r\n        }\r\n    };\r\n\r\n    return (\r\n        <input type=\"button\" style={styles.button} {...rest} />\r\n    );\r\n};\r\n\r\nexport default Client;","import { StringOfBytesTo2DHexArray, create2DArray, HexToInt } from \"../../utilities\";\r\n\r\nconst GameBoardMapping = () => {\r\n    const GameBoardMappingRoomID = StringOfBytesTo2DHexArray(`\r\n        00 01 02 03 04 05 06 07     08 09 0A 0B 0C 0D 0E 0F     99 9B 9C 9D B4 CB CC E3     B6 B7 B8 B9 85 86 FD F3 \r\n        10 11 12 13 14 15 16 17     18 19 1A 1B 1C 1D 1E 1F     9F A0 A1 A2 A3 A5 A6 A7     ED EE EA EB EC 87 F1 F2 \r\n        20 21 22 23 24 25 26 27     28 29 2A 2B 2C 2D 2E 2F     A8 A9 AA AD B0 B2 C7 D7     FE EF BA BB BC 8D F9 FA \r\n        30 31 32 33 34 35 36 37     38 39 3A 3B 3C 3D 3E 3F     D9 DA DB DC DD E9 B5 00     80 81 82 83 84 8C 88 8A \r\n        40 41 42 43 44 45 46 47     48 49 4A 4B 4C 4D 4E 4F     BE BF C2 C3 C5 C6 6F 74     90 91 92 00 8E 9A 89 8B \r\n        50 51 52 53 54 55 56 57     58 59 5A 5B 5C 5D 5E 5F     CE CF D2 D3 D5 D6 7F 73     97 93 94 95 96 00 AB AC \r\n        60 61 62 63 64 65 66 67     68 69 6A 6B 6C 6D 6E 6F     E0 E1 E2 00 00 00 8F 71     98 7A 7B 00 E6 E7 00 BD \r\n        70 71 72 73 74 75 76 77     78 79 7A 7B 7C 7D 7E 7F     F0 00 00 B1 C0 C1 F5 72     00 7C 7D 7E F6 F7 DE DF \r\n        \r\n        80 81 82 83 84 85 86 87     88 89 8A 8B 8C 8D 8E 8F     16 16 16 16 16 16 16 76     00 00 00 00 00 00 00 00\r\n        90 91 92 93 94 95 96 97     98 99 9A 9B 9C 9D 9E 9F     16 16 16 16 16 16 16 75     C8 E4 E5 AE AF A4 B3 CD\r\n        A0 A1 A2 A3 A4 A5 A6 A7     A8 A9 AA AB AC AD AE AF     16 16 16 16 16 16 16 70     D8 F4 FC C9 CA FB D0 D1\r\n        B0 B1 B2 B3 B4 B5 B6 B7     B8 B9 BA BB BC BD BE BF     16 00 01 16 16 02 03 16     00 00 00 00 00 00 00 00\r\n        C0 C1 C2 C3 C4 C5 C6 C7     C8 C9 CA CB CC CD CE CF     16 04 05 06 07 08 09 16     E0 E1 E2 E3 E4 E5 E6 E7\r\n        D0 D1 D2 D3 D4 D5 D6 D7     D8 D9 DA DB DC DD DE DF     16 16 0A 0B 0C 0D 16 16     F0 F1 F2 F3 F4 F5 F6 F7\r\n        E0 E1 E2 E3 E4 E5 E6 E7     E8 E9 EA EB EC ED EE EF     16 16 0E 0F 10 11 16 16     E8 E9 EA EB EC 00 EE AC\r\n        F0 F1 F2 F3 F4 F5 F6 F7     F8 F9 FA FB FC FD FE FF     16 16 12 13 14 15 16 16     F8 F9 FA FB FC FD FE 00\r\n         \r\n        00 00 00 00 00 18 19 00     00 00 00 00 00 00 00 00     00 80 81 82 83 84 00 00     D8 D9 DA DB DC DD 00 00\r\n        00 00 00 00 00 1A 1B 00     00 20 21 22 23 24 25 00     00 00 00 85 86 87 88 00     B0 00 00 00 00 00 00 B1\r\n        00 00 00 00 00 00 02 00     00 00 26 00 00 27 00 00     00 89 8A 8B 8C 8D 8E 8F     B2 B3 00 B4 B5 00 B6 B7\r\n        00 03 04 05 00 00 06 00     00 28 29 3A 3B 2A 2B 00     00 00 00 00 00 90 91 92     B8 B9 BA BB BC BD BE BF\r\n        1D 00 07 08 09 0A 0B 00     00 2C 00 3C 3D 00 2D 00     A2 A3 00 93 94 95 96 00     C0 C1 C2 C3 C4 C5 C6 C7\r\n        1C 0C 0D 0E 0F 10 11 00     00 2E 00 3E 3F 00 2F 00     A4 A5 97 98 99 9A 00 00     00 C8 C9 CA CB CC CD 00\r\n        01 00 12 13 14 00 00 00     00 30 31 32 33 34 35 00     A6 A7 00 9B 9C 9D 00 00     00 CE CF 00 00 D0 D1 00\r\n        00 15 16 17 00 00 00 00     00 00 36 37 38 39 00 00     A8 A9 00 00 9E 9F A0 A1     00 D2 D3 D4 D5 D6 D7 00\r\n         \r\n        40 41 42 43 00 AA AB 00     00 00 00 00 00 00 00 00     00 11 12 00 00 00 00 E8     60 61 00 30 31 00 62 63 \r\n        44 45 46 47 00 00 00 00     00 00 00 60 61 00 00 00     13 14 15 16 00 00 00 F8     32 64 65 34 35 66 67 37 \r\n        48 49 4A 4B 00 00 54 00     00 62 00 63 64 00 65 00     17 18 19 1A 00 00 00 00     38 39 3A 3B 3C 3D 3E 3F \r\n        00 4C 4D 00 00 55 56 57     EF 66 67 68 69 6A 6B 00     1B 1C 1D 1E 00 00 00 00     00 40 41 42 43 44 45 00 \r\n        00 4E 00 00 00 00 58 00     FF 6C 6D 6E 6F 70 71 00     01 02 03 04 00 1F 20 00     00 46 47 48 49 4A 4B 00 \r\n        00 4F 50 00 00 00 59 00     7C 7D 72 73 74 75 00 00     05 06 07 08 21 2B 2C 24     4C 4D 4E 4F 50 51 52 53 \r\n        00 51 00 00 00 00 5A 00     1E 1F 76 77 78 79 00 00     09 0A 0B 0C 25 2D 2E 28     54 55 56 57 58 59 5A 5B \r\n        00 52 53 00 00 00 5B 5C     5E 5F 00 7A 7B 00 00 00     0D 0E 0F 10 00 29 2A 00     5C 68 69 5D 5E 6A 6B 5F \r\n    `, 0x20, 0x20);\r\n\r\n    const GameBoardMappingUWID = StringOfBytesTo2DHexArray(`\r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 02 02 02 02 02 02 02     02 02 02 02 02 02 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 02 02 02 02 02 02 02     02 02 02 02 02 02 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 02 02 02 02 02 02 02     02 02 02 02 02 02 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 02 02 02 02 02 02 FF     02 02 02 02 02 02 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 02 02 02 02 02 02 02     02 02 02 FF 02 02 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 02 02 02 02 02 02 02     02 02 02 02 02 FF 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 02 02 FF FF FF 02 02     02 02 02 FF 02 02 FF 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     02 FF FF 02 02 02 02 02     FF 02 02 02 02 02 02 02 \r\n        \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 02     FF FF FF FF FF FF FF FF\r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 02     02 02 02 02 02 02 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 02     02 02 02 02 02 02 02 02 \r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 03     FF FF FF FF FF FF FF FF\r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 03     01 01 01 01 01 01 01 01\r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 03     01 01 01 01 01 01 01 01\r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 03     01 01 01 01 01 FF 01 01\r\n        00 00 00 00 00 00 00 00     00 00 00 00 00 00 00 00     03 03 03 03 03 03 03 03     01 01 01 01 01 01 01 01\r\n\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01\r\n\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     FF 02 02 FF FF FF FF 02     02 02 FF 02 02 FF 02 02\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     02 02 02 02 FF FF FF 02     02 02 02 02 02 02 02 02\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     02 02 02 02 FF FF FF FF     02 02 02 02 02 02 02 02\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     02 02 02 02 FF FF FF FF     FF 02 02 02 02 02 02 FF\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     02 02 02 02 FF 02 02 FF     FF 02 02 02 02 02 02 FF\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     02 02 02 02 02 02 02 02     02 02 02 02 02 02 02 02\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     02 02 02 02 02 02 02 02     02 02 02 02 02 02 02 02\r\n        01 01 01 01 01 01 01 01     01 01 01 01 01 01 01 01     02 02 02 02 FF 02 02 FF     02 02 02 02 02 02 02 02\r\n    `, 0x20, 0x20);\r\n\r\n    let arr = create2DArray(0x20, 0x20, undefined);\r\n    let uwIDArr = create2DArray(0x20, 0x20, undefined);\r\n    let roomIDArr = create2DArray(0x20, 0x20, undefined);\r\n    \r\n    for (let x = 0; x < 0x20; x++) {\r\n        for (let y = 0; y < 0x20; y++) {\r\n            arr[y][x] = { \r\n                uwID : HexToInt(GameBoardMappingUWID[y][x]),\r\n                roomID : HexToInt(GameBoardMappingRoomID[y][x])\r\n            };\r\n        }\r\n    }\r\n\r\n    for (let x = 0; x < 0x20; x++) {\r\n        for (let y = 0; y < 0x20; y++) {\r\n            uwIDArr[y][x] = HexToInt(GameBoardMappingUWID[y][x]);\r\n            roomIDArr[y][x] = HexToInt(GameBoardMappingRoomID[y][x]);\r\n        }\r\n    }\r\n\r\n    return {\r\n        arr : arr,\r\n        uwIDArr : uwIDArr,\r\n        roomIDArr : roomIDArr,\r\n    };\r\n};\r\n\r\nexport default GameBoardMapping;","import { GetSpriteInformation } from \"../Read/Sprites\";\r\nimport { GetRoomDataGameBoardSquares } from '../Read/RoomData';\r\n\r\nexport const GetEmptyRoomSquares = () => {\r\n    let arr = [];\r\n\r\n    for (let y = 0; y < 8; y++) {\r\n        for (let x = 0; x < 10; x++) {\r\n            arr.push({\r\n                x : x,\r\n                y : y,\r\n                roomX : x,\r\n                roomY : y,\r\n                hexID : \"00\",\r\n                id: 0x00,\r\n                tileType: 0xFF,\r\n            });\r\n        }\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\nexport const GetRoomSquares = (f, uwID, roomID, special = false) => {\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    let arr11 = GetRoomDataGameBoardSquares(f, uwID, roomID, special);\r\n    let sprites = GetSpriteInformation(f, uwID, roomID);\r\n\r\n    if (arr11) {\r\n        for (let i = 0; i < arr11.length; i++) {\r\n            let square = arr11[i];\r\n            for (let j = 0; j < sprites.data.length; j++) {\r\n                let sprite = sprites.data[j];\r\n                if ((square.x === sprite.x) && (square.y === sprite.y)) {\r\n                    square.sprite = sprite.id;\r\n\r\n                    /* Walrus */\r\n                    if (sprite.id === 0xC4) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n                    /* Large Swamp Flower 2x2 */\r\n                    if (sprite.id === 0x7C) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n                    /* D2 Moving platform updown Minidungon 2x4*/\r\n                    if (sprite.id === 0xA4) {\r\n\r\n                        /* D8's second platform is wierd */\r\n                        if ((square.roomX === 5) && (square.roomY === 5)) {\r\n                            for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                                let square2 = arr11[i2];\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x) && (square2.y === square.y - 1)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y - 1)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x) && (square2.y === square.y - 2)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y - 2)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                            }\r\n                        }\r\n                        else {\r\n                            for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                                let square2 = arr11[i2];\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x) && (square2.y === square.y + 2)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y + 2)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x) && (square2.y === square.y + 3)) { square2.sprite = sprite.id; }\r\n                                if ((square2.x === square.x + 1) && (square2.y === square.y + 3)) { square2.sprite = sprite.id; }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    /* D2 Platform Minidungon 2x1 */\r\n                    if (sprite.id === 0xA5) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n                    /* D3 Thowmp Minidungon 2x2*/\r\n                    if (sprite.id === 0xD9) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n                    /* D4 Moving platform leftright Minidungon 5x1*/\r\n                    if (sprite.id === 0xA3) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 2) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 3) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 4) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n                    /* D4 Twomp Fall Minidungon 2x2*/\r\n                    if (sprite.id === 0xD8) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n                    /* D6 Big Spark Minidungon 2x2*/\r\n                    if (sprite.id === 0xDB) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x + 1) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n                    /* Flamethrower 1x5 */\r\n                    if (sprite.id === 0xE2) {\r\n                        for (let i2 = 0; i2 < arr11.length; i2++) {\r\n                            let square2 = arr11[i2];\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 1)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 2)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 3)) { square2.sprite = sprite.id; }\r\n                            if ((square2.x === square.x) && (square2.y === square.y + 4)) { square2.sprite = sprite.id; }\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    arr11.forEach(o => o.x = o.x + x);\r\n    arr11.forEach(o => o.y = o.y + y);\r\n\r\n    return arr11;\r\n};","import GameBoardMapping from './GameBoardMapping';\r\nimport { GetChestContent, LA_Gel } from \"../Read/Chests\";\r\nimport { GetEventContent } from \"../Read/Events\";\r\nimport { GetSubMapID } from \"../Read/Submap\";\r\nimport { Z4_MAPCATEGORY, Z4_ROOMTYPES, Z4_ConnectorTYPES } from \"../Constants/uConstants\";\r\nimport { create2DArray, RoomExists/*, GBStringify*/ } from \"../../utilities\";\r\nimport { GetEmptyRoomSquares, GetRoomSquares } from \"./RoomSquares\";\r\nimport { GetImportantShopItems } from \"../Read/ReadRom\";\r\n\r\nconst VisualizerData = (f) => {\r\n    let maxX = 10*16*2;\r\n    let maxY = 8*16*2;\r\n\r\n    /* Information by room */\r\n    let mapping = GameBoardMapping();\r\n    let uwIDArr = mapping.uwIDArr;\r\n    let roomIDArr = mapping.roomIDArr;\r\n    let gameSquares = create2DArray(0x20, 0x20, undefined);\r\n    let chestSquares = create2DArray(0x20, 0x20, undefined);\r\n    let events = create2DArray(0x20, 0x20, undefined);\r\n    let subMapIDsArr = create2DArray(0x20, 0x20, undefined);\r\n    let mapCategories = create2DArray(0x20, 0x20, undefined); \r\n    let connectorTypes = create2DArray(0x20, 0x20, undefined);\r\n    let roomTypes = create2DArray(0x20, 0x20, undefined);\r\n\r\n    /* Create an array [0x00..0x1F, 0x00..0x1F, 0x00..0x7F] of TSquare */\r\n    for (let y = 0; y < 0x20; y++) {\r\n        for (let x = 0; x < 0x20; x++) {\r\n            let uwID = uwIDArr[y][x];\r\n            let roomID = roomIDArr[y][x];\r\n\r\n            if ((uwID === 0xFF) || !RoomExists(uwID, roomID)) {\r\n                gameSquares[y][x] = GetEmptyRoomSquares();\r\n                chestSquares[y][x] = LA_Gel;\r\n                events[y][x] = 0x00;\r\n                subMapIDsArr[y][x] = 0xFF;\r\n                mapCategories[y][x] = 0xFF;\r\n                connectorTypes[y][x] = 0xFF;\r\n                roomTypes[y][x] = 0xFF;\r\n            }\r\n            else {\r\n                /* D4 waterfall */\r\n                if ((uwID === 0) && (roomID === 0x1B)) {\r\n                    gameSquares[y][x] = GetRoomSquares(f, uwID, roomID, true);\r\n                }\r\n                /* D4 */\r\n                else if ((uwID === 0) && (roomID === 0x2B)) {\r\n                    gameSquares[y][x] = GetRoomSquares(f, uwID, roomID, true);\r\n                }\r\n                /* D6 */\r\n                else if ((uwID === 0) && (roomID === 0x8C)) {\r\n                    gameSquares[y][x] = GetRoomSquares(f, uwID, roomID, true);\r\n                }\r\n                /* D7 */\r\n                else if ((uwID === 0) && (roomID === 0x0E)) {\r\n                    gameSquares[y][x] = GetRoomSquares(f, uwID, roomID, true);\r\n                }\r\n                else {\r\n                    gameSquares[y][x] = GetRoomSquares(f, uwID, roomID);\r\n                }\r\n                chestSquares[y][x] = GetChestContent(f, uwID, roomID);\r\n                events[y][x] = GetEventContent(f, uwID, roomID);\r\n                subMapIDsArr[y][x] = GetSubMapID(f, uwID, roomID);\r\n                mapCategories[y][x] = Z4_MAPCATEGORY[uwID][roomID];\r\n                connectorTypes[y][x] = Z4_ConnectorTYPES[uwID][roomID];\r\n                roomTypes[y][x] = Z4_ROOMTYPES[uwID][roomID];\r\n            }\r\n        }\r\n    }\r\n\r\n    let arr = create2DArray(maxY, maxX, undefined);\r\n    \r\n    for (let y = 0; y < 0x20; y++) {\r\n        for (let x = 0; x < 0x20; x++) {\r\n            let roomSquares = gameSquares[y][x];\r\n\r\n            let newX = x * 10;\r\n            let newY = y * 8;\r\n\r\n            let newRoomSquares = roomSquares.map(o => {\r\n                let setX = o.x + newX;\r\n                let setY = o.y + newY;\r\n                return {\r\n                    ...o, \r\n                    x : setX, \r\n                    y : setY\r\n                };\r\n            });\r\n\r\n            newRoomSquares.forEach(o => {\r\n                let y2 = o.y;\r\n                let x2 = o.x;\r\n                arr[y2][x2] = o;\r\n            });\r\n        }\r\n    }\r\n\r\n    /* Information by tile */\r\n    let tileTypes = create2DArray(maxY, maxX, 0);\r\n    let tileIDs = create2DArray(maxY, maxX, 0);\r\n    let sprites = create2DArray(maxY, maxX, 0);\r\n    let isTransition = create2DArray(maxY, maxX, 0);\r\n    let transitions = create2DArray(maxY, maxX, 0);\r\n\r\n    for (let y = 0; y < arr.length; y++) {\r\n        for (let x = 0; x < arr[y].length; x++) {\r\n            tileTypes[y][x] = arr[y][x].tileType;\r\n            tileIDs[y][x] = arr[y][x].id;\r\n            sprites[y][x] = arr[y][x].sprite || null;\r\n            isTransition[y][x] = arr[y][x].isTransition ? 1 : 0;\r\n            transitions[y][x] = arr[y][x].transition ? arr[y][x].transition.data : null;\r\n        }\r\n    }\r\n\r\n    let shovelSlotItem = GetImportantShopItems(f).shovelSlot;\r\n    let bowSlotItem = GetImportantShopItems(f).bowSlot;\r\n\r\n    /* Needed for the visualizer */\r\n    let output = {\r\n        chestSquares : chestSquares,\r\n        events : events,\r\n        roomIDArr : roomIDArr,\r\n        sprites : sprites,\r\n        \r\n        tileIDs : tileIDs,\r\n        tileTypes : tileTypes,\r\n        uwIDArr : uwIDArr,\r\n        subMapIDsArr : subMapIDsArr,\r\n\r\n        mapCategories : mapCategories,\r\n        connectorTypes : connectorTypes,\r\n        roomTypes : roomTypes,\r\n        isTransition : isTransition,\r\n\r\n        transitions : transitions,\r\n        shovelSlotItem : shovelSlotItem,\r\n        bowSlotItem : bowSlotItem,\r\n    };\r\n    \r\n    // let outputStr = GBStringify({\r\n    //     chestSquares : chestSquares,\r\n    //     events : events,\r\n    //     roomIDArr : roomIDArr,\r\n    //     sprites : sprites,\r\n        \r\n    //     tileIDs : tileIDs,\r\n    //     tileTypes : tileTypes,\r\n    //     uwIDArr : uwIDArr,\r\n    //     subMapIDsArr : subMapIDsArr,\r\n\r\n    //     mapCategories : mapCategories,\r\n    //     connectorTypes : connectorTypes,\r\n    //     roomTypes : roomTypes,\r\n    //     isTransition : isTransition,\r\n\r\n    //     transitions : transitions,\r\n    // });\r\n\r\n    return {\r\n        value : output,\r\n        // outputStr : outputStr,\r\n    };\r\n};\r\n\r\nexport default VisualizerData;","export const Z4_BOARD_STATE_UNCLEARED = 0;\r\nexport const Z4_BOARD_STATE_VISITED   = 1;\r\nexport const Z4_BOARD_STATE_COMPLETE  = 2;\r\n\r\nexport const ROOM_SIZE_X = 10;\r\nexport const ROOM_SIZE_Y = 8;\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                                TileType\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\nexport const Z4_TILE_TRANS             = 0;    \r\nexport const Z4_TILE_SOLID             = 1;    \r\nexport const Z4_TILE_POT               = 2;    \r\nexport const Z4_TILE_KEYLOCKED         = 3;    \r\nexport const Z4_TILE_DOORCLOSED        = 4;    \r\nexport const Z4_TILE_BOMBABLE          = 5;    \r\n// export const Z4_TILE_DOORONEWAY        = 6; \r\nexport const Z4_TILE_SWORDABLE         = 7;    \r\nexport const Z4_TILE_PIT               = 8;    \r\n// export const Z4_TILE_UNKNOWN           = 9; \r\n// export const Z4_TILE_UNKNOWN2          = 10;\r\n// export const Z4_TILE_ORBBLOCK          = 11;\r\nexport const Z4_TILE_FLIPPERS          = 12;   \r\nexport const Z4_TILE_PUSHABLEBLOCK     = 13;   \r\nexport const Z4_TILE_HOOKSHOT          = 14;          // D5 + D8 specific hookshotable tiles\r\nexport const Z4_TILE_CHEST             = 15;   \r\nexport const Z4_TILE_STAIRS            = 16;   \r\nexport const Z4_TILE_PARTSOLID         = 17;   \r\nexport const Z4_TILE_ONEWAYTOP         = 18;\r\nexport const Z4_TILE_STRANGEOBJECT     = 19;\r\nexport const Z4_TILE_LEDGE             = 20;\r\nexport const Z4_TILE_KEYHOLE           = 21;\r\n\r\nexport const Z4_TILE_UPDOWNONLY        = 23;\r\n// export const Z4_TILE_TREE              = 24;\r\n// export const Z4_TILE_HOUSE             = 25;\r\n// export const Z4_TILE_TELEPORTHILL      = 26;\r\nexport const Z4_TILE_GRASS             = 27;\r\nexport const Z4_TILE_RIVERRAPID        = 28;\r\nexport const Z4_TILE_ICECUBE           = 29;\r\nexport const Z4_TILE_MDLADDER          = 30;          // Minidungeon ladder\r\nexport const Z4_TILE_UNLITTORCH        = 31;\r\nexport const Z4_TILE_NIGHTMAREDOOR     = 32;\r\nexport const Z4_TILE_ORBBLOCK1         = 33;\r\nexport const Z4_TILE_ORBBLOCK2         = 34;\r\nexport const Z4_TILE_PITTRANSITION     = 35;\r\nexport const Z4_TILE_SPECIALGRASS      = 36;\r\nexport const Z4_TILE_DUNGEONGATE       = 37;\r\nexport const Z4_TILE_TOMBSTONE         = 38;          // Pushable\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                                CHEST\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\nexport const LA_POWERBRACLET          = 0x00;\r\nexport const LA_MIRRORSHIELD          = 0x01;\r\nexport const LA_BOW                   = 0x02;\r\nexport const LA_HOOKSHOT              = 0x03;\r\nexport const LA_FIREROD               = 0x04;\r\nexport const LA_BOOTS                 = 0x05;\r\nexport const LA_OCARINA               = 0x06;\r\nexport const LA_FEATHER               = 0x07;\r\nexport const LA_SHOVEL                = 0x08;\r\nexport const LA_POWDER                = 0x09;\r\nexport const LA_BOMB                  = 0x0A;\r\nexport const LA_SWORDv0               = 0x0B;\r\nexport const LA_FLIPPERS              = 0x0C;\r\nexport const LA_TRADINGITEM           = 0x0D;\r\nexport const LA_FakeSword1            = 0x0E; // get yoshi doll\r\nexport const LA_FakeSword2            = 0x0F; // get seashell\r\nexport const LA_Mecidine              = 0x10;\r\nexport const LA_TailKey               = 0x11;\r\nexport const LA_AngularKey            = 0x12;\r\nexport const LA_FaceKey               = 0x13;\r\nexport const LA_BirdKey               = 0x14;\r\nexport const LA_GoldenLeaf            = 0x15;\r\nexport const LA_Map                   = 0x16;\r\nexport const LA_Compass               = 0x17;\r\nexport const LA_OwlBeak               = 0x18;\r\nexport const LA_NightmareKey          = 0x19;\r\nexport const LA_SmallKey              = 0x1A;\r\nexport const LA_50Rupees              = 0x1B;\r\nexport const LA_20Rupees              = 0x1C;\r\nexport const LA_100Rupees             = 0x1D;\r\nexport const LA_200Rupees             = 0x1E;\r\nexport const LA_500Rupees             = 0x1F;\r\nexport const LA_SeaShell              = 0x20;\r\nexport const LA_HookshotNote          = 0x21;\r\nexport const LA_Gel                   = 0x22;\r\n\r\nexport const LA_Tunic                 = 0x23;\r\nexport const LA_SONG3                 = 0x24;\r\nexport const LA_SONG2                 = 0x25;\r\nexport const LA_SONG1                 = 0x26;\r\nexport const LA_BOOMERANG             = 0x27;\r\nexport const LA_HeartPiece            = 0x28;\r\n\r\n// Rupees \r\nexport const LA_ITEM_RUPEE_SET = [\r\n    LA_50Rupees,\r\n    LA_20Rupees,\r\n    LA_100Rupees,\r\n    LA_200Rupees,\r\n    LA_500Rupees\r\n];\r\n\r\n// Equipment items only found once\r\nexport const LA_ITEMS_UNIQUE_SET  = [\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_FLIPPERS\r\n];\r\n\r\n// Items only available in dungeons\r\nexport const LA_ITEMS_DUNGEONONLY_SET = [\r\n    LA_Map,\r\n    LA_Compass,\r\n    LA_OwlBeak,\r\n    LA_NightmareKey,\r\n    LA_SmallKey,\r\n    LA_HookshotNote\r\n];\r\n\r\n// Keys on the overworld that unlock areas\r\nexport const LA_ITEMS_OVERWORLD_KEYS = [\r\n    LA_TailKey,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    LA_GoldenLeaf,\r\n];\r\n\r\n// Equipment items only found once\r\nexport const LA_ITEMS_PROGRESSIVE_SET  = [\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    // LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    // LA_OCARINA,\r\n    LA_FEATHER,\r\n    // LA_SHOVEL,\r\n    LA_FLIPPERS,\r\n    LA_TailKey,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    // LA_GoldenLeaf,\r\n];\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                                SPRITE\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\nexport const LA_SPRITE_Octorock            = 0x09;\r\nexport const LA_SPRITE_Moblin              = 0x0B;\r\nexport const LA_SPRITE_Tektite             = 0x0D;\r\nexport const LA_SPRITE_Leever              = 0x0E;\r\nexport const LA_SPRITE_Armos               = 0x0F;\r\n\r\nexport const LA_SPRITE_GRAVEGHOST          = 0x10;\r\nexport const LA_SPRITE_GRAVEGHOSTBIG       = 0x11;\r\nexport const LA_SPRITE_GHOST               = 0x12;\r\nexport const LA_SPRITE_MOBLIN_SWORD        = 0x14;\r\nexport const LA_SPRITE_ANTIFAIRY           = 0x15;\r\nexport const LA_SPRITE_Spark1              = 0x16;\r\nexport const LA_SPRITE_Spark2              = 0x17;\r\nexport const LA_SPRITE_POLSVOICE           = 0x18;\r\nexport const LA_SPRITE_KEESE               = 0x19;\r\nexport const LA_SPRITE_STALFOS2            = 0x1A;\r\nexport const LA_SPRITE_REDGEL              = 0x1B;\r\nexport const LA_SPRITE_SMALL_REDGEL        = 0x1C;\r\nexport const LA_SPRITE_STALFOS_RUNAWAY     = 0x1E;\r\nexport const LA_SPRITE_GIBDO               = 0x1F;\r\n\r\nexport const LA_SPRITE_HARDHATBETTLE       = 0x20;\r\nexport const LA_SPRITE_WIZZROBE            = 0x21;\r\nexport const LA_SPRITE_LIKELIKE            = 0x23;\r\nexport const LA_SPRITE_STAFLOS_THROWER     = 0x24;\r\nexport const LA_SPRITE_TRAP                = 0x27;\r\nexport const LA_SPRITE_ARMMIMIC            = 0x28;\r\nexport const LA_SPRITE_MINIMOLDORM         = 0x29;\r\nexport const LA_SPRITE_BEAMOS              = 0x2A;\r\nexport const LA_SPRITE_SPIKEYBETTLE        = 0x2C;\r\nexport const LA_SPRITE_HEART_HIDDEN        = 0x2D;\r\nexport const LA_SPRITE_RUPEE_HIDDEN        = 0x2E;\r\nexport const LA_SPRITE_FAIRY_HIDDEN        = 0x2F;\r\n\r\nexport const LA_SPRITE_KEY                 = 0x30; // bird key, angular key, small key in minidungeon\r\nexport const LA_SPRITE_SPRITE_SWORD        = 0x31;\r\nexport const LA_SPRITE_HEART_PIECE         = 0x35;\r\nexport const LA_SPRITE_ARROW_HIDDEN        = 0x37;\r\nexport const LA_SPRITE_BOMB_HIDDEN         = 0x38;\r\nexport const LA_SPRITE_INSTRUMENT          = 0x39;\r\nexport const LA_SPRITE_MUSHROOM            = 0x3A;\r\nexport const LA_SPRITE_POWDER_HIDDEN       = 0x3B;\r\nexport const LA_SPRITE_SLIME_KEY_HIDDEN    = 0x3C;\r\nexport const LA_SPRITE_SEASHELL_HIDDEN     = 0x3D;\r\nexport const LA_SPRITE_MARIN               = 0x3E;\r\nexport const LA_SPRITE_TARIN               = 0x3F;\r\n\r\nexport const LA_SPRITE_WITCH               = 0x40;\r\nexport const LA_SPRITE_OWL                 = 0x41;\r\nexport const LA_SPRITE_DUNGEONOWLSTATUE    = 0x42;\r\nexport const LA_SPRITE_TREE_NPC            = 0x43;\r\nexport const LA_SPRITE_GHOST_NPC_GRAVE     = 0x44;\r\nexport const LA_SPRITE_BLOCK_VERTICAL1     = 0x46;\r\nexport const LA_SPRITE_BLOCK_VERTICAL2     = 0x47;\r\nexport const LA_SPRITE_BLOCK_HORIZONTAL1   = 0x48;\r\nexport const LA_SPRITE_BLOCK_HORIZONTAL2   = 0x49;\r\nexport const LA_SPRITE_SHOP_NPC            = 0x4D;\r\nexport const LA_SPRITE_TRENDY_NPC          = 0x4F;\r\n\r\nexport const LA_SPRITE_TRACKINGGHOST       = 0x50;\r\nexport const LA_SPRITE_BALLANDCHAINTROOPER = 0x51;\r\nexport const LA_SPRITE_VACUUM              = 0x52;\r\nexport const LA_SPRITE_ANTIVACUUM          = 0x53;\r\nexport const LA_SPRITE_NPC_FISHINGGAME     = 0x54;\r\nexport const LA_SPRITE_BOMB_ENEMY          = 0x55;\r\nexport const LA_SPRITE_BOMB_STALKER_ENEMY  = 0x56;\r\nexport const LA_SPRITE_PARIODD             = 0x57;\r\nexport const LA_SPRITE_D1_BOSS             = 0x59;\r\nexport const LA_SPRITE_D6_BOSS             = 0x5A;\r\nexport const LA_SPRITE_D3_BOSS             = 0x5B;\r\nexport const LA_SPRITE_D2_BOSS             = 0x5C;\r\nexport const LA_SPRITE_D5_BOSS             = 0x5D;\r\nexport const LA_SPRITE_D5_MINIBOSS         = 0x5E; // Gohma\r\nexport const LA_SPRITE_D5_MINIBOSS2        = 0x5F; // Master Stalfos\r\n\r\nexport const LA_SPRITE_D3_MINIBOSS         = 0x60; // Dodongo\r\nexport const LA_SPRITE_DUNGEONWARP         = 0x61;\r\nexport const LA_SPRITE_D8_BOSS             = 0x62;\r\nexport const LA_SPRITE_D7_BOSS             = 0x63;\r\nexport const LA_SPRITE_D4_BOSS             = 0x65;\r\nexport const LA_SPRITE_CRYSTAL_ORB         = 0x66;\r\nexport const LA_SPRITE_PULL_LEVER          = 0x69;\r\nexport const LA_SPRITE_RAFT                = 0x6A;\r\nexport const LA_SPRITE_CUCCO               = 0x6C;\r\nexport const LA_SPRITE_BOWWOW              = 0x6D;\r\nexport const LA_SPRITE_BUTTERFLY           = 0x6E;\r\nexport const LA_SPRITE_CAT                 = 0x6F;\r\n\r\nexport const LA_SPRITE_NPC_KID1            = 0x70;\r\nexport const LA_SPRITE_NPC_KID2            = 0x71;\r\nexport const LA_SPRITE_NPC_KID3            = 0x72;\r\nexport const LA_SPRITE_NPC_KID4            = 0x73;\r\nexport const LA_SPRITE_MOTHERWITHBABY      = 0x74;\r\nexport const LA_SPRITE_GRANDMA             = 0x75;\r\nexport const LA_SPRITE_CHRISTINEANDWRITE   = 0x76; // duplicate npcs\r\nexport const LA_SPRITE_GRANDPA             = 0x77;\r\nexport const LA_SPRITE_MINI_BOWWOW_NPC     = 0x78;\r\nexport const LA_SPRITE_MADAMMEOWMEOW       = 0x79;\r\nexport const LA_SPRITE_CROW                = 0x7A;\r\nexport const LA_SPRITE_CRAZYTRACY          = 0x7B;\r\nexport const LA_SPRITE_SWAMP_FLOWER_L      = 0x7C;\r\nexport const LA_SPRITE_SWAMP_FLOWER_S      = 0x7E;\r\nexport const LA_SPRITE_TURTLE_ROCK_SNAKE   = 0x7F;\r\n\r\nexport const LA_SPRITE_TELEPHONE           = 0x80;\r\nexport const LA_SPRITE_D1_MINIBOSS         = 0x81; // Rolling bones\r\nexport const LA_SPRITE_D1_MINIBOSS2        = 0x82; // Rolling bones Pillar\r\nexport const LA_SPRITE_DREAMBED            = 0x83;\r\nexport const LA_SPRITE_BIRD                = 0x85;\r\nexport const LA_SPRITE_POWDERONWINGS       = 0x86;\r\nexport const LA_SPRITE_LANMOLA             = 0x87;\r\nexport const LA_SPRITE_ARMOSMINIBOSS       = 0x88;\r\nexport const LA_SPRITE_D2_MINIBOSS         = 0x89; // Hinnox\r\nexport const LA_SPRITE_TOUCHTILES_EVENT1   = 0x8A;\r\nexport const LA_SPRITE_TOUCHTILES_EVENT2   = 0x8B;\r\nexport const LA_SPRITE_D4_MINIBOSS         = 0x8E; // Shellcrab\r\nexport const LA_SPRITE_NPC_MOBLIN          = 0x8F; // duplicate\r\nexport const LA_SPRITE_MASKMIMIC           = 0x8F; // duplicate\r\n\r\nexport const LA_SPRITE_DECKOFCARDS         = 0x90;\r\nexport const LA_SPRITE_ANTIKIRBY           = 0x91;\r\nexport const LA_SPRITE_D6_MINIBOSS         = 0x92; // Smasher\r\nexport const LA_SPRITE_MADBOMBER           = 0x93;\r\nexport const LA_SPRITE_SOLDIERINWALL       = 0x94;                                          // should handle in sprites\r\nexport const LA_SPRITE_RICHARD             = 0x95;\r\nexport const LA_SPRITE_RICHARDFROG         = 0x96;\r\nexport const LA_SPRITE_DIVEINWATER_EVENT   = 0x97;\r\nexport const LA_SPRITE_HORSEHEAD           = 0x98;\r\nexport const LA_SPRITE_WATER_TEKTITE       = 0x99;\r\nexport const LA_SPRITE_RAISINGTILES_EVENT  = 0x9A;\r\nexport const LA_SPRITE_GREENGEL_HIDDEN     = 0x9B;\r\nexport const LA_SPRITE_STAR_ENEMY          = 0x9C;\r\nexport const LA_SPRITE_ELEPHANTSTATUE      = 0x9D;\r\nexport const LA_SPRITE_GOOMBA              = 0x9F;\r\nexport const LA_SPRITE_TORCH_FIREBALLER    = 0x9E;\r\n\r\nexport const LA_SPRITE_PEAHAT              = 0xA0;\r\nexport const LA_SPRITE_ROPE                = 0xA1;\r\nexport const LA_SPRITE_MD_Plant            = 0xA2;\r\nexport const LA_SPRITE_MD_LR_PLATFORM      = 0xA3; // platforms that go left and right\r\nexport const LA_SPRITE_MD_UD_PLATFORM      = 0xA4; // platforms that go up and down\r\nexport const LA_SPRITE_MD_POT_PLATFORM     = 0xA5; // platforms that go down but need pot\r\nexport const LA_SPRITE_MD_WEIGHT           = 0xA6;\r\nexport const LA_SPRITE_D7PILLAR            = 0xA7;\r\nexport const LA_SPRITE_MD_JELLYFISH        = 0xA9;\r\nexport const LA_SPRITE_MD_FISH1            = 0xAA;\r\nexport const LA_SPRITE_MD_FISH2            = 0xAB;\r\nexport const LA_SPRITE_MD_FISH3            = 0xAC;\r\nexport const LA_SPRITE_KIKITHEMONKEY_NPC   = 0xAD;\r\nexport const LA_SPRITE_OCTOROKONWINGS      = 0xAE;\r\nexport const LA_SPRITE_MAGNIFYINGLENS      = 0xAF;\r\n\r\nexport const LA_SPRITE_PINCERFROMPIT       = 0xB0;\r\nexport const LA_SPRITE_EYE_BLOCK           = 0xB1; // D8 Block with an eye\r\nexport const LA_SPRITE_SPIDERSFROMPIT      = 0xB2;\r\nexport const LA_SPRITE_HONEYCOMB           = 0xB3;\r\nexport const LA_SPRITE_TARINWITHBEES       = 0xB4;\r\nexport const LA_SPRITE_BEARCHEF            = 0xB5;\r\nexport const LA_SPRITE_PAPAHL              = 0xB6;\r\nexport const LA_SPRITE_MERMAID             = 0xB7;\r\nexport const LA_SPRITE_FISHERMAN           = 0xB8;\r\nexport const LA_SPRITE_BUZZBLOB            = 0xB9;\r\nexport const LA_SPRITE_FLYINGBOMBDROPPER   = 0xBA;\r\nexport const LA_SPRITE_CRABINROCK          = 0xBB;\r\nexport const LA_SPRITE_D7_MINIBOSS         = 0xBC; // Skeleton guy with keese\r\nexport const LA_SPRITE_VIRE                = 0xBD;\r\nexport const LA_SPRITE_D8_MINIBOSS         = 0xBE; // Blaino\r\nexport const LA_SPRITE_SPAWNZOMBIEEVENT    = 0xBF;\r\n\r\nexport const LA_SPRITE_SIGNMAZEEVENT       = 0xC0;\r\nexport const LA_SPRITE_BEACHMARIN          = 0xC1;\r\nexport const LA_SPRITE_MARINTALTALHEIGHTS  = 0xC2;\r\nexport const LA_SPRITE_MAMU                = 0xC3; // Giant frog, also his little frogs\r\nexport const LA_SPRITE_WALRUS              = 0xC4;\r\nexport const LA_SPRITE_SEAORCHIN           = 0xC5;\r\nexport const LA_SPRITE_CRAB                = 0xC6;\r\nexport const LA_SPRITE_MAMBO               = 0xC7; // Giant fish\r\nexport const LA_SPRITE_MADBATTERWELL       = 0xCA;\r\nexport const LA_SPRITE_ZORA                = 0xCB;\r\nexport const LA_SPRITE_SHARK1              = 0xCC;\r\nexport const LA_SPRITE_MERMAIDSTATUE       = 0xCE;\r\nexport const LA_SPRITE_CROCODILE_NPC       = 0xCD;\r\n\r\nexport const LA_SPRITE_BUNNY_LISTENING_NPC = 0xD0;\r\nexport const LA_SPRITE_BEAR_LISTENING_NPC  = 0xD1;\r\nexport const LA_SPRITE_CROW_LISTENING_NPC  = 0xD2;\r\nexport const LA_SPRITE_BUNNY_NPC           = 0xD3;\r\nexport const LA_SPRITE_MD_POT              = 0xD6;\r\nexport const LA_SPRITE_MD_SmallTwomp       = 0xD7;\r\nexport const LA_SPRITE_MD_BIGFALLBLOCK     = 0xD8;\r\nexport const LA_SPRITE_MD_TWOMP            = 0xD9;\r\nexport const LA_SPRITE_MD_Fireball         = 0xDA;\r\nexport const LA_SPRITE_MD_GiantSpark       = 0xDB;\r\nexport const LA_SPRITE_ROOSTERSTATUE       = 0xDC; // duplicate\r\nexport const LA_SPRITE_ROOSTERSKELETON     = 0xDC; // duplicate\r\nexport const LA_SPRITE_LUIGI               = 0xDC; // duplicate\r\nexport const LA_SPRITE_BOOK                = 0xDD;\r\n\r\nexport const LA_SPRITE_RAT                 = 0xE1;\r\nexport const LA_SPRITE_FLAMETHROWER        = 0xE2;\r\nexport const LA_SPRITE_CACTUS_ENEMY        = 0xE3;\r\nexport const LA_SPRITE_KINGMOBLIN          = 0xE4;\r\nexport const LA_SPRITE_HEARTONWINGS        = 0xE5;\r\nexport const LA_SPRITE_D9_BOSS             = 0xE6;\r\nexport const LA_SPRITE_CASTLEGATE_EVENT    = 0xE7;\r\nexport const LA_SPRITE_COLOR_ORB_RED       = 0xE9;\r\nexport const LA_SPRITE_COLOR_ORB_GREEN     = 0xEA;\r\nexport const LA_SPRITE_COLOR_ORB_GOLD      = 0xEB;\r\nexport const LA_SPRITE_COLOR_SLIME1        = 0xEC;\r\nexport const LA_SPRITE_COLOR_SLIME2        = 0xED;\r\nexport const LA_SPRITE_COLOR_SLIME3        = 0xEE;\r\nexport const LA_SPRITE_COLOR_SPINNER_RED   = 0xEF;\r\n\r\nexport const LA_SPRITE_COLOR_SPINNER_GOLD  = 0xF0;\r\nexport const LA_SPRITE_COLOR_SPINNER_BLUE  = 0xF1;\r\nexport const LA_SPRITE_COLOR_FLYING_BOMBER = 0xF2;\r\nexport const LA_SPRITE_COLOR_HOPPER        = 0xF3;\r\nexport const LA_SPRITE_COLOR_GOLEM         = 0xF4;\r\nexport const LA_SPRITE_SKELETON_NPC_BLUE   = 0xF6;\r\nexport const LA_SPRITE_SKELETON_NPC_RED    = 0xF7;\r\nexport const LA_SPRITE_COLOR_BUZZBLOB_BOSS = 0xF8;\r\nexport const LA_SPRITE_COLOR_BOSS          = 0xF9;\r\nexport const LA_SPRITE_MOUSE               = 0xFA; // duplicate\r\nexport const LA_SPRITE_CAMERABOOK          = 0xFA; // duplicate\r\n\r\n/* Bosses */\r\nexport const LA_BOSS_SPRITES_SET = [\r\n    LA_SPRITE_D1_BOSS,\r\n    LA_SPRITE_D2_BOSS,\r\n    LA_SPRITE_D3_BOSS,\r\n    LA_SPRITE_D4_BOSS,\r\n    LA_SPRITE_D5_BOSS,\r\n    LA_SPRITE_D6_BOSS,\r\n    LA_SPRITE_D7_BOSS,\r\n    LA_SPRITE_D8_BOSS,\r\n    LA_SPRITE_D9_BOSS\r\n];\r\n\r\n/* Minibosses */\r\nexport const LA_MINIBOSS_SPRITES_SET = [\r\n    LA_SPRITE_D1_MINIBOSS,\r\n    LA_SPRITE_D2_MINIBOSS,\r\n    LA_SPRITE_D3_MINIBOSS,\r\n    LA_SPRITE_D4_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS2,\r\n    LA_SPRITE_D6_MINIBOSS,\r\n    LA_SPRITE_D7_MINIBOSS,\r\n    LA_SPRITE_D8_MINIBOSS\r\n];\r\n\r\n/* Enemies that are killable under the 'Kill All' room event */\r\nexport const LA_ENEMIES_KILLABLE_SET = [\r\n    LA_SPRITE_INSTRUMENT,\r\n\r\n    LA_SPRITE_Octorock,\r\n    LA_SPRITE_Moblin,\r\n    LA_SPRITE_Tektite,\r\n    LA_SPRITE_Leever,\r\n    LA_SPRITE_Armos,\r\n\r\n    LA_SPRITE_MOBLIN_SWORD,\r\n    LA_SPRITE_POLSVOICE,\r\n    LA_SPRITE_KEESE,\r\n    LA_SPRITE_STALFOS2,\r\n    LA_SPRITE_REDGEL,\r\n    LA_SPRITE_SMALL_REDGEL,\r\n    LA_SPRITE_STALFOS_RUNAWAY,\r\n    LA_SPRITE_GIBDO,\r\n\r\n    LA_SPRITE_HARDHATBETTLE,\r\n    LA_SPRITE_WIZZROBE,\r\n    LA_SPRITE_LIKELIKE,\r\n    LA_SPRITE_STAFLOS_THROWER,\r\n    LA_SPRITE_ARMMIMIC,\r\n    LA_SPRITE_MINIMOLDORM,\r\n    LA_SPRITE_SPIKEYBETTLE,\r\n\r\n    LA_SPRITE_TRACKINGGHOST,\r\n    LA_SPRITE_BALLANDCHAINTROOPER,\r\n    //LA_SPRITE_VACUUM,\r\n    LA_SPRITE_ANTIVACUUM,\r\n    LA_SPRITE_BOMB_ENEMY,\r\n    LA_SPRITE_BOMB_STALKER_ENEMY,\r\n    LA_SPRITE_PARIODD,\r\n    LA_SPRITE_D1_BOSS,\r\n    LA_SPRITE_D6_BOSS,\r\n    LA_SPRITE_D3_BOSS,\r\n    LA_SPRITE_D2_BOSS,\r\n    LA_SPRITE_D5_BOSS,\r\n    LA_SPRITE_D5_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS2,\r\n\r\n    LA_SPRITE_D3_MINIBOSS,\r\n    LA_SPRITE_D8_BOSS,\r\n    LA_SPRITE_D7_BOSS,\r\n    LA_SPRITE_D4_BOSS,\r\n\r\n    LA_SPRITE_CROW,\r\n    LA_SPRITE_SWAMP_FLOWER_L,\r\n    LA_SPRITE_SWAMP_FLOWER_S,\r\n    LA_SPRITE_TURTLE_ROCK_SNAKE,\r\n\r\n    LA_SPRITE_D1_MINIBOSS,\r\n    LA_SPRITE_D1_MINIBOSS2,\r\n    LA_SPRITE_LANMOLA,\r\n    LA_SPRITE_ARMOSMINIBOSS,\r\n    LA_SPRITE_D2_MINIBOSS,\r\n    LA_SPRITE_D4_MINIBOSS,\r\n\r\n    LA_SPRITE_DECKOFCARDS,\r\n    LA_SPRITE_ANTIKIRBY,\r\n    LA_SPRITE_D6_MINIBOSS,\r\n    LA_SPRITE_MADBOMBER,\r\n    LA_SPRITE_SOLDIERINWALL,\r\n    LA_SPRITE_WATER_TEKTITE,\r\n    //LA_SPRITE_RAISINGTILES_EVENT,\r\n    LA_SPRITE_GREENGEL_HIDDEN,\r\n    LA_SPRITE_STAR_ENEMY,\r\n    LA_SPRITE_GOOMBA,\r\n\r\n    LA_SPRITE_PEAHAT,\r\n    LA_SPRITE_ROPE,\r\n    LA_SPRITE_MD_Plant,\r\n    LA_SPRITE_MD_LR_PLATFORM,\r\n    LA_SPRITE_MD_UD_PLATFORM,\r\n    LA_SPRITE_MD_POT_PLATFORM,\r\n    LA_SPRITE_MD_JELLYFISH,\r\n    LA_SPRITE_MD_FISH1,\r\n    LA_SPRITE_MD_FISH2,\r\n    LA_SPRITE_MD_FISH3,\r\n    LA_SPRITE_OCTOROKONWINGS,\r\n\r\n    LA_SPRITE_PINCERFROMPIT,\r\n    LA_SPRITE_BUZZBLOB,\r\n    LA_SPRITE_FLYINGBOMBDROPPER,\r\n    LA_SPRITE_CRABINROCK,\r\n    LA_SPRITE_D7_MINIBOSS,\r\n    LA_SPRITE_VIRE,\r\n    LA_SPRITE_D8_MINIBOSS,\r\n    LA_SPRITE_MASKMIMIC,\r\n\r\n    LA_SPRITE_SEAORCHIN,\r\n    LA_SPRITE_CRAB,\r\n    LA_SPRITE_ZORA,\r\n    LA_SPRITE_SHARK1,\r\n    LA_SPRITE_CACTUS_ENEMY,\r\n    LA_SPRITE_KINGMOBLIN,\r\n    LA_SPRITE_D9_BOSS,\r\n\r\n    LA_SPRITE_COLOR_ORB_RED,\r\n    LA_SPRITE_COLOR_ORB_GREEN,\r\n    LA_SPRITE_COLOR_ORB_GOLD,\r\n    LA_SPRITE_COLOR_SLIME1,\r\n    LA_SPRITE_COLOR_SLIME2,\r\n    LA_SPRITE_COLOR_SLIME3,\r\n    LA_SPRITE_COLOR_SPINNER_RED,\r\n\r\n    LA_SPRITE_COLOR_SPINNER_GOLD,\r\n    LA_SPRITE_COLOR_SPINNER_BLUE,\r\n    LA_SPRITE_COLOR_FLYING_BOMBER,\r\n    LA_SPRITE_COLOR_HOPPER,\r\n    LA_SPRITE_COLOR_GOLEM,\r\n    LA_SPRITE_COLOR_BUZZBLOB_BOSS,\r\n    LA_SPRITE_COLOR_BOSS\r\n];\r\n\r\nexport const LA_SPRITES_IMPASSABLE_SET = [\r\n    LA_SPRITE_BEAMOS,\r\n    LA_SPRITE_MARIN,\r\n    LA_SPRITE_TARIN,\r\n    LA_SPRITE_WITCH,\r\n    LA_SPRITE_DUNGEONOWLSTATUE,\r\n    LA_SPRITE_SHOP_NPC,\r\n    LA_SPRITE_TRENDY_NPC,\r\n    LA_SPRITE_NPC_FISHINGGAME,\r\n    LA_SPRITE_CRYSTAL_ORB,\r\n    LA_SPRITE_PULL_LEVER,\r\n    // LA_SPRITE_RAFT,      // Need to pass raft, and raft and raft guy are the same spriteID\r\n    LA_SPRITE_NPC_KID1,\r\n    LA_SPRITE_NPC_KID2,\r\n    LA_SPRITE_NPC_KID3,\r\n    LA_SPRITE_NPC_KID4,\r\n    LA_SPRITE_MOTHERWITHBABY,\r\n    LA_SPRITE_GRANDMA,\r\n    LA_SPRITE_CHRISTINEANDWRITE,\r\n    LA_SPRITE_GRANDPA,\r\n    LA_SPRITE_MADAMMEOWMEOW,\r\n    LA_SPRITE_CRAZYTRACY,\r\n    //LA_SPRITE_TELEPHONE,\r\n    LA_SPRITE_DREAMBED,\r\n    LA_SPRITE_FISHERMAN,\r\n    LA_SPRITE_BEARCHEF,\r\n    LA_SPRITE_MAMU,\r\n    LA_SPRITE_MADBATTERWELL,\r\n    LA_SPRITE_MAMBO,\r\n    LA_SPRITE_CROCODILE_NPC,\r\n    LA_SPRITE_COLOR_SPINNER_RED,\r\n    LA_SPRITE_COLOR_SPINNER_GOLD,\r\n    LA_SPRITE_COLOR_SPINNER_BLUE,\r\n    LA_SPRITE_TARINWITHBEES,\r\n];\r\n\r\n//----------------------------------------------------------------------------\r\n//\r\n//                                Submap\r\n//\r\n//----------------------------------------------------------------------------\r\n\r\nexport const LA_SUBMAP_DUNGEON1       = 0x00;\r\nexport const LA_SUBMAP_DUNGEON2       = 0x01;\r\nexport const LA_SUBMAP_DUNGEON3       = 0x02;\r\nexport const LA_SUBMAP_DUNGEON4       = 0x03;\r\nexport const LA_SUBMAP_DUNGEON5       = 0x04;\r\nexport const LA_SUBMAP_DUNGEON6       = 0x05;\r\nexport const LA_SUBMAP_DUNGEON7       = 0x06;\r\nexport const LA_SUBMAP_DUNGEON8       = 0x07;\r\nexport const LA_SUBMAP_EGG            = 0x08;\r\nexport const LA_SUBMAP_BLANK          = 0x09;\r\nexport const LA_SUBMAP_CAVES          = 0x0A;\r\nexport const LA_SUBMAP_COLORDUNGEON   = 0x0B;\r\nexport const LA_SUBMAP_ALTDUNGEON7    = 0x0C;  \r\n\r\nexport const LA_SUBMAP_0D             = 0x0D;  // UW2, no submap, not used\r\nexport const LA_SUBMAP_0E             = 0x0E;  // [Crazy Tracy, Witch House, Shop]\r\nexport const LA_SUBMAP_0F             = 0x0F;  // [Fishing Game, Trendy Game]\r\nexport const LA_SUBMAP_10             = 0x10;  // common - telephone house, more...\r\nexport const LA_SUBMAP_11             = 0x11;  // common, 20 21 cave connections, hookshot log cave, Richard's cave, Signpost cave, more...\r\nexport const LA_SUBMAP_12             = 0x12;  // [Doghouse]\r\nexport const LA_SUBMAP_13             = 0x13;  // [Ocarina House]\r\nexport const LA_SUBMAP_14             = 0x14;  // [Castle 3 caves]\r\nexport const LA_SUBMAP_15             = 0x15;  // [Bowwow Captured Cave]\r\nexport const LA_SUBMAP_16             = 0x16;  // [Dream shrine (face key)]\r\nexport const LA_SUBMAP_17             = 0x17;\r\nexport const LA_SUBMAP_18             = 0x18;\r\nexport const LA_SUBMAP_19             = 0x19;\r\nexport const LA_SUBMAP_1A             = 0x1A;\r\nexport const LA_SUBMAP_1B             = 0x1B;\r\nexport const LA_SUBMAP_1C             = 0x1C;\r\nexport const LA_SUBMAP_1D             = 0x1D;  // [Library]\r\nexport const LA_SUBMAP_1E             = 0x1E;  // [Ghost House]\r\nexport const LA_SUBMAP_1F             = 0x1F;  // common - caves, minidungeon, [NOT HOUSES NOR DUNGEONS]\r\nexport const LA_SUBMAP_FF             = 0xFF;  // Color dungeon\r\n\r\nexport const DUNGEONS_SUBMAP_SET = [\r\n    LA_SUBMAP_DUNGEON1,\r\n    LA_SUBMAP_DUNGEON2,\r\n    LA_SUBMAP_DUNGEON3,\r\n    LA_SUBMAP_DUNGEON4,\r\n    LA_SUBMAP_DUNGEON5,\r\n    LA_SUBMAP_DUNGEON6,\r\n    LA_SUBMAP_DUNGEON7,\r\n    LA_SUBMAP_DUNGEON8,\r\n    LA_SUBMAP_EGG,     \r\n    LA_SUBMAP_COLORDUNGEON,\r\n    LA_SUBMAP_ALTDUNGEON7\r\n];\r\n\r\n/* Room Type */\r\nexport const ROOMTYPE_BLANK   = 0;\r\nexport const ROOMTYPE_DUNGEON = 1;\r\nexport const ROOMTYPE_1WAY    = 2;\r\nexport const ROOMTYPE_2WAYIN  = 3;\r\nexport const ROOMTYPE_2WAYOUT = 4;\r\n\r\n/* Map Category */\r\nexport const Z4_MAPCATEGORY_Overworld = 0;\r\nexport const Z4_MAPCATEGORY_Cave      = 1;\r\nexport const Z4_MAPCATEGORY_Side      = 2;\r\n\r\n/* ViewID */\r\nexport const VIEWID_E0                = 0xE0;\r\nexport const VIEWID_E1                = 0xE1;\r\nexport const VIEWID_E2                = 0xE2;\r\n\r\nexport const Z4_TILESET_NOTLANDABLE = [\r\n    Z4_TILE_SOLID, \r\n    Z4_TILE_PIT, \r\n    Z4_TILE_POT,\r\n    Z4_TILE_FLIPPERS, \r\n    Z4_TILE_PUSHABLEBLOCK,\r\n    Z4_TILE_STRANGEOBJECT, \r\n    Z4_TILE_ICECUBE,\r\n    Z4_TILE_UNLITTORCH, \r\n    Z4_TILE_BOMBABLE,\r\n    Z4_TILE_CHEST, \r\n    Z4_TILE_KEYLOCKED, \r\n    Z4_TILE_SWORDABLE,\r\n    Z4_TILE_SPECIALGRASS\r\n];\r\n\r\n/* Cannot feather onto, cannot push a block onto */\r\nexport const Z4_TILESET_NOTPUSHABLEONTO = [\r\n    Z4_TILE_SOLID, \r\n    Z4_TILE_PIT, \r\n    Z4_TILE_POT,\r\n    Z4_TILE_FLIPPERS, \r\n    Z4_TILE_PUSHABLEBLOCK,\r\n    Z4_TILE_STRANGEOBJECT,\r\n    Z4_TILE_ICECUBE,\r\n    Z4_TILE_UNLITTORCH, \r\n    Z4_TILE_BOMBABLE,\r\n    Z4_TILE_CHEST, \r\n    Z4_TILE_KEYLOCKED\r\n];    \r\n\r\nexport const Z4_TILESET_PITTYPES = [\r\n    Z4_TILE_PIT, \r\n    Z4_TILE_FLIPPERS, \r\n    Z4_TILE_PITTRANSITION\r\n];\r\n\r\nexport const GetChestContentName = (chestID) => {\r\n    switch (chestID) {\r\n        case LA_POWERBRACLET : return 'Power Bracelet';\r\n        case LA_MIRRORSHIELD : return 'Mirror Shield';\r\n        case LA_BOW          : return 'Bow';\r\n        case LA_HOOKSHOT     : return 'Hookshot';\r\n        case LA_FIREROD      : return 'Fire Rod';\r\n        case LA_BOOTS        : return 'Pegasus Boots';\r\n        case LA_OCARINA      : return 'Ocarina';\r\n        case LA_FEATHER      : return 'Rocs Feather';\r\n        case LA_SHOVEL       : return 'Shovel';\r\n        case LA_POWDER       : return 'Magic Powder but looks like Mushroom';\r\n        case LA_BOMB         : return 'Bomb';\r\n        case LA_SWORDv0      : return 'Sword (Your sword) Lv. 0';\r\n        case LA_FLIPPERS     : return 'Flippers';\r\n        case LA_TRADINGITEM  : return 'Magnifying Lens (or next trading item?)';\r\n        case LA_FakeSword1   : return 'Sword (A new sword)';\r\n        case LA_FakeSword2   : return 'Sword (A new sword)';\r\n        case LA_Mecidine     : return 'Medicine';\r\n        case LA_TailKey      : return 'Tail Key';\r\n        case LA_AngularKey   : return 'Angular Key';\r\n        case LA_FaceKey      : return 'Face Key';\r\n        case LA_BirdKey      : return 'Bird Key';\r\n        case LA_GoldenLeaf   : return 'Leaf';\r\n        case LA_Map          : return 'Map';\r\n        case LA_Compass      : return 'Compass';\r\n        case LA_OwlBeak      : return 'Owl Beak';\r\n        case LA_NightmareKey : return 'Nightmare Key';\r\n        case LA_SmallKey     : return 'Small key';\r\n        case LA_50Rupees     : return '50 Rupees';\r\n        case LA_20Rupees     : return '20 Rupees';\r\n        case LA_100Rupees    : return '100 Rupees';\r\n        case LA_200Rupees    : return '200 Rupees';\r\n        case LA_500Rupees    : return '500 Rupees';\r\n        case LA_SeaShell     : return 'Seashell';\r\n        case LA_HookshotNote : return 'Hookshot note';\r\n        case LA_Gel          : return 'Gel';\r\n\r\n        case LA_SONG1        : return 'Song 1';\r\n        case LA_SONG2        : return 'Song 2';\r\n        case LA_SONG3        : return 'Song 3';\r\n        case LA_BOOMERANG    : return 'Song 4';\r\n        default              : return '???';\r\n    }\r\n}","import { getTileTypeStyles, GetUWID, GetRoomID, GetCoordiantesOfRoom } from \"./utilities\";\r\nimport { \r\n    Z4_TILE_CHEST,\r\n    Z4_BOARD_STATE_COMPLETE,\r\n    Z4_BOARD_STATE_VISITED,\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_POWDER,\r\n    LA_BOMB,\r\n    LA_SWORDv0,\r\n    LA_FLIPPERS,\r\n    LA_Mecidine,\r\n    LA_TailKey,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    LA_GoldenLeaf,\r\n    LA_Map,\r\n    LA_Compass,\r\n    LA_OwlBeak,\r\n    LA_NightmareKey,\r\n    LA_SmallKey,\r\n    LA_50Rupees,\r\n    LA_20Rupees,\r\n    LA_100Rupees,\r\n    LA_200Rupees,\r\n    LA_500Rupees,\r\n    LA_SeaShell,\r\n    LA_HookshotNote,\r\n    LA_Gel\r\n} from \"./uConstants\";\r\n\r\n//===================================================================================================\r\n//\r\n//                                          Fill\r\n//\r\n//===================================================================================================\r\n\r\nexport const FillSubmap = (canvas, p, w, h) => {\r\n    const SUBMAP_ROOMS_X = 8;\r\n    const SUBMAP_ROOMS_Y = 8;\r\n    const ROOM_SIZE_X = 10;\r\n    const ROOM_SIZE_Y = 8;\r\n\r\n    let ctx = canvas.getContext(\"2d\");\r\n    for (let x = 0; x < 2; x++) {\r\n        for (let y = 0; y < 2; y++) {\r\n            let color = \"#\" + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0') + '60';\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(\r\n                p + 1 + (x * w * ROOM_SIZE_X * SUBMAP_ROOMS_X), \r\n                p + 1 + (y * h * ROOM_SIZE_Y * SUBMAP_ROOMS_Y), \r\n                (w * ROOM_SIZE_X * SUBMAP_ROOMS_X - 1), \r\n                (h * ROOM_SIZE_Y * SUBMAP_ROOMS_Y - 1)\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillRooms = (canvas, p, w, h, GAMEBOARD_ROOMS_X, GAMEBOARD_ROOMS_Y) => {\r\n    const ROOM_SIZE_X = 10;\r\n    const ROOM_SIZE_Y = 8;\r\n\r\n    let ctx = canvas.getContext(\"2d\");\r\n    for (let x = 0; x < GAMEBOARD_ROOMS_X; x++) {\r\n        for (let y = 0; y < GAMEBOARD_ROOMS_Y; y++) {\r\n            let color = \"#\" + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0') + '60';\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(p + 1 + (x * w * ROOM_SIZE_X), p + 1 + (y * h * ROOM_SIZE_Y), (w * ROOM_SIZE_X - 1), (h * ROOM_SIZE_Y - 1));\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillTiles = (canvas, p, w, h, maxXSquares, maxYSquares) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let x1 = p + 1 + (x * w);\r\n            let y1 = p + 1 + (y * h);\r\n            let x2 = (w - 1);\r\n            let y2 = (h - 1);\r\n            ctx.fillStyle = \"#\" + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0') + '60';\r\n            ctx.fillRect(x1, y1, x2, y2);\r\n        }\r\n    }\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                          Lines\r\n//\r\n//===================================================================================================\r\n\r\nexport const OutlineTiles = (canvas, p, w, h, maxXSquares, maxYSquares) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.translate(0.5, 0.5); \r\n    ctx.beginPath();\r\n\r\n    for (let x = 0; x <= maxXSquares; x++) {\r\n        ctx.moveTo((x * w) + p, p);\r\n        ctx.lineTo((x * w) + p, (maxYSquares * h) + p);\r\n    }\r\n\r\n    for (let y = 0; y <= maxYSquares; y++) {\r\n        ctx.moveTo(p, (y * h) + p);\r\n        ctx.lineTo((maxXSquares * w) + p, (y * h) + p);\r\n    }\r\n\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = \"#CCCCCC\";\r\n    ctx.stroke();\r\n\r\n    ctx.translate(-0.5, -0.5); \r\n    ctx.closePath();\r\n};  \r\n\r\nexport const OutlineRooms = (canvas, p, w, h, GAMEBOARD_ROOMS_X, GAMEBOARD_ROOMS_Y, maxYSquares, maxXSquares) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.translate(0.5, 0.5); \r\n    ctx.beginPath();\r\n\r\n    for (let x = 0; x <= GAMEBOARD_ROOMS_X; x++) {\r\n        let x1 = (x * w * 10) + p;\r\n        let y1 = p;\r\n        let x2 = (x * w * 10) + p;\r\n        let y2 = (maxYSquares * h) + p;\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n    }\r\n\r\n    for (let y = 0; y <= GAMEBOARD_ROOMS_Y; y++) {\r\n        let x1 = p;\r\n        let y1 = (y * h * 8) + p;\r\n        let x2 = (maxXSquares * w) + p;\r\n        let y2 = (y * h * 8) + p;\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n    }\r\n\r\n    ctx.lineWidth = 1;  \r\n    ctx.strokeStyle = \"#000000\";\r\n    ctx.stroke();\r\n\r\n    ctx.translate(-0.5, -0.5); \r\n    ctx.closePath();  \r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                          Fill\r\n//\r\n//===================================================================================================\r\n\r\nexport const FillTile2 = (canvas, x, y, roomX, roomY, color, p, w, h) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n    let x1 = p + 1 + (x * w) + (roomX * w);\r\n    let y1 = p + 1 + (y * h) + (roomY * h);\r\n    let x2 = (w - 1);\r\n    let y2 = (h - 1);\r\n\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(x1, y1, x2, y2);\r\n\r\n    // Example: FillTile2(canvas, 0x02 * 10, 0x0A*8, 5, 5, '#FF0000', p, w, h); // Outside start house\r\n};\r\n\r\nexport const FillTile = (canvas, x, y, color, p, w, h) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(p + 1 + (x * w), p + 1 + (y * h), (w - 1), (h - 1));\r\n};\r\n\r\nexport const FillImage = (canvas, x, y, p, w, h, drawing) => {\r\n    let ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(drawing, p + 1 + (x * w) + (w*4), p + 1 + (y * h) + (h*2));\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                           GameBoard\r\n//\r\n//===================================================================================================\r\n\r\nexport const FillGameBoardFull = (canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, opacityHexStr = 'FF') => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let tileType = tileTypesArr[y][x];\r\n            let color = getTileTypeStyles(tileType).background + opacityHexStr;\r\n            FillTile(canvas, x, y, color, p, w, h);\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardSprites = (canvas, p, w, h, maxXSquares, maxYSquares, spritesArr) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let sprite = spritesArr[y][x];\r\n            if (sprite) {\r\n                FillTile(canvas, x, y, 'purple', p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFilterTileTypes = (canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, filter) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let tileType = tileTypesArr[y][x];\r\n            if (tileType === filter) {\r\n                // let color = 'red';\r\n                // FillTile(canvas, x, y, color, p, w, h);\r\n                let color = getTileTypeStyles(tileType).background;\r\n                FillTile(canvas, x, y, color, p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFilterTileIDs = (canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, tileIDsArr, filter) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            // let tileType = tileTypesArr[y][x];\r\n            let tileID = tileIDsArr[y][x];\r\n            if (tileID === filter) {\r\n                let color = 'red';\r\n                FillTile(canvas, x, y, color, p, w, h);\r\n                // let color = getTileTypeStyles(tileType).background;\r\n                // FillTile(canvas, x, y, color, p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFilterMapCategories = (canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, mapCategoriesArr, filter) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let tileType = tileTypesArr[y][x];\r\n            let xx = Math.trunc(x / 10);\r\n            let yy = Math.trunc(y / 8);\r\n            let mapCategory = mapCategoriesArr[yy][xx];\r\n            if (mapCategory === filter) {\r\n                // let color = 'red';\r\n                // FillTile(canvas, x, y, color, p, w, h);\r\n                let color = getTileTypeStyles(tileType).background;\r\n                FillTile(canvas, x, y, color, p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFilterSprites = (canvas, p, w, h, maxXSquares, maxYSquares, spritesArr, filter) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let sprite = spritesArr[y][x];\r\n            if (sprite === filter) {\r\n                if (sprite) {\r\n                    FillTile(canvas, x, y, 'purple', p, w, h);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardCompletedEvents = (canvas, p, w, h, maxXSquares, maxYSquares, eventsStateArr, filter) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let xx = Math.trunc(x / 10);\r\n            let yy = Math.trunc(y / 8);\r\n            let id = eventsStateArr[yy][xx];\r\n            if (id === filter) {\r\n                FillTile(canvas, x, y, '#FF0000A0', p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardUnopenedChests = (canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, stateArr, uwIDArr, roomIDArr) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let tileType = tileTypesArr[y][x];\r\n            if (tileType === Z4_TILE_CHEST) {\r\n                if (stateArr[y][x] !== Z4_BOARD_STATE_COMPLETE) {\r\n                    let uwID = GetUWID(x, y, uwIDArr);\r\n                    let roomID = GetRoomID(x, y, roomIDArr);\r\n                    let arr = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n                    arr.forEach(o => {\r\n                        FillTile(canvas, o.x, o.y, '#FF0000A0', p, w, h);\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFilterTransitions = (canvas, p, w, h, maxXSquares, maxYSquares, transitionsArr) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let id = transitionsArr[y][x];\r\n            if (id) {\r\n                let color = 'red';\r\n                FillTile(canvas, x, y, color, p, w, h);\r\n                // let color = getTileTypeStyles(tileType).background;\r\n                // FillTile(canvas, x, y, color, p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFilterTransitionsData = (canvas, p, w, h, maxXSquares, maxYSquares, transitionsDataArr) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let id = transitionsDataArr[y][x];\r\n            if (id) {\r\n                let color = 'blue';\r\n                FillTile(canvas, x, y, color, p, w, h);\r\n                // let color = getTileTypeStyles(tileType).background;\r\n                // FillTile(canvas, x, y, color, p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFilterChests = (canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr) => {\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let id = tileTypesArr[y][x];\r\n            if (id === Z4_TILE_CHEST) {\r\n                let color = 'red';\r\n                FillTile(canvas, x, y, color, p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardClearedEventsGLOBAL = (props) => {\r\n    const { canvas, p, w, h, maxXSquares, maxYSquares, eventsStateArr } = props;\r\n\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let xx = Math.trunc(x / 10);\r\n            let yy = Math.trunc(y / 8);\r\n            let id = eventsStateArr[yy][xx];\r\n            if (id === Z4_BOARD_STATE_COMPLETE) {\r\n                FillTile(canvas, x, y, '#FF0000A0', p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardChestsGLOBAL = (props, filter) => {\r\n    const { canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, stateArr, uwIDArr, roomIDArr } = props;\r\n\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let tileType = tileTypesArr[y][x];\r\n            if (tileType === Z4_TILE_CHEST) {\r\n                if (stateArr[y][x] !== filter) {\r\n                    let uwID = GetUWID(x, y, uwIDArr);\r\n                    let roomID = GetRoomID(x, y, roomIDArr);\r\n                    let arr = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n                    arr.forEach(o => {\r\n                        FillTile(canvas, o.x, o.y, '#FF0000A0', p, w, h);\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FillGameBoardFinalPropsGLOBAL = (props) => {\r\n    const { canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, stateArr, gameBoardOpacity } = props;\r\n\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let tileType = tileTypesArr[y][x];\r\n            let color = getTileTypeStyles(tileType).background + gameBoardOpacity;\r\n            if (stateArr[y][x] === Z4_BOARD_STATE_COMPLETE) {\r\n                FillTile(canvas, x, y, '#88ff63', p, w, h);\r\n            }\r\n            else if (stateArr[y][x] === Z4_BOARD_STATE_VISITED) {\r\n                FillTile(canvas, x, y, 'hotpink', p, w, h);\r\n            }\r\n            else {\r\n                FillTile(canvas, x, y, color, p, w, h);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const FileGameBoardChestItems = (canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, chestArr, uwIDArr, roomIDArr, shovelSlotItem, bowSlotItem) => {\r\n\r\n    const GetImageSrc = (chestContent) => {\r\n        switch (chestContent) {\r\n            case LA_POWERBRACLET : return \"img/equip/powerBracelet.png\";\r\n            case LA_MIRRORSHIELD : return \"img/equip/shield.png\";\r\n            case LA_BOW          : return \"img/equip/bow.png\";\r\n            case LA_HOOKSHOT     : return \"img/equip/hookshot.png\";\r\n            case LA_FIREROD      : return \"img/equip/firerod.png\";\r\n            case LA_BOOTS        : return \"img/equip/boots.png\";\r\n            case LA_OCARINA      : return \"img/equip/ocarina.png\";\r\n            case LA_FEATHER      : return \"img/equip/feather.png\";\r\n            case LA_SHOVEL       : return \"img/equip/shovel.png\";\r\n            case LA_POWDER       : return \"img/equip/powder.png\";\r\n            case LA_BOMB         : return \"img/equip/bomb.png\";\r\n            case LA_SWORDv0      : return \"img/equip/sword.png\";\r\n            case LA_FLIPPERS     : return \"img/rightSide/flippers.png\";\r\n            // case LA_TRADINGITEM  : NewItems.tradingItem++;\r\n            // case LA_FakeSword1   : NewItems.unknown++;\r\n            // case LA_FakeSword2   : NewItems.unknown++;\r\n            case LA_Mecidine     : return \"img/rightSide/medicine.png\";\r\n            case LA_TailKey      : return \"img/rightSide/tailKey.png\";\r\n            case LA_AngularKey   : return \"img/rightSide/anglarKey.png\";\r\n            case LA_FaceKey      : return \"img/rightSide/faceKey.png\";\r\n            case LA_BirdKey      : return \"img/rightSide/birdKey.png\";\r\n            case LA_GoldenLeaf   : return \"img/rightSide/slimeKey.png\";\r\n            case LA_Map          : return \"img/dungeon/map.png\";\r\n            case LA_Compass      : return \"img/dungeon/compass.png\";\r\n            case LA_OwlBeak      : return \"img/dungeon/owlBeak.png\";\r\n            case LA_NightmareKey : return \"img/dungeon/nightmareKey.png\";\r\n            case LA_SmallKey     : return \"img/dungeon/smallKey.png\";\r\n            case LA_50Rupees     : return \"img/rupee.png\";\r\n            case LA_20Rupees     : return \"img/rupee.png\";\r\n            case LA_100Rupees    : return \"img/rupee.png\";\r\n            case LA_200Rupees    : return \"img/rupee.png\";\r\n            case LA_500Rupees    : return \"img/rupee.png\";\r\n            case LA_SeaShell     : return \"img/rightSide/seaShell.png\";\r\n            case LA_HookshotNote : return \"img/chestOpen.png\";\r\n            case LA_Gel          : return \"img/gelChest.png\";\r\n            default              : return \"img/chestClosed.png\";\r\n        };\r\n    }\r\n\r\n    for (let x = 0; x < maxXSquares; x++) {\r\n        for (let y = 0; y < maxYSquares; y++) {\r\n            let tileType = tileTypesArr[y][x];\r\n            if (tileType === Z4_TILE_CHEST) {\r\n                let uwID = GetUWID(x, y, uwIDArr);\r\n                let roomID = GetRoomID(x, y, roomIDArr);\r\n                let arr = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n\r\n                let xx = Math.trunc(x / 10);\r\n                let yy = Math.trunc(y / 8);\r\n                let chestContent = chestArr[yy][xx];\r\n                let drawing = new Image();\r\n\r\n                drawing.src = GetImageSrc(chestContent);\r\n\r\n                drawing.onload = function() {\r\n                    FillImage(canvas, arr[0].x, arr[0].y, p, w, h, drawing);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Shop */\r\n    let uwID = 2;\r\n    let roomID = 0xA1;\r\n    let arr = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n\r\n    let drawing = new Image();\r\n    drawing.src = GetImageSrc(shovelSlotItem);\r\n    drawing.onload = function() {\r\n        FillImage(canvas, arr[0].x - 2, arr[0].y, p, w, h, drawing);\r\n    };\r\n\r\n    let drawing2 = new Image();\r\n    drawing2.src = GetImageSrc(bowSlotItem);\r\n    drawing2.onload = function() {\r\n        FillImage(canvas, arr[0].x + 2, arr[0].y, p, w, h, drawing2);\r\n    };\r\n\r\n};","import { FillTile } from \"../other/uDraw\";\r\nimport { \r\n    Z4_BOARD_STATE_COMPLETE,\r\n    Z4_BOARD_STATE_VISITED,\r\n    VIEWID_E0,\r\n    Z4_TILE_TRANS,\r\n    Z4_TILE_SOLID,\r\n    Z4_TILE_POT,\r\n    Z4_TILE_BOMBABLE,\r\n    Z4_TILE_PIT,\r\n    Z4_TILE_FLIPPERS,\r\n    Z4_TILE_CHEST,\r\n    Z4_TILE_STAIRS,\r\n    Z4_TILE_LEDGE,\r\n    Z4_TILE_KEYHOLE,\r\n    Z4_TILE_UPDOWNONLY,\r\n    Z4_TILE_GRASS,\r\n    Z4_TILE_RIVERRAPID,\r\n    Z4_TILE_KEYLOCKED,\r\n    Z4_TILE_DOORCLOSED,\r\n    Z4_TILE_SWORDABLE,\r\n    Z4_TILE_PUSHABLEBLOCK,\r\n    Z4_TILE_HOOKSHOT,\r\n    Z4_TILE_PARTSOLID,\r\n    Z4_TILE_ONEWAYTOP,\r\n    Z4_TILE_STRANGEOBJECT,\r\n    Z4_TILE_ICECUBE,\r\n    Z4_TILE_MDLADDER,\r\n    Z4_TILE_UNLITTORCH,\r\n    Z4_TILE_NIGHTMAREDOOR,\r\n    Z4_TILE_ORBBLOCK1,\r\n    Z4_TILE_ORBBLOCK2,\r\n    Z4_TILE_PITTRANSITION,\r\n    Z4_TILE_SPECIALGRASS,\r\n    Z4_TILE_TOMBSTONE,\r\n    ROOM_SIZE_Y,\r\n    ROOM_SIZE_X,\r\n    LA_ENEMIES_KILLABLE_SET,\r\n    LA_SUBMAP_DUNGEON1,\r\n    LA_SUBMAP_DUNGEON2,\r\n    LA_SUBMAP_DUNGEON3,\r\n    LA_SUBMAP_DUNGEON4,\r\n    LA_SUBMAP_DUNGEON5,\r\n    LA_SUBMAP_DUNGEON6,\r\n    LA_SUBMAP_DUNGEON7,\r\n    LA_SUBMAP_DUNGEON8,\r\n    LA_SUBMAP_EGG,\r\n    LA_SUBMAP_BLANK,\r\n    LA_SUBMAP_CAVES,\r\n    LA_SUBMAP_COLORDUNGEON,\r\n    LA_SUBMAP_ALTDUNGEON7,\r\n    LA_SUBMAP_0D,\r\n    LA_SUBMAP_0E,\r\n    LA_SUBMAP_0F,\r\n    LA_SUBMAP_10,\r\n    LA_SUBMAP_11,\r\n    LA_SUBMAP_12,\r\n    LA_SUBMAP_13,\r\n    LA_SUBMAP_14,\r\n    LA_SUBMAP_15,\r\n    LA_SUBMAP_16,\r\n    LA_SUBMAP_1D,\r\n    LA_SUBMAP_1E,\r\n    LA_SUBMAP_1F,\r\n    LA_SUBMAP_FF,\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_POWDER,\r\n    LA_BOMB,\r\n    LA_SWORDv0,\r\n    LA_FLIPPERS,\r\n    LA_Mecidine,\r\n    LA_TailKey,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    LA_SeaShell,        \r\n} from \"./uConstants\";\r\n\r\n//===================================================================================================\r\n//\r\n//                                          Utilities\r\n//\r\n//===================================================================================================\r\n\r\nexport const clone = data => {\r\n    return JSON.parse(JSON.stringify(data));\r\n};\r\n\r\nexport const createArray = (dim, bounds, defaultVal = \"\", _arr = undefined) => {\r\n    if (typeof _arr === \"undefined\") {\r\n        _arr = [];\r\n    }\r\n\r\n    let len = bounds.slice().reverse()[dim-1];\r\n\r\n    if (dim > 1) {\r\n        for (let i = 0; i < len; i++) {\r\n            _arr[i] = createArray(dim - 1, bounds, defaultVal, _arr[i]);\r\n        }\r\n        return _arr;\r\n    } \r\n    else {\r\n        for (let i = 0; i < len; i++) {\r\n            _arr[i] = clone(defaultVal);\r\n        }\r\n        return _arr;\r\n    }\r\n};\r\n\r\nexport const create1DArray = (length, defaultVal = 0) => {\r\n    return createArray(1, [length], defaultVal);\r\n};\r\n\r\nexport const create2DArray = (rowCount, columnCount, defaultVal = 0) => {\r\n    return createArray(2, [rowCount, columnCount], defaultVal);\r\n};    \r\n\r\nexport const IntToHex = (n, padding = 2) => {\r\n    if (n < 0) {\r\n        return n;\r\n    }\r\n    return Number(n).toString(16).toUpperCase().padStart(padding, '0');\r\n};\r\n\r\nexport const HexToInt = (s) => {\r\n    return parseInt(s, 16);\r\n};\r\n\r\nexport const GetUniqueArrayEntries = (arr) => {\r\n    return [...new Set(arr)]; \r\n};\r\n\r\nexport const LowNibble = (b) => {\r\n    let s = IntToHex(b);\r\n    let result = parseInt(s.charAt(0), 16);\r\n    return result;\r\n};\r\n\r\nexport const HighNibble = (b) => {\r\n    let s = IntToHex(b);\r\n    let result = parseInt(s.charAt(1), 16);\r\n    return result;\r\n};\r\n\r\nexport const Assigned = (v) => {\r\n    return v !== undefined;\r\n};\r\n\r\n//===================================================================================================\r\n//\r\n//                                          Helpers\r\n//\r\n//===================================================================================================\r\n\r\nexport const getTileTypeStyles = (tileType) => {\r\n\r\n    const getDelphiColorToHex = (color) => {\r\n\r\n        if (color !== -1) {\r\n            let hexString = color.toString(16);\r\n            hexString = hexString.padStart(6, 0);\r\n\r\n            let R = hexString.slice(-2);\r\n            let G = hexString.slice(-4, -2);\r\n            let B = hexString.slice(-6, -4);\r\n\r\n            return '#' + (R + G + B);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    let background;\r\n    let color;\r\n\r\n    switch (tileType) {\r\n        case Z4_TILE_TRANS             : background = '#FFFFFF'; break;  // white // transparent\r\n        case Z4_TILE_SOLID             : background = getDelphiColorToHex('00000000'); break; //'black';\r\n        case Z4_TILE_POT               : background = getDelphiColorToHex('00F3973A'); break;\r\n        case Z4_TILE_BOMBABLE          : background = getDelphiColorToHex('00FC6032'); break;\r\n        case Z4_TILE_PIT               : background = getDelphiColorToHex('00808000'); break; //'teal';\r\n        // case Z4_TILE_UNKNOWN           : background = getDelphiColorToHex('0000FF00'); break; //'lime';\r\n        case Z4_TILE_FLIPPERS          : background = getDelphiColorToHex('00D6C049'); break;\r\n        case Z4_TILE_CHEST             : background = '#ffb300'; break; //getDelphiColorToHex('0000FFFF'); break; //'yellow';\r\n        case Z4_TILE_STAIRS            : background = getDelphiColorToHex('00FFFF00'); break; //'aqua';\r\n\r\n        case Z4_TILE_LEDGE             : background = \"#000000\"; break; //background = getDelphiColorToHex('000080FF'); break;\r\n        case Z4_TILE_KEYHOLE           : background = getDelphiColorToHex('00008080'); break; //clWebOlive; //$0050DE89;\r\n        case Z4_TILE_UPDOWNONLY        : background = getDelphiColorToHex('00FFFFFF'); break; //'white';\r\n        // case Z4_TILE_TREE              : background = getDelphiColorToHex('002222B2'); break; //clWebFirebrick;\r\n        // case Z4_TILE_HOUSE             : background = getDelphiColorToHex('00800080'); break; //clPurple;\r\n        // case Z4_TILE_TELEPORTHILL      : background = getDelphiColorToHex('00000000'); break; //'black'; //clWebFirebrick;\r\n        case Z4_TILE_GRASS             : background = getDelphiColorToHex('00008000'); break; //'green';\r\n        case Z4_TILE_RIVERRAPID        : background = getDelphiColorToHex('00D6C049'); break;\r\n\r\n        case Z4_TILE_KEYLOCKED         : background = getDelphiColorToHex('00808080'); break; //clDkGray;\r\n        case Z4_TILE_DOORCLOSED        : background = getDelphiColorToHex('00C0C0C0'); break; //clLtGray;\r\n        // case Z4_TILE_DOORONEWAY        : background = getDelphiColorToHex('0000FFFF'); break;\r\n        case Z4_TILE_SWORDABLE         : background = getDelphiColorToHex('00F3973A'); break;\r\n        case Z4_TILE_PUSHABLEBLOCK     : background = getDelphiColorToHex('00800080'); break; //clPurple;\r\n        case Z4_TILE_HOOKSHOT          : background = '#649056'; break; // getDelphiColorToHex('0050DE89'); break; // hootshotable D5 bridges and minidungeon bowser statues\r\n        case Z4_TILE_PARTSOLID         : background = getDelphiColorToHex('006F7397'); break;\r\n        case Z4_TILE_ONEWAYTOP         : background = getDelphiColorToHex('00808080'); break; //clDkGray;\r\n        case Z4_TILE_STRANGEOBJECT     : background = getDelphiColorToHex('00F3973A'); break;\r\n        case Z4_TILE_ICECUBE           : background = getDelphiColorToHex('00FF8000'); break;\r\n        case Z4_TILE_MDLADDER          : background = getDelphiColorToHex('00A4D1FF'); break;\r\n        case Z4_TILE_UNLITTORCH        : background = getDelphiColorToHex('0020A5DA'); break; //clWebGoldenRod;\r\n        case Z4_TILE_NIGHTMAREDOOR     : background = getDelphiColorToHex('0000D7FF'); break; //clWebGold;\r\n        case Z4_TILE_ORBBLOCK1         : background = getDelphiColorToHex('00008484'); break;\r\n        case Z4_TILE_ORBBLOCK2         : background = getDelphiColorToHex('00005959'); break;\r\n        case Z4_TILE_PITTRANSITION     : background = getDelphiColorToHex('00CECE00'); break;\r\n        case Z4_TILE_SPECIALGRASS      : background = getDelphiColorToHex('00808000'); break; //clTeal;\r\n        case Z4_TILE_TOMBSTONE         : background = getDelphiColorToHex('00000000'); break; //clBlack;\r\n        default                                  : background = getDelphiColorToHex('00FFFFFF'); break; //clWhite;\r\n    }\r\n\r\n    switch (background) {\r\n        case \"#000000\" : color = getDelphiColorToHex('00252525'); break; // Close to black\r\n        case \"#FFFFFF\" : color = getDelphiColorToHex('00D1D1D1'); break; // Close to white\r\n        default        : color = getDelphiColorToHex('00000000');\r\n    }\r\n\r\n    return {\r\n        background: background,\r\n        color: color\r\n    };\r\n};\r\n\r\nexport const TileExists = (x, y, maxXSquares, maxYSquares) => {\r\n    return (x >= 0) && (x < maxXSquares) && (y >= 0) && (y < maxYSquares);\r\n};\r\n\r\nexport const GetUWID = (x, y, uwIDArr) => {\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n\r\n    return uwIDArr[yy][xx];\r\n};\r\n\r\nexport const GetRoomID = (x, y, roomIDArr) => {\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n\r\n    return roomIDArr[yy][xx];\r\n};\r\n\r\nexport const GetRoomInfo = (x, y, uwIDArr, roomIDArr) => {\r\n    return {\r\n        uwID : GetUWID(x, y, uwIDArr),\r\n        roomID : GetRoomID(x, y, roomIDArr),\r\n    }\r\n};\r\n\r\nexport const GetMapCategory = (x, y, mapCategoriesArr) => {\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n    return mapCategoriesArr[yy][xx];\r\n};\r\n\r\nexport const TileInSameRoom = (x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr) => {\r\n    let exists = TileExists(x2, y2, maxXSquares, maxYSquares);\r\n\r\n    if (!exists) {\r\n        return false;\r\n    }\r\n\r\n    let uwID = GetRoomInfo(x, y, uwIDArr, roomIDArr).uwID;\r\n    let roomID = GetRoomInfo(x, y, uwIDArr, roomIDArr).roomID;\r\n\r\n    let uwID_next = GetRoomInfo(x2, y2, uwIDArr, roomIDArr).uwID;\r\n    let roomID_next = GetRoomInfo(x2, y2, uwIDArr, roomIDArr).roomID;\r\n    \r\n    if ((uwID === uwID_next) && (roomID === roomID_next)) {\r\n        return true;\r\n    }\r\n    else {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const GetCoordiantesOfRoom = (uwID, roomID, uwIDArr, roomIDArr) => {\r\n    let arr = [];\r\n\r\n    for (let x = 0; x < 0x20; x++) {\r\n        for (let y = 0; y < 0x20; y++) {\r\n            let uwID_curr = uwIDArr[y][x];\r\n            let roomID_curr = roomIDArr[y][x];\r\n\r\n            if ((uwID_curr === uwID) && (roomID_curr === roomID)) {\r\n                let xx = x * 10;\r\n                let yy = y * 8;\r\n\r\n                for (let y3 = 0; y3 < ROOM_SIZE_Y; y3++) {\r\n                    for (let x3 = 0; x3 < ROOM_SIZE_X; x3++) {\r\n                        arr.push({\r\n                            x : xx + x3,\r\n                            y : yy + y3\r\n                        })\r\n                    }\r\n                }\r\n\r\n                return arr;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Should never get here... */\r\n    console.log(\"How did you not find the coordinates of the uwID and roomID?\");\r\n    return arr;\r\n};\r\n\r\nexport const GetSpriteInfoFromRoom = (uwID, roomID, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr) => {\r\n    let arr = [];\r\n\r\n    let arr2 = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n    arr2.forEach(o => {\r\n        let x = o.x;\r\n        let y = o.y;\r\n        if ((typeof spritesArr[y][x] !== 'undefined') && (spritesArr[y][x] !== null)) {\r\n            arr.push({\r\n                x : x,\r\n                y : y,\r\n                ID : spritesArr[y][x],\r\n                state : spriteStateArr[y][x],\r\n                killable : LA_ENEMIES_KILLABLE_SET.includes(spritesArr[y][x])\r\n            });\r\n        }\r\n    });\r\n    \r\n    return arr;\r\n};\r\n\r\nexport const GetTileTypesFromRoom = (uwID, roomID, maxXSquares, maxYSquares, tileTypesArr, uwIDArr, roomIDArr, stateArr) => {\r\n    let arr = [];\r\n\r\n    let arr2 = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n    arr2.forEach(o => {\r\n        let x = o.x;\r\n        let y = o.y;\r\n        if (tileTypesArr[y][x] !== null) {\r\n            arr.push({\r\n                x : x,\r\n                y : y,\r\n                tileType : tileTypesArr[y][x],\r\n                state : stateArr[y][x]\r\n            });\r\n        }\r\n    });  \r\n    \r\n    return arr;\r\n};\r\n\r\nexport const GetTileIDsFromRoom = (uwID, roomID, maxXSquares, maxYSquares, tileIDsArr, uwIDArr, roomIDArr, stateArr) => {\r\n    let arr = [];\r\n\r\n    let arr2 = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n    arr2.forEach(o => {\r\n        let x = o.x;\r\n        let y = o.y;\r\n        if (tileIDsArr[y][x] !== null) {\r\n            arr.push({\r\n                x : x,\r\n                y : y,\r\n                ID : tileIDsArr[y][x],\r\n                state : stateArr[y][x]\r\n            });\r\n        }\r\n    });\r\n    \r\n    return arr;\r\n};\r\n\r\nexport const AddCompletedSprite = (x, y, spriteStateArr) => {\r\n    spriteStateArr[y][x] = Z4_BOARD_STATE_COMPLETE;\r\n};\r\n\r\nexport const AddCompleted = (x, y, data_props) => {\r\n    const { stateArr, canvas, p, w, h, completed } = data_props;\r\n\r\n    /* No need to check the completed array as this shound be called at the end of all directions */\r\n    FillTile(canvas, x, y, '#88ff63', p, w, h);\r\n    stateArr[y][x] = Z4_BOARD_STATE_COMPLETE;\r\n    completed.push({y: y, x: x});\r\n};\r\n\r\nexport const AddVisited = (x, y, data_props, allowedTileType) => {\r\n    const { stateArr, canvas, p, w, h, visited, revisit, completed, maxXSquares, maxYSquares } = data_props;\r\n\r\n    /* No need to check the visited array as the state checks should ignore adding another 01 */\r\n    let found = visited.find(o => o.x === x && o.y === y);\r\n    let found2 = completed.find(o => o.x === x && o.y === y);\r\n    let found3 = revisit.find(o => o.x === x && o.y === y);\r\n    if (!found && !found2 && !found3) {\r\n        FillTile(canvas, x, y, 'hotpink', p, w, h);\r\n        stateArr[y][x] = Z4_BOARD_STATE_VISITED;\r\n\r\n        if (\r\n            (TileExists(x, y-1, maxXSquares, maxYSquares) && stateArr[y-1][x] === 0) ||\r\n            (TileExists(x+1, y, maxXSquares, maxYSquares) && stateArr[y][x+1] === 0) ||\r\n            (TileExists(x, y+1, maxXSquares, maxYSquares) && stateArr[y+1][x] === 0) ||\r\n            (TileExists(x-1, y, maxXSquares, maxYSquares) && stateArr[y][x-1] === 0)\r\n        ) {\r\n            visited.push({y: y, x: x, hasTransNext : true, allowedTileType: allowedTileType});\r\n        }\r\n        else {\r\n            visited.push({y: y, x: x});\r\n        }\r\n    }\r\n};\r\n\r\nexport const AddRevisit = (x, y, data_props, reason, blockedReason, blockedItems) => {\r\n    const { canvas, p, w, h, revisit } = data_props;\r\n\r\n    let found = revisit.find(o => o.x === x && o.y === y);\r\n    if (!found) {\r\n\r\n        if (!blockedReason) {\r\n            debugger;\r\n        }\r\n        FillTile(canvas, x, y, 'hotpink', p, w, h); //'#c60000'\r\n        revisit.push({y: y, x: x, reason: reason, blockedReason : blockedReason, blockedItems : blockedItems});\r\n    }\r\n};\r\n\r\nexport const AllKillableSpritesInRoomAreDefeated = (uwID, roomID, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr) => {\r\n\r\n    // let arr = GetSpriteInfoFromRoom(uwID_next, roomID_next, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n\r\n    // /* D7 miniboss is unreachable */\r\n    // let arr2 = arr.filter(o => o.ID === LA_SPRITE_D7_MINIBOSS);\r\n    // if (arr2.length > 0) {\r\n    //     if (NewItems.sword || NewItems.fireRod || NewItems.bow || NewItems.boomerang) {\r\n    //         return {\r\n    //             hasBlock : false,\r\n    //             allow : true\r\n    //         };\r\n    //     }\r\n    //     else {\r\n    //         return {\r\n    //             hasBlock : true,\r\n    //             allow : false\r\n    //         };\r\n    //     }\r\n    // }\r\n\r\n    // /* D8 boss is unreachable */\r\n    // let arr3 = arr.filter(o => o.ID === LA_SPRITE_D8_BOSS);\r\n    // if (arr3.length > 0) {\r\n    //     if (NewItems.fireRod) {\r\n    //         return {\r\n    //             hasBlock : false,\r\n    //             allow : true\r\n    //         };\r\n    //     }\r\n    //     else {\r\n    //         return {\r\n    //             hasBlock : true,\r\n    //             allow : false\r\n    //         };\r\n    //     }\r\n    // }\r\n\r\n    let arr1 = GetSpriteInfoFromRoom(uwID, roomID, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n    let arr2 = arr1.filter(o => o.killable);\r\n    let arr3 = arr2.filter(o => o.state === 0);\r\n\r\n    return (arr3.length === 0);\r\n};\r\n\r\nexport const GetUWIDFromSubmapID = (viewID, subMapID) => {\r\n    let result;\r\n\r\n    if (viewID === VIEWID_E0) {\r\n        return 0;\r\n    };\r\n\r\n    switch (subMapID) {\r\n        case LA_SUBMAP_DUNGEON1:\r\n        case LA_SUBMAP_DUNGEON2:\r\n        case LA_SUBMAP_DUNGEON3:\r\n        case LA_SUBMAP_DUNGEON4:\r\n        case LA_SUBMAP_DUNGEON5:\r\n        case LA_SUBMAP_DUNGEON6 :       result = 1; break;\r\n        case LA_SUBMAP_DUNGEON7:\r\n        case LA_SUBMAP_DUNGEON8:\r\n        case LA_SUBMAP_EGG:\r\n        case LA_SUBMAP_BLANK:\r\n        case LA_SUBMAP_CAVES :          result = 2; break;\r\n        case LA_SUBMAP_COLORDUNGEON :   result = 3; break;\r\n        case LA_SUBMAP_ALTDUNGEON7 :    result = 2; break;\r\n        case LA_SUBMAP_0D:\r\n        case LA_SUBMAP_0E:\r\n        case LA_SUBMAP_0F:\r\n        case LA_SUBMAP_10:\r\n        case LA_SUBMAP_11:\r\n        case LA_SUBMAP_12:\r\n        case LA_SUBMAP_13:\r\n        case LA_SUBMAP_14:\r\n        case LA_SUBMAP_15:\r\n        case LA_SUBMAP_16:              result = 2; break;\r\n        case LA_SUBMAP_1D:\r\n        case LA_SUBMAP_1E:\r\n        case LA_SUBMAP_1F:              result = 1; break;\r\n        case LA_SUBMAP_FF:              result = 3; break;\r\n        default:                        \r\n            result = 255;\r\n            console.error('[ERROR] GetUWIDFromSubmapID - Invalid subMapID given: ' + IntToHex(subMapID, 2));\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport const RandomRange = (min, max) => {\r\n    min = Math.ceil(min); \r\n    max = Math.floor(max); \r\n    let num = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    // console.log(num);\r\n    return num; \r\n};\r\n\r\nexport const DoesPlayerHaveItem = (NewItems, chestContent) => {\r\n    switch (chestContent) {\r\n        case LA_POWERBRACLET          : return NewItems.powerBracelet;\r\n        case LA_MIRRORSHIELD          : return NewItems.shield;\r\n        case LA_BOW                   : return NewItems.bow;\r\n        case LA_HOOKSHOT              : return NewItems.hookshot;\r\n        case LA_FIREROD               : return NewItems.fireRod;\r\n        case LA_BOOTS                 : return NewItems.boots;\r\n        case LA_OCARINA               : return NewItems.ocarina;\r\n        case LA_FEATHER               : return NewItems.feather;\r\n        case LA_SHOVEL                : return NewItems.shovel;\r\n        case LA_POWDER                : return NewItems.powder;\r\n        case LA_BOMB                  : return NewItems.bomb;\r\n        case LA_SWORDv0               : return NewItems.sword;\r\n        case LA_FLIPPERS              : return NewItems.flippers;\r\n        // case LA_TRADINGITEM           : return NewItems.shield;\r\n        // case LA_FakeSword1            : return NewItems.shield;\r\n        // case LA_FakeSword2            : return NewItems.shield;\r\n        case LA_Mecidine              : return NewItems.medicine;\r\n        case LA_TailKey               : return NewItems.tailKey;\r\n        case LA_AngularKey            : return NewItems.anglarKey;\r\n        case LA_FaceKey               : return NewItems.faceKey;\r\n        case LA_BirdKey               : return NewItems.birdKey;\r\n        // case LA_GoldenLeaf            : return NewItems.slimeKey;\r\n        // case LA_Map                   : return NewItems.map;\r\n        // case LA_Compass               : return NewItems.compass;\r\n        // case LA_OwlBeak               : return NewItems.owlBeak;\r\n        // case LA_NightmareKey          : return NewItems.nKey;\r\n        // case LA_SmallKey              : return NewItems.sKey;\r\n        // case LA_50Rupees              : return NewItems.rupees;\r\n        // case LA_20Rupees              : return NewItems.rupees;\r\n        // case LA_100Rupees             : return NewItems.rupees;\r\n        // case LA_200Rupees             : return NewItems.rupees;\r\n        // case LA_500Rupees             : return NewItems.rupees;\r\n        case LA_SeaShell              : return NewItems.seashell;\r\n        // case LA_HookshotNote          : return NewItems.hookshotNote;\r\n        // case LA_Gel                   : return NewItems.gel;\r\n        default                       : return false;\r\n    }\r\n};","import { IntToHex } from \"../other/utilities\";\r\n\r\nwindow.CanvasEventsAreSet = false;\r\n\r\nexport const InitCanvasEvents = (canvas, tileTypesArr, tileIDsArr, stateArr, chestArr, spritesArr, uwIDArr, roomIDArr, w, h) => {\r\n\r\n    function onClick(event) {\r\n        // function getElementPosition(obj) {\r\n        //     var curleft = 0, curtop = 0;\r\n        //     if (obj.offsetParent) {\r\n        //         do {\r\n        //             curleft += obj.offsetLeft;\r\n        //             curtop += obj.offsetTop;\r\n        //         } while (obj = obj.offsetParent);\r\n        //         return { x: curleft, y: curtop };\r\n        //     }\r\n        //     return undefined;\r\n        // }\r\n    \r\n        // function getEventLocation(element,event){\r\n        //     // Relies on the getElementPosition function.\r\n        //     var pos = getElementPosition(element);\r\n            \r\n        //     return {\r\n        //         x: (event.pageX - pos.x),\r\n        //         y: (event.pageY - pos.y)\r\n        //     };\r\n        // }\r\n\r\n        function getMousePos(canvas, evt) {\r\n            var rect = canvas.getBoundingClientRect();\r\n            return {\r\n                x: evt.clientX - rect.left,\r\n                y: evt.clientY - rect.top\r\n            };\r\n        }\r\n        let eventLocation = getMousePos(canvas, event);\r\n    \r\n        // Get the coordinates of the click\r\n        // var eventLocation = getEventLocation(this, event);\r\n\r\n        // Get the data of the pixel according to the location generate by the getEventLocation function\r\n        // var context = this.getContext('2d');\r\n        // var pixelData = context.getImageData(eventLocation.x, eventLocation.y, 1, 1).data; \r\n    \r\n        // If transparency on the pixel , array = [0,0,0,0]\r\n        // if((pixelData[0] == 0) && (pixelData[1] == 0) && (pixelData[2] == 0) && (pixelData[3] == 0)){\r\n            // Do something if the pixel is transparent\r\n        // }\r\n    \r\n        let squareX = Math.trunc(eventLocation.x / w);\r\n        let squareY = Math.trunc(eventLocation.y / h);\r\n        let x = Math.trunc(squareX / 10);\r\n        let y = Math.trunc(squareY / 8);\r\n    \r\n        try {\r\n            document.getElementById(\"details_clicked1\").innerHTML = `\r\n                x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: ${squareX} <br />\r\n                y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: ${squareY} <br />\r\n                type&nbsp;&nbsp;:                ${tileTypesArr[squareY][squareX]} <br />\r\n                id&nbsp;&nbsp;&nbsp;&nbsp;:      ${IntToHex(tileIDsArr[squareY][squareX])} <br /> \r\n                state&nbsp;:                     ${stateArr[squareY][squareX]} <br /> \r\n                chest&nbsp;:                     ${IntToHex(chestArr[y][x])} <br /> \r\n                sprite:                          ${IntToHex(spritesArr[squareY][squareX])} <br /> \r\n                uwID&nbsp;&nbsp;:                ${IntToHex(uwIDArr[y][x])} <br /> \r\n                roomID:                          ${IntToHex(roomIDArr[y][x])} <br /> \r\n            `;\r\n        }\r\n        catch {\r\n\r\n        }\r\n    \r\n        // console.log(pixelData);\r\n    \r\n        // Convert it to HEX if you want using the rgbToHex method.\r\n        // var hex = \"#\" + (\"000000\" + rgbToHex(pixelData[0], pixelData[1], pixelData[2])).slice(-6);\r\n    };\r\n    \r\n    function onMouseMove(event) {\r\n        // function getElementPosition(obj) {\r\n        //     var curleft = 0, curtop = 0;\r\n        //     if (obj.offsetParent) {\r\n        //         do {\r\n        //             curleft += obj.offsetLeft;\r\n        //             curtop += obj.offsetTop;\r\n        //         } while (obj = obj.offsetParent);\r\n        //         return { x: curleft, y: curtop };\r\n        //     }\r\n        //     return undefined;\r\n        // }\r\n    \r\n        // function getEventLocation(element,event){\r\n        //     // Relies on the getElementPosition function.\r\n        //     var pos = getElementPosition(element);\r\n            \r\n        //     return {\r\n        //         x: (event.pageX - pos.x),\r\n        //         y: (event.pageY - pos.y)\r\n        //     };\r\n        // }\r\n        \r\n        function getMousePos(canvas, evt) {\r\n            var rect = canvas.getBoundingClientRect();\r\n            return {\r\n                x: evt.clientX - rect.left,\r\n                y: evt.clientY - rect.top\r\n            };\r\n        }\r\n        let eventLocation = getMousePos(canvas, event);\r\n    \r\n        // Get the coordinates of the click\r\n        // var eventLocation = getEventLocation(this, event);\r\n\r\n        // Get the data of the pixel according to the location generate by the getEventLocation function\r\n        // var context = this.getContext('2d');\r\n        // var pixelData = context.getImageData(eventLocation.x, eventLocation.y, 1, 1).data; \r\n    \r\n        // If transparency on the pixel , array = [0,0,0,0]\r\n        // if((pixelData[0] == 0) && (pixelData[1] == 0) && (pixelData[2] == 0) && (pixelData[3] == 0)){\r\n            // Do something if the pixel is transparent\r\n        // }\r\n    \r\n        let squareX = Math.trunc(eventLocation.x / w);\r\n        let squareY = Math.trunc(eventLocation.y / h);\r\n        let x = Math.trunc(squareX / 10);\r\n        let y = Math.trunc(squareY / 8);\r\n    \r\n        try {\r\n            document.getElementById(\"details_hovered1\").innerHTML = `\r\n                x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: ${squareX} <br />\r\n                y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: ${squareY} <br />\r\n                type&nbsp;&nbsp;:                ${tileTypesArr[squareY][squareX]} <br />\r\n                id&nbsp;&nbsp;&nbsp;&nbsp;:      ${IntToHex(tileIDsArr[squareY][squareX])} <br /> \r\n                state&nbsp;:                     ${stateArr[squareY][squareX]} <br /> \r\n                chest&nbsp;:                     ${IntToHex(chestArr[Math.trunc(squareY / 8)][Math.trunc(squareX / 10)])} <br /> \r\n                sprite:                          ${IntToHex(spritesArr[squareY][squareX])} <br /> \r\n                uwID&nbsp;&nbsp;:                ${IntToHex(uwIDArr[y][x])} <br /> \r\n                roomID:                          ${IntToHex(roomIDArr[y][x])} <br /> \r\n            `;\r\n        }\r\n        catch {\r\n\r\n        }\r\n    };\r\n    \r\n    function onRightClick(event) {\r\n        event.preventDefault();\r\n        \r\n        function getMousePos(canvas, evt) {\r\n            var rect = canvas.getBoundingClientRect();\r\n            return {\r\n                x: evt.clientX - rect.left,\r\n                y: evt.clientY - rect.top\r\n            };\r\n        }\r\n        let eventLocation = getMousePos(canvas, event);\r\n        \r\n        let squareX = Math.trunc(eventLocation.x / w);\r\n        let squareY = Math.trunc(eventLocation.y / h);\r\n        // let x = Math.trunc(squareX / 10);\r\n        // let y = Math.trunc(squareY / 8);\r\n        \r\n        document.getElementById(\"DebugStartX\").value = squareX;\r\n        document.getElementById(\"DebugStartY\").value = squareY;\r\n        return false;\r\n    };\r\n\r\n    /* Prevent assigning multiple events to the same canvas */\r\n    if (!window.CanvasEventsAreSet) {\r\n        canvas.addEventListener(\"click\", onClick, false);\r\n        canvas.addEventListener(\"mousemove\", onMouseMove, false);\r\n        canvas.addEventListener('contextmenu', onRightClick, false);\r\n    }\r\n\r\n    window.CanvasEventsAreSet = true;\r\n};","import { AddVisited } from \"../other/utilities\";\r\n\r\nexport const StartTiles = (data_props) => {\r\n\r\n    // const { tileIDsArr, uwIDArr } = data_props;\r\n\r\n    /* Start Tile */\r\n    AddVisited(204, 10, data_props);     // Start house\r\n\r\n    // AddVisited(25, 85, data_props);     // Outside start house\r\n    // AddVisited(35, 191, data_props);    // Dungeon 1\r\n    // AddVisited(104, 191, data_props);   // Dungeon 2\r\n    // AddVisited(14, 255, data_props);    // Dungeon 3\r\n    // AddVisited(114, 255, data_props);   // Dungeon 4\r\n    // AddVisited(234, 191, data_props);   // Dungeon 5\r\n    // AddVisited(274, 191, data_props);   // Dungeon 6\r\n    // AddVisited(174, 255, data_props);   // Dungeon 7\r\n    // AddVisited(274, 255, data_props);   // Dungeon 8\r\n    // AddVisited(184, 125, data_props);   // Dungeon Color\r\n\r\n    /* Most transitions */\r\n    // for (let y = 0; y < tileIDsArr.length; y++) {\r\n    //     for (let x = 0; x < tileIDsArr[y].length; x++) {\r\n    //         if ([0xE1, 0xE2, 0xE3, 0xC6, 0xBA].includes(tileIDsArr[y][x])) {\r\n    //             if (GetUWID(x, y, uwIDArr) === 0) {\r\n    //                 AddVisited(x, y, data_props);\r\n    //             }\r\n    //         }\r\n    //         if ([0xFD, 0xFC, 0xCB, 0xA2, 0xA3, 0xBE, 0xA8, 0xBF].includes(tileIDsArr[y][x])) {\r\n    //             if (GetUWID(x, y, uwIDArr) !== 0) {\r\n    //                 AddVisited(x, y, data_props);\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    /*****************************************   Minidungeons   *************************************************/\r\n\r\n    // AddVisited(67, 128, data_props);        // D1\r\n    // AddVisited(52, 128, data_props);        // D1\r\n    // AddVisited(67, 136, data_props);        // D1\r\n    // AddVisited(54, 136, data_props);        // D1\r\n\r\n    // AddVisited(111, 167, data_props);       // D2\r\n    // AddVisited(128, 168, data_props);       // D2 \r\n    // AddVisited(128, 152, data_props);       // D2 \r\n    // AddVisited(111, 152, data_props);       // D2 \r\n\r\n    // AddVisited(51, 192, data_props);        // D3 \r\n    // AddVisited(68, 199, data_props);        // D3 \r\n\r\n    // AddVisited(81, 217, data_props);        // D4\r\n    // AddVisited(84, 224, data_props);        // D4\r\n    // AddVisited(98, 232, data_props);        // D4\r\n    // AddVisited(89, 234, data_props);        // D4\r\n    // AddVisited(98, 240, data_props);        // D4\r\n    // AddVisited(81, 241, data_props);        // D4\r\n    // AddVisited(98, 248, data_props);        // D4\r\n    // AddVisited(81, 248, data_props);        // D4\r\n\r\n    // AddVisited(173, 160, data_props);       // D5\r\n    // AddVisited(161, 160, data_props);       // D5\r\n    // AddVisited(161, 168, data_props);       // D5\r\n    // AddVisited(178, 168, data_props);       // D5\r\n    // AddVisited(161, 176, data_props);       // D5\r\n    // AddVisited(178, 176, data_props);       // D5\r\n    // AddVisited(161, 185, data_props);       // D5\r\n    // AddVisited(178, 184, data_props);       // D5\r\n\r\n    // AddVisited(241, 128, data_props);       // D6\r\n    // AddVisited(258, 128, data_props);       // D6\r\n    // AddVisited(261, 128, data_props);       // D6\r\n    // AddVisited(278, 128, data_props);       // D6\r\n    // AddVisited(281, 128, data_props);       // D6\r\n    // AddVisited(298, 128, data_props);       // D6\r\n\r\n    // AddVisited(234, 204, data_props);       // D7\r\n    // AddVisited(235, 199, data_props);       // D7\r\n\r\n    // AddVisited(241, 199, data_props);       // D8\r\n    // AddVisited(258, 199, data_props);       // D8\r\n    // AddVisited(301, 199, data_props);       // D8\r\n    // AddVisited(318, 199, data_props);       // D8\r\n    // AddVisited(251, 200, data_props);       // D8\r\n    // AddVisited(268, 200, data_props);       // D8\r\n    // AddVisited(291, 207, data_props);       // D8\r\n    // AddVisited(308, 207, data_props);       // D8\r\n    // AddVisited(251, 248, data_props);       // D8\r\n    // AddVisited(268, 249, data_props);       // D8\r\n    // AddVisited(291, 249, data_props);       // D8\r\n    // AddVisited(308, 248, data_props);       // D8\r\n\r\n    // AddVisited(271, 114, data_props);       // Castle\r\n    // AddVisited(258, 128, data_props);       // Castle\r\n\r\n    // AddVisited(199, 57, data_props);        // Fishing game\r\n    // AddVisited(201, 56, data_props);        // Under D5\r\n    // AddVisited(215, 56, data_props);        // Under D5\r\n\r\n    // AddVisited(229, 60, data_props);        // Fisherman under bridge\r\n\r\n    // AddVisited(210, 30, data_props);        // Seashell mansion\r\n\r\n    // AddVisited(300, 2, data_props);         // Manbo\r\n\r\n    /*****************************************   Other   *************************************************/\r\n\r\n    // AddVisited(296, 63, data_props);         // Cave bomb arrows \r\n\r\n    // AddVisited(12, 188, data_props);         // D1 compass room\r\n\r\n    // AddVisited(236, 244, data_props);         // D7 miniboss fight\r\n    // AddVisited(258, 209, data_props);         // D8 Room with closed door without a way to open it\r\n    \r\n\r\n    // AddVisited(222, 252, data_props);   // Dungeon 7 Odd area\r\n    // AddVisited(308, 162, data_props);   // D6 Hookshot over water\r\n    // AddVisited(189, 214, data_props);   // D7 pillar 2...hookshot weirdness\r\n    // AddVisited(226, 149, data_props);   // D5 Diagonal jump\r\n    // AddVisited(222, 150, data_props);   // D5 Diagonal jump\r\n    // AddVisited(3, 100, data_props);     // Custom pit\r\n    // AddVisited(14, 101, data_props);    // Custom pit\r\n    // AddVisited(25, 100, data_props);    // Custom pit\r\n    // AddVisited(35, 100, data_props);    // Custom pit\r\n    // AddVisited(137, 227, data_props);   // D4 pit\r\n    // AddVisited(135, 229, data_props);   // D4 pit\r\n    // AddVisited(36, 110, data_props);    // D1 Key Hole\r\n    // AddVisited(49, 110, data_props);    // Sign post hookshot\r\n    // AddVisited(105, 123, data_props);   // Hookshot to mermaid statue\r\n    // AddVisited(31, 86, data_props);     // right of start\r\n    // AddVisited(4, 166, data_props);     // D1 Feather chest\r\n    // AddVisited(97, 2, data_props);      // Hookshot across pits Tal tal height \r\n    // AddVisited(253, 188, data_props);      // Orb blocked in D6?\r\n    // AddVisited(242, 206, data_props);      // D8 eye block\r\n    // AddVisited(283, 238, data_props);      // D8 eye block1\r\n\r\n    /* Test ledges */\r\n    // AddVisited(142, 21, data_props);    // test jumping right an overworld ledge\r\n    // AddVisited(147, 22, data_props);    // test jumping left an overworld ledge\r\n    // AddVisited(15, 110, data_props);    // test jumping down an overworld ledge\r\n    // AddVisited(311, 205, data_props);   // D8 test jumping ledge going down\r\n    // AddVisited(161, 230, data_props);   // D7 test jumping ledge going right\r\n    // AddVisited(198, 230, data_props);   // D7 test jumping ledge going right\r\n    // AddVisited(185, 225, data_props);   // D7 test jumping ledge going down\r\n    // AddVisited(186, 254, data_props);   // D7 test jumping ledge going up\r\n    // AddVisited(122, 31, data_props);    // Overworld waterfall down river rapid\r\n    // AddVisited(123, 13, data_props);    // Overworld waterfall down // doesn't currently work\r\n\r\n\r\n    // AddVisited(224, 210, data_props);   // D7 Before instrument closed door\r\n    // AddVisited(95, 107, data_props);    // D5 outside \r\n    // AddVisited(253, 157, data_props);    // D6 gel closed door room \r\n\r\n    \r\n    // AddVisited(253, 157, data_props);    // D6 gel closed door room \r\n    // AddVisited(111, 220, data_props);    // D4 after flippers\r\n    // AddVisited(99, 12, data_props);    // Above D5 overwold\r\n    // AddVisited(266, 116, data_props);     // Path to D4 from land\r\n    // AddVisited(88, 2, data_props);     // Hookshot to marin\r\n    // AddVisited(47, 90, data_props);     // Jump to sign post maze\r\n    // AddVisited(308, 117, data_props);     // Flame skip cave\r\n    // AddVisited(221, 242, data_props);     // D7 staircase to boss\r\n    // AddVisited(227, 253, data_props);   // Dungeon 7 top\r\n    // AddVisited(197, 214, data_props);   // Dungeon 7 pit transition to small key chest\r\n    // AddVisited(211, 233, data_props);   // Dungeon 7 above nightmare key hookshot\r\n    // AddVisited(267, 54, data_props);   // Bird key cave pits\r\n    // AddVisited(89, 62, data_props);   // Rooster seashell\r\n    // AddVisited(24, 153, data_props);   // D1 pushblock\r\n    // AddVisited(65, 156, data_props);   // D1 boss\r\n    // AddVisited(217, 93, data_props);   // Color dungeon 3 pushblocks\r\n};","// import { GetUniqueArrayEntries } from \"../other/utilities\";\r\n// import { Z4_TILE_CHEST } from './../other/uConstants';\r\n\r\nexport const Finish = (props, message) => {\r\n    const { visited, revisit, NewItems/*, tileTypesArr*/ } = props;\r\n\r\n    console.log(message);\r\n\r\n    let reasons = [];\r\n    visited.forEach(o => reasons.push(o.reason));\r\n\r\n    let reasons2 = [];\r\n    revisit.forEach(o => reasons2.push(o.reason));\r\n\r\n    // let allReasons = GetUniqueArrayEntries([...reasons, ...reasons2]);\r\n\r\n    console.log(NewItems);\r\n\r\n    // if (allReasons.length > 0) {\r\n    //     console.log(allReasons);\r\n    //     console.log(revisit);\r\n    // }\r\n\r\n    let blockedReasons = [];\r\n    revisit.forEach(o => blockedReasons.push(o.blockedReason));\r\n    // let uniqueBlockedReasons = GetUniqueArrayEntries([...blockedReasons]);\r\n    // console.log(uniqueBlockedReasons);\r\n\r\n\r\n    // /* How many chests could we not open? */\r\n    // let availableChests = [];\r\n    // revisit.forEach(o => { if (tileTypesArr[o.y][o.x] === Z4_TILE_CHEST) availableChests.push(o); });\r\n    // console.log(availableChests);\r\n\r\n    window.GLOBAL_PROPS = props;\r\n};","import { AddVisited } from \"../../other/utilities\";\r\nimport { \r\n    Z4_TILE_CHEST,\r\n    Z4_TILE_UNLITTORCH,\r\n    Z4_TILE_KEYHOLE,\r\n    Z4_TILE_PIT,\r\n    Z4_TILE_SPECIALGRASS,\r\n    Z4_TILE_SOLID,\r\n    Z4_TILE_PITTRANSITION,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    LA_POWDER,\r\n} from \"../../other/uConstants\";\r\n\r\nexport const AllowMovement = (props) => {\r\n    let { x, y, x2, y2, d, tileTypesArr, tileIDsArr, uwID_curr, roomID_curr, uwID_next, roomID_next, allowedTileType, roomX_curr, roomY_curr, NewItems } = props;\r\n\r\n    let tileID = tileIDsArr[y][x];\r\n    let tileType = tileTypesArr[y][x];\r\n    let tileID_next = tileIDsArr[y2][x2];\r\n\r\n    let allow = true;\r\n    let hasBlock = false;\r\n    let blockedReason;\r\n    let blockedItems = [];\r\n\r\n    //===========================================================\r\n    //\r\n    //                     Room Restriction\r\n    //\r\n    //===========================================================  \r\n\r\n    /* D7 top room with nightmare door */\r\n    if ((uwID_curr === 2) && (roomID_curr === 0x2D)) {\r\n        if (NewItems.flags.D7Pillar < 4) {\r\n            return {\r\n                handled : true,\r\n                hasBlock : true,\r\n                blockedReason : \"D7Pillar\",\r\n                allow : false,\r\n            };\r\n        }\r\n    }\r\n\r\n    /* D7 top room above nightmare door */\r\n    if ((uwID_curr === 2) && (roomID_curr === 0x2B)) {\r\n        if (!NewItems.dungeonItems[6].nKey) {\r\n            return {\r\n                handled : true,\r\n                hasBlock : true,\r\n                blockedReason : \"D7 Nightmare Key\",\r\n                allow : false,\r\n            };\r\n        }\r\n    }\r\n\r\n    //===========================================================\r\n    //\r\n    //                          OoB\r\n    //\r\n    //===========================================================  \r\n\r\n    /* Custom does not exist */\r\n    if (tileType === 0xFF) {\r\n        allow = false;\r\n    }  \r\n    \r\n    /* Underworld 1 and 2 don't have room 0x00 in bounds */\r\n    else if ((uwID_next !== 0) && (uwID_next !== 3) && (roomID_next === 0x00)) {\r\n        allow = false;\r\n    }\r\n\r\n    //===========================================================\r\n    //\r\n    //                        Special\r\n    //\r\n    //===========================================================  \r\n\r\n    /* Dungeon entrance */\r\n    else if ((tileID === 0xFC) && (roomY_curr === 7) && (d === 3)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Transition entrance */\r\n    else if ((uwID_next !== 0) && (0xFD === tileID) && (d === 3)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Deep water heart cave */\r\n    else if ((uwID_curr === 1) && (roomID_curr === 0xF2) && ((uwID_next !== uwID_curr) || (roomID_next !== roomID_curr))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Egg path */\r\n    else if ((uwID_next === 2) && (roomID_next === 0x71) && ((d === 2) || (d === 4))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Below castle minidungeon ceiling left right */\r\n    else if ((uwID_curr === 1) && (roomID_curr === 0xEC) && ((roomX_curr === 6) && (roomY_curr === 2)) && (d === 1)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Below castle minidungeon ceiling left right */\r\n    else if ((uwID_curr === 1) && (roomID_curr === 0xEB) && ((roomX_curr === 1) && (roomY_curr === 2)) && (d === 1)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Above D4 waterfall */\r\n    else if (\r\n        ((uwID_curr === 0) && (roomID_curr === 0x1B) && ((roomX_curr === 1) && (roomY_curr === 5))) ||\r\n        ((uwID_curr === 0) && (roomID_curr === 0x1B) && ((roomX_curr === 2) && (roomY_curr === 5))) ||\r\n        ((uwID_curr === 0) && (roomID_curr === 0x1B) && ((roomX_curr === 3) && (roomY_curr === 5))) ||\r\n        ((uwID_curr === 0) && (roomID_curr === 0x1B) && ((roomX_curr === 4) && (roomY_curr === 5))) ||\r\n        ((uwID_curr === 0) && (roomID_curr === 0x1B) && ((roomX_curr === 5) && (roomY_curr === 5))) ||\r\n        ((uwID_curr === 0) && (roomID_curr === 0x1B) && ((roomX_curr === 6) && (roomY_curr === 5))) ||\r\n        ((uwID_curr === 0) && (roomID_curr === 0x1B) && ((roomX_curr === 7) && (roomY_curr === 5)))\r\n     ) {\r\n        if (NewItems.flags.anglarKeyUsed) {\r\n            allow = true;\r\n        }\r\n        else if (NewItems.flippers) {\r\n            allow = true;\r\n        }\r\n        else {\r\n            hasBlock = true;\r\n            blockedReason = \"Anglar Key\";\r\n            blockedItems = [LA_AngularKey];\r\n            allow = false;\r\n        }\r\n    }\r\n\r\n    /* D4 overworld transitions */\r\n    else if ((uwID_curr === 0) && (roomID_curr === 0x2B) && (tileID_next === 0xE1)) {\r\n        if (NewItems.flags.anglarKeyUsed) {\r\n            allow = true;\r\n        }\r\n        else {\r\n            hasBlock = true;\r\n            blockedReason = \"Anglar Key\";\r\n            blockedItems = [LA_AngularKey];\r\n            allow = false;\r\n        }\r\n    }\r\n\r\n    /* D4 overworld transitions */\r\n    else if ((uwID_curr === 0) && (roomID_curr === 0x2B) && (tileID_next === 0xC6)) {\r\n        if (NewItems.flags.anglarKeyUsed) {\r\n            allow = true;\r\n        }\r\n        else {\r\n            hasBlock = true;\r\n            blockedReason = \"Anglar Key\";\r\n            blockedItems = [LA_AngularKey];\r\n            allow = false;\r\n        }\r\n    }\r\n\r\n    /* D6 overworld transitions */\r\n    else if ((uwID_curr === 0) && (roomID_curr === 0x8C) && (tileID_next === 0xE3)) {\r\n        if (NewItems.flags.faceKeyUsed) {\r\n            allow = true;\r\n        }\r\n        else {\r\n            hasBlock = true;\r\n            blockedReason = \"Face Key\";\r\n            blockedItems = [LA_FaceKey];\r\n            allow = false;\r\n        }\r\n    }\r\n\r\n    /* D7 overworld transition */\r\n    else if ((uwID_curr === 0) && (roomID_curr === 0x0E) && (tileID_next === 0xE1)) {\r\n        if (NewItems.flags.birdKeyUsed) {\r\n            allow = true;\r\n        }\r\n        else {\r\n            hasBlock = true;\r\n            blockedReason = \"Bird Key\";\r\n            blockedItems = [LA_BirdKey];\r\n            allow = false;\r\n        }\r\n    }\r\n\r\n    /* Egg Door */\r\n    else if (\r\n        ((uwID_next === 0) && (roomID_next === 0x06) && (roomX_curr === 5) && (roomY_curr === 4) && (d === 1))\r\n        // ((uwID_next === 0) && (roomID_next === 0x06) && ((roomX_curr === 5) && (roomY_curr === 5))) || LA_TILE_EGGWALL\r\n     ) {\r\n        if (!(\r\n            NewItems.dungeonItems[0].instrument &&\r\n            NewItems.dungeonItems[1].instrument &&\r\n            NewItems.dungeonItems[2].instrument &&\r\n            NewItems.dungeonItems[3].instrument &&\r\n            NewItems.dungeonItems[4].instrument &&\r\n            NewItems.dungeonItems[5].instrument &&\r\n            NewItems.dungeonItems[6].instrument &&\r\n            NewItems.dungeonItems[7].instrument\r\n        )) {\r\n            hasBlock = true;\r\n            blockedReason = \"Instruments\";\r\n            allow = false;\r\n            // AddRevisit(x, y, props, `Egg missing instruments`);\r\n            // return hasBlock;\r\n        }\r\n        else {\r\n            AddVisited(x, y - 1, props);\r\n            hasBlock = false;\r\n            allow = true;\r\n        }\r\n    }\r\n    \r\n    /* Egg Door Transition */\r\n    else if (\r\n        ((uwID_next === 0) && (roomID_next === 0x06) && (roomX_curr === 5) && (roomY_curr === 3))\r\n    ) {\r\n        hasBlock = false;\r\n        allow = false;\r\n    }\r\n    \r\n    /* Racoon Tarin screen */\r\n    else if (\r\n        ((uwID_next === 0) && (roomID_curr === 0x51) && (roomY_curr === 0) && (d === 1))\r\n    ) {\r\n        if (!NewItems.powder) {\r\n            blockedReason = \"Powder\";\r\n            blockedItems = [LA_POWDER];\r\n            hasBlock = true;\r\n            allow = false;\r\n        }\r\n    }\r\n\r\n    //===========================================================\r\n    //\r\n    //                         Solid\r\n    //\r\n    //===========================================================  \r\n\r\n    /* Allowed to mark off as completed, but not move */\r\n    else if ((tileType === Z4_TILE_CHEST)) {\r\n        allow = false;\r\n    }   \r\n\r\n    /* Allowed to mark off as completed, but not move */\r\n    else if ((tileType === Z4_TILE_UNLITTORCH)) {\r\n        allow = false;\r\n    }    \r\n\r\n    /* Allowed to mark off as completed, but not move */\r\n    else if ((tileType === Z4_TILE_KEYHOLE)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Allowed to mark off as completed, but not move */\r\n    else if ((tileType === Z4_TILE_PIT)) {\r\n        if (allowedTileType === Z4_TILE_PIT) { // For case of D8 Eye Block Lava/Pit\r\n            allow = true;    \r\n        }\r\n        else {\r\n            allow = false;\r\n        }\r\n    }    \r\n\r\n    else if ((tileType === Z4_TILE_SPECIALGRASS)) {\r\n        allow = false;\r\n    }   \r\n\r\n    /* Statue to shoot arrow at */\r\n    else if (tileID === 0xC0) {\r\n        allow = false;\r\n    }    \r\n    \r\n    else if ((tileType === Z4_TILE_SOLID)) {\r\n        // Well\r\n        if ((uwID_next === 0) && (tileID === 0x61)) {\r\n            allow = false;\r\n        }\r\n\r\n        // Rooster statue\r\n        else if ((uwID_next === 0) && (tileID === 0x5E)) {\r\n            allow = false;\r\n        }\r\n\r\n        else {\r\n            console.log(`How did you land on a solid?  x = ${x} y = ${y}`)\r\n            allow = false;\r\n        }\r\n    }   \r\n\r\n    //===========================================================\r\n    //\r\n    //                         Transition\r\n    //\r\n    //===========================================================  \r\n\r\n    /* Allowed to mark off as completed, but not move. */\r\n    else if ((tileType === Z4_TILE_PITTRANSITION)) { \r\n        allow = false;\r\n    }    \r\n\r\n    /* Transition top staircase */\r\n    else if ((uwID_next !== 0) && (tileID === 0xA2) && (d === 1)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* Transition top staircase */\r\n    else if ((uwID_next !== 0) && (tileID === 0xA3) && (d === 1)) {\r\n        allow = false;\r\n    }    \r\n    \r\n    /* Transition top staircase D7 */\r\n    else if ((uwID_next !== 0) && (tileID === 0xA8) && (d === 1)) {\r\n        allow = false;\r\n    }    \r\n    \r\n    /* Transition bottom */\r\n    else if ((uwID_next !== 0) && (tileID === 0xFD) && (d === 3)) {\r\n        allow = false;\r\n    }    \r\n\r\n    /* Transition bottom...THAT Tal tal copy room  */\r\n    else if ((uwID_next !== 0) && (tileID === 0xC1) && (d === 3)) {\r\n        allow = false;\r\n    }    \r\n    \r\n    /* Transition bottom...THAT Tal tal copy room */\r\n    else if ((uwID_next !== 0) && (tileID === 0xC2) && (d === 3)) {\r\n        allow = false;\r\n    }        \r\n\r\n    //===========================================================\r\n    //\r\n    //                     On Part solid\r\n    //\r\n    //===========================================================   \r\n\r\n    /* 12 - Gate cannot go up */\r\n    else if ((uwID_next !== 0) && (tileID === 0x12) && (d === 1)) {\r\n        allow = false;\r\n    }    \r\n\r\n    /* 10 - Gate cannot go right */\r\n    else if ((uwID_next !== 0) && (tileID === 0x10) && (d === 2)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 13 - Gate cannot go down */\r\n    else if ((uwID_next !== 0) && (tileID === 0x13) && (d === 3)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 11 - Gate cannot go left */\r\n    else if ((uwID_next !== 0) && (tileID === 0x11) && (d === 4)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 17 - Gate cannot go left or up */\r\n    else if ((uwID_next !== 0) && (tileID === 0x17) && ((d === 4) || (d === 1))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 16 - Gate cannot go right or up */\r\n    else if ((uwID_next !== 0) && (tileID === 0x16) && ((d === 2) || (d === 1))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 14 - Gate cannot go right or down */\r\n    else if ((uwID_next !== 0) && (tileID === 0x14) && ((d === 2) || (d === 3))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 15 - Gate cannot go left or down */\r\n    else if ((uwID_next !== 0) && (tileID === 0x15) && ((d === 4) || (d === 3))) {\r\n        allow = false;\r\n    }\r\n\r\n    //===========================================================\r\n    //\r\n    //                  Going to Part solid\r\n    //\r\n    //===========================================================   \r\n\r\n    /* 10 - Gate cannot go left */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x10) && (d === 4)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 11 - Gate cannot go right */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x11) && (d === 2)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 13 - Gate cannot go up */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x13) && (d === 1)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 12 - Gate cannot go down */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x12) && (d === 3)) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 17 - Gate cannot go down or right */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x17) && ((d === 3) || (d === 2))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 16 - Gate cannot go down or left */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x16) && ((d === 3) || (d === 4))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 14 - Gate cannot go up or left */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x14) && ((d === 1) || (d === 4))) {\r\n        allow = false;\r\n    }\r\n\r\n    /* 15 - Gate cannot go up or right */\r\n    else if ((uwID_next !== 0) && (tileID_next === 0x15) && ((d === 1) || (d === 2))) {\r\n        allow = false;\r\n    }\r\n\r\n    return {\r\n        handled : true,\r\n        hasBlock : hasBlock,\r\n        blockedReason : blockedReason,\r\n        blockedItems : blockedItems,\r\n        allow : allow,\r\n    };\r\n};","import { \r\n    Z4_TILE_CHEST,\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,\r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_POWDER,\r\n    LA_BOMB,\r\n    LA_SWORDv0,\r\n    LA_FLIPPERS,\r\n    LA_Mecidine,\r\n    LA_TailKey,\r\n    LA_AngularKey,\r\n    LA_FaceKey,\r\n    LA_BirdKey,\r\n    LA_GoldenLeaf,\r\n    LA_Map,\r\n    LA_Compass,\r\n    LA_OwlBeak,\r\n    LA_NightmareKey,\r\n    LA_SmallKey,\r\n    LA_50Rupees,\r\n    LA_20Rupees,\r\n    LA_100Rupees,\r\n    LA_200Rupees,\r\n    LA_500Rupees,\r\n    LA_SeaShell,\r\n    LA_HookshotNote,\r\n    LA_Gel, \r\n    LA_ITEMS_DUNGEONONLY_SET,\r\n    GetChestContentName,\r\n} from '../../other/uConstants';\r\n\r\nexport const ChestLogic = (props) => {\r\n    const { x, y, tileType_curr, NewItems, chestArr, subMapIDArr, chestStateArr } = props;\r\n\r\n    if (!(tileType_curr === Z4_TILE_CHEST)) {\r\n        return {\r\n            handled : false\r\n        }\r\n    }    \r\n\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n    let chestContent = chestArr[yy][xx];\r\n\r\n    if (LA_ITEMS_DUNGEONONLY_SET.includes(chestContent)) {\r\n        chestStateArr[yy][xx] = true;\r\n        AddChestContent(x, y, NewItems, chestArr, subMapIDArr);\r\n        return {\r\n            handled : true,\r\n            hasBlock: false,\r\n            allow : true\r\n        }\r\n    }\r\n    else {\r\n        if (chestStateArr[yy][xx]) {\r\n            AddChestContent(x, y, NewItems, chestArr, subMapIDArr);\r\n            return {\r\n                handled : true,\r\n                hasBlock: false,\r\n                allow : true\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                handled : true,\r\n                hasBlock: true,\r\n                blockedReason : \"Chest not allowed to open\",\r\n                allow : false\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const AddChestContent = (x, y, NewItems, chestArr, subMapIDArr) => {\r\n    NewItems.debug.chestsOpened++;\r\n\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n    let chestContent = chestArr[yy][xx];\r\n    let subMapID = subMapIDArr[yy][xx];\r\n\r\n    /* Color dungeon */\r\n    if (subMapID === 11) {\r\n        subMapID = 9; // Slot 10\r\n    }\r\n    \r\n    switch (chestContent) {\r\n        case LA_POWERBRACLET : NewItems.powerBracelet++; break;\r\n        case LA_MIRRORSHIELD : NewItems.shield++; break;\r\n        case LA_BOW          : NewItems.bow++; break;\r\n        case LA_HOOKSHOT     : NewItems.hookshot++; break;\r\n        case LA_FIREROD      : NewItems.fireRod++; break;\r\n        case LA_BOOTS        : NewItems.boots++; break;\r\n        case LA_OCARINA      : NewItems.ocarina++; break;\r\n        case LA_FEATHER      : NewItems.feather++; break;\r\n        case LA_SHOVEL       : NewItems.shovel++; break;\r\n        case LA_POWDER       : NewItems.powder++; break;\r\n        case LA_BOMB         : NewItems.bomb++; break;\r\n        case LA_SWORDv0      : NewItems.sword++; break;\r\n        case LA_FLIPPERS     : NewItems.flippers++; break;\r\n        // case LA_TRADINGITEM  : NewItems.tradingItem++; break;\r\n        // case LA_FakeSword1   : NewItems.unknown++; break;\r\n        // case LA_FakeSword2   : NewItems.unknown++; break;\r\n        case LA_Mecidine     : NewItems.other.medicine++; break;\r\n        case LA_TailKey      : NewItems.keys.tailKey++; break;\r\n        case LA_AngularKey   : NewItems.keys.anglarKey++; break;\r\n        case LA_FaceKey      : NewItems.keys.faceKey++; break;\r\n        case LA_BirdKey      : NewItems.keys.birdKey++; break;\r\n        case LA_GoldenLeaf   : NewItems.keys.slimeKey++; break;\r\n        case LA_Map          : NewItems.dungeonItems[subMapID].map++; break;\r\n        case LA_Compass      : NewItems.dungeonItems[subMapID].compass++; break;\r\n        case LA_OwlBeak      : NewItems.dungeonItems[subMapID].owlBeak++; break;\r\n        case LA_NightmareKey : NewItems.dungeonItems[subMapID].nKey++; break;\r\n        case LA_SmallKey     : NewItems.dungeonItems[subMapID].smallKey++; NewItems.dungeonItems[subMapID].smallKeyFound++; break;\r\n        case LA_50Rupees     : NewItems.other.rupees += 50; break;\r\n        case LA_20Rupees     : NewItems.other.rupees += 20; break;\r\n        case LA_100Rupees    : NewItems.other.rupees += 100; break;\r\n        case LA_200Rupees    : NewItems.other.rupees += 200; break;\r\n        case LA_500Rupees    : NewItems.other.rupees += 500; break;\r\n        case LA_SeaShell     : NewItems.other.seaShell++; break;\r\n        case LA_HookshotNote : NewItems.other.hookshotNote++; break;\r\n        case LA_Gel          : NewItems.other.gel++; break;\r\n        default              : break;\r\n    }\r\n\r\n    console.log(`-------------------------------------------------------------------------------------------Opened chest ${GetChestContentName(chestContent)}`);\r\n};\r\n\r\nexport const AddChestContent2 = (NewItems, chestContent) => {\r\n    switch (chestContent) {\r\n        case LA_POWERBRACLET : NewItems.powerBracelet++; break;\r\n        case LA_MIRRORSHIELD : NewItems.shield++; break;\r\n        case LA_BOW          : NewItems.bow++; break;\r\n        case LA_HOOKSHOT     : NewItems.hookshot++; break;\r\n        case LA_FIREROD      : NewItems.fireRod++; break;\r\n        case LA_BOOTS        : NewItems.boots++; break;\r\n        case LA_OCARINA      : NewItems.ocarina++; break;\r\n        case LA_FEATHER      : NewItems.feather++; break;\r\n        case LA_SHOVEL       : NewItems.shovel++; break;\r\n        case LA_POWDER       : NewItems.powder++; break;\r\n        case LA_BOMB         : NewItems.bomb++; break;\r\n        case LA_SWORDv0      : NewItems.sword++; break;\r\n        case LA_FLIPPERS     : NewItems.flippers++; break;\r\n        // case LA_TRADINGITEM  : NewItems.tradingItem++; break;\r\n        // case LA_FakeSword1   : NewItems.unknown++; break;\r\n        // case LA_FakeSword2   : NewItems.unknown++; break;\r\n        case LA_Mecidine     : NewItems.other.medicine++; break;\r\n        case LA_TailKey      : NewItems.keys.tailKey++; break;\r\n        case LA_AngularKey   : NewItems.keys.anglarKey++; break;\r\n        case LA_FaceKey      : NewItems.keys.faceKey++; break;\r\n        case LA_BirdKey      : NewItems.keys.birdKey++; break;\r\n        // case LA_GoldenLeaf   : NewItems.keys.slimeKey++; break;\r\n        // case LA_Map          : NewItems.dungeonItems[subMapID].map++; break;\r\n        // case LA_Compass      : NewItems.dungeonItems[subMapID].compass++; break;\r\n        // case LA_OwlBeak      : NewItems.dungeonItems[subMapID].owlBeak++; break;\r\n        // case LA_NightmareKey : NewItems.dungeonItems[subMapID].nKey++; break;\r\n        // case LA_SmallKey     : NewItems.dungeonItems[subMapID].smallKey++; NewItems.dungeonItems[subMapID].smallKeyFound++; break;\r\n        // case LA_50Rupees     : NewItems.other.rupees += 50; break;\r\n        // case LA_20Rupees     : NewItems.other.rupees += 20; break;\r\n        // case LA_100Rupees    : NewItems.other.rupees += 100; break;\r\n        // case LA_200Rupees    : NewItems.other.rupees += 200; break;\r\n        // case LA_500Rupees    : NewItems.other.rupees += 500; break;\r\n        case LA_SeaShell     : NewItems.other.seaShell++; break;\r\n        // case LA_HookshotNote : NewItems.other.hookshotNote++; break;\r\n        // case LA_Gel          : NewItems.other.gel++; break;\r\n        default              : break;\r\n    }\r\n\r\n    console.log(`-------------------------------------------------------------------------------------------Added chest item ${GetChestContentName(chestContent)}`);\r\n};","import { HighNibble, GetSpriteInfoFromRoom, GetTileTypesFromRoom, GetTileIDsFromRoom } from \"../../other/utilities\";\r\nimport { SpriteLogic } from \"../../index\";\r\nimport { \r\n    Z4_TILE_UNLITTORCH, \r\n    Z4_TILE_PUSHABLEBLOCK, \r\n    Z4_TILE_POT, \r\n    LA_SPRITE_HORSEHEAD, \r\n    LA_SPRITE_EYE_BLOCK, \r\n    Z4_BOARD_STATE_COMPLETE,\r\n    LA_SPRITE_COLOR_SPINNER_RED,\r\n    LA_SPRITE_COLOR_SPINNER_GOLD,\r\n    LA_SPRITE_COLOR_SPINNER_BLUE,\r\n    LA_SPRITE_D7_MINIBOSS,\r\n    LA_SPRITE_ELEPHANTSTATUE,\r\n} from \"../../other/uConstants\";\r\n\r\nexport const EventLogic = (props) => {\r\n    let { x, y, uwID_curr, roomID_curr, NewItems, tileTypesArr, tileIDsArr, stateArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, spritesArr, spriteStateArr, eventsStateArr, eventsArr } = props;\r\n\r\n    /* No events in overworld */\r\n    if (uwID_curr === 0) {\r\n        return {\r\n            handled : false\r\n        };\r\n    }\r\n\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n    let event = eventsArr[yy][xx];\r\n    let state = eventsStateArr[yy][xx];\r\n    // let id = LowNibble(event);\r\n    let trigger = HighNibble(event);    \r\n    \r\n    /* Exit if this is already done */\r\n    if (state === Z4_BOARD_STATE_COMPLETE) {\r\n        return {\r\n            handled : false\r\n        };\r\n    }\r\n\r\n    /* No event */\r\n    if (event === 0x00) {\r\n        eventsStateArr[yy][xx] = Z4_BOARD_STATE_COMPLETE;\r\n        return {\r\n            handled : true\r\n        }\r\n    }\r\n\r\n    let triggerResult = false;\r\n    let arr1;\r\n    let arr2;\r\n    let arr3;\r\n\r\n    switch (trigger) {\r\n        /* All color dungeon spinners are blue */\r\n        case 0x00:    \r\n            if (uwID_curr !== 3) {\r\n                console.log(\"How did you even get to event 0x00?\");\r\n                return {\r\n                    handled : false\r\n                };\r\n            }\r\n            arr1 = GetSpriteInfoFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n            arr2 = arr1.filter(o => [LA_SPRITE_COLOR_SPINNER_RED, LA_SPRITE_COLOR_SPINNER_GOLD, LA_SPRITE_COLOR_SPINNER_BLUE].includes(o.ID));\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* Kill all */\r\n        case 0x01:\r\n            arr1 = GetSpriteInfoFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n            arr2 = arr1.filter(o => o.killable);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr3.length === 0);\r\n\r\n            /* D7 miniboss is unreachable */\r\n            arr2 = arr1.filter(o => o.ID === LA_SPRITE_D7_MINIBOSS);\r\n            if (arr2.length > 0) {\r\n                triggerResult = (NewItems.sword || NewItems.fireRod || NewItems.bow || NewItems.boomerang);\r\n            }\r\n\r\n            /* D8 boss is unreachable */\r\n            // arr2 = arr1.filter(o => o.ID === LA_SPRITE_D3_BOSS);\r\n            // if (arr2.length > 0) {\r\n            //     triggerResult = (NewItems.fireRod);\r\n            // }\r\n\r\n            /* D8 boss is unreachable */\r\n            if ((uwID_curr === 2) && (roomID_curr === 0x34)) {\r\n                let o = {...props, x2 : x, y2 : y, spriteID_next : arr1[0].ID};\r\n                let result = SpriteLogic(o);\r\n                if (result.handled) {\r\n                    if (result.hasBlock) {\r\n                        triggerResult = false;\r\n                    }\r\n                    else {\r\n                        triggerResult = true;\r\n                    }\r\n                }\r\n                else {\r\n                    triggerResult = false;\r\n                }\r\n            }\r\n\r\n            break;\r\n\r\n        /* Push one pushblock */\r\n        case 0x02:\r\n            arr1 = GetTileTypesFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileTypesArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => o.tileType === Z4_TILE_PUSHABLEBLOCK);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* Press floor button (visible or in pot) */\r\n        case 0x03:\r\n            arr1 = GetTileIDsFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileIDsArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => [0x8E, 0xAA].includes(o.ID));\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* ??? Color dungeon fairy */\r\n        case 0x04:\r\n            triggerResult = true;\r\n            break;\r\n\r\n        /* Light all unlit torches */\r\n        case 0x05:\r\n            arr1 = GetTileTypesFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileTypesArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => o.tileType === Z4_TILE_UNLITTORCH);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* D2 Nightmare key puzzle */\r\n        case 0x06:\r\n            arr1 = GetSpriteInfoFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n            arr2 = arr1.filter(o => o.killable);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr3.length === 0);\r\n            break;\r\n\r\n        /* Push two pushblocks */\r\n        case 0x07:\r\n            arr1 = GetTileTypesFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileTypesArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => o.tileType === Z4_TILE_PUSHABLEBLOCK);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* ??? Special D7 that one room... */\r\n        case 0x08:\r\n            break;\r\n\r\n        /* D4 Glint Puzzle */\r\n        case 0x09:\r\n            arr1 = GetTileIDsFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileIDsArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => o.ID === 0x8D);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* D4 / D7 Boss killed */\r\n        case 0x0A:\r\n            if ((uwID_curr === 1) && (roomID_curr === 0x66)) {\r\n                triggerResult = NewItems.dungeonItems[3].bossKilled;\r\n            }\r\n            if ((uwID_curr === 2) && (roomID_curr === 0x2E)) {\r\n                triggerResult = NewItems.dungeonItems[6].bossKilled;\r\n            }\r\n            break;\r\n\r\n        /* Throw liftable (pot, statue) at door */\r\n        case 0x0B:\r\n            arr1 = GetTileTypesFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileTypesArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => o.tileType === Z4_TILE_POT);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            arr1 = GetSpriteInfoFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n            arr2 = arr1.filter(o => o.ID === LA_SPRITE_ELEPHANTSTATUE);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = triggerResult || ((arr2.length > 0) && (arr3.length === 0));\r\n            break;\r\n\r\n        /* Horseheads upright. */\r\n        case 0x0C:\r\n            arr1 = GetSpriteInfoFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n            arr2 = arr1.filter(o => o.ID === LA_SPRITE_HORSEHEAD);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* Throw pot at chest */\r\n        case 0x0D:\r\n            arr1 = GetTileTypesFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileTypesArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => o.tileType === Z4_TILE_POT);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* D8 hole filling */\r\n        case 0x0E:\r\n            arr1 = GetSpriteInfoFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n            arr2 = arr1.filter(o => o.ID === LA_SPRITE_EYE_BLOCK);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        /* Shoot statue with arrow (D8) */\r\n        case 0x0F:\r\n            arr1 = GetTileIDsFromRoom(uwID_curr, roomID_curr, maxXSquares, maxYSquares, tileIDsArr, uwIDArr, roomIDArr, stateArr);\r\n            arr2 = arr1.filter(o => o.ID === 0xC0);\r\n            arr3 = arr2.filter(o => o.state === 0);\r\n            triggerResult = (arr2.length > 0) && (arr3.length === 0);\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n    if (triggerResult) {\r\n        eventsStateArr[yy][xx] = Z4_BOARD_STATE_COMPLETE;\r\n    }\r\n    \r\n    return {\r\n        handled : true\r\n    };\r\n\r\n    // switch (id) {\r\n    //     /* Auto open chest (D6 nightmare key) */\r\n    //     case 0x00:\r\n    //         break;\r\n\r\n    //     /* Color dungeon spawn chest */\r\n    //     case 0x01:\r\n    //         break;\r\n\r\n    //     /* Open locked doors */\r\n    //     case 0x02:\r\n    //         break;\r\n\r\n    //     /* Open locked doors (from color dungeon spinners) */\r\n    //     case 0x03:\r\n    //         break;\r\n\r\n    //     /* Auto kills all */\r\n    //     case 0x04:\r\n    //         break;\r\n\r\n    //     /* ??? */\r\n    //     case 0x05:\r\n    //         break;\r\n\r\n    //     /* Spawn chest x=8 y=2 */\r\n    //     case 0x06:\r\n    //         break;\r\n\r\n    //     /* ??? */\r\n    //     case 0x07:\r\n    //         break;\r\n\r\n    //     /* Drop small key x=2 y=3 */\r\n    //     case 0x08:\r\n    //         break;\r\n\r\n    //     /* Drop small key x=5 y=4*/\r\n    //     case 0x09:\r\n    //         break;\r\n\r\n    //     /* Spawn staircase x=8 y=1 */\r\n    //     case 0x0A:\r\n    //         break;\r\n\r\n    //     /* ??? */\r\n    //     case 0x0B:\r\n    //         break;\r\n\r\n    //     /* Open locked doors and spawn warp */\r\n    //     case 0x0C:\r\n    //         break;\r\n\r\n    //     /* ??? */\r\n    //     case 0x0D:\r\n    //         break;\r\n\r\n    //     /* ??? */\r\n    //     case 0x0E:\r\n    //         break;\r\n\r\n    //     /* ??? */\r\n    //     case 0x0F:\r\n    //         break;\r\n\r\n    //     default:\r\n    //         break;\r\n    // }\r\n};","import { AllowMovement } from \"../../index\";\r\nimport { TileInSameRoom } from \"../../other/utilities\";\r\nimport { \r\n    LA_FEATHER,\r\n    Z4_TILE_PIT,\r\n    Z4_TILE_FLIPPERS,\r\n    Z4_TILE_PITTRANSITION,\r\n    LA_SPRITES_IMPASSABLE_SET,\r\n    Z4_TILE_SOLID,\r\n    Z4_TILE_PUSHABLEBLOCK,\r\n    Z4_TILE_LEDGE,\r\n    Z4_TILE_TRANS,\r\n    Z4_TILE_GRASS,\r\n    Z4_TILE_SPECIALGRASS,\r\n    Z4_TILE_PARTSOLID,\r\n    Z4_TILE_ORBBLOCK1,\r\n    Z4_TILE_ORBBLOCK2,\r\n    LA_SWORDv0, \r\n    LA_FIREROD, \r\n    LA_POWDER, \r\n    LA_BOOMERANG,\r\n} from \"../../other/uConstants\";\r\n\r\nexport const FeatherLogic = (props) => {\r\n    const { x, y, x2, y2, NewItems, d, tileTypesArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, spritesArr, spriteStateArr } = props;\r\n\r\n    let tileType_curr = tileTypesArr[y][x];\r\n    let tileType = tileTypesArr[y2][x2];\r\n    let feathableTileTypes = [Z4_TILE_PIT, Z4_TILE_FLIPPERS, Z4_TILE_PITTRANSITION];\r\n    \r\n    let hasBlock = false;\r\n    let added = [];\r\n\r\n    // if ((x===145) && (y===166)) {\r\n    //     debugger;\r\n    // }\r\n\r\n    if (tileType_curr === Z4_TILE_FLIPPERS) {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n\r\n    if (feathableTileTypes.includes(tileType)) {\r\n        return FeatherMore(props, x, y, x2, y2, d, NewItems, 1, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock, spritesArr, spriteStateArr);\r\n    }\r\n    else if (tileType === Z4_TILE_SPECIALGRASS) {\r\n        if (!(NewItems.sword || NewItems.fireRod || NewItems.powder)) {\r\n            return {\r\n                handled : true,\r\n                hasBlock : true,\r\n                added : added,\r\n                allow : true,\r\n                blockedReason : \"Weapon no hookshot\",\r\n                blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_BOOMERANG],\r\n            }\r\n        }\r\n        else {\r\n            return FeatherMore(props, x, y, x2, y2, d, NewItems, 1, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock, spritesArr, spriteStateArr);\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n};\r\n\r\nconst FeatherMore = (props, x, y, x2, y2, d, NewItems, amount, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock) => {\r\n    let result = undefined;\r\n    let result1 = undefined;\r\n    let result2 = undefined;\r\n    let result3 = undefined;\r\n    let x3;\r\n    let y3;\r\n    let d3;\r\n    let x4;\r\n    let y4;\r\n    let d4;\r\n    let x5;\r\n    let y5;\r\n    let d5;\r\n\r\n    /* Too far to visit */\r\n    if (amount >= 4) {\r\n        return {\r\n            handled : true,\r\n            added : added,\r\n            hasBlock : hasBlock,\r\n            blockedReason : \"Feather\",\r\n            blockedItems : [LA_FEATHER],\r\n        };\r\n    }\r\n\r\n    /* Increment the tile */\r\n    switch (d) {\r\n        case 1 : \r\n            x3 = x2;\r\n            y3 = y2 - 1;\r\n            d3 = 1;\r\n\r\n            x4 = x2 - 1;\r\n            y4 = y2;\r\n            d4 = 4;\r\n\r\n            x5 = x2 + 1;\r\n            y5 = y2;\r\n            d4 = 2;\r\n            break;\r\n\r\n        case 2 : \r\n            x3 = x2 + 1;\r\n            y3 = y2;\r\n            d3 = 2;\r\n\r\n            x4 = x2;\r\n            y4 = y2 - 1;\r\n            d4 = 1;\r\n\r\n            x5 = x2;\r\n            y5 = y2 + 1;\r\n            d5 = 3;\r\n            break;\r\n\r\n        case 3 : \r\n            x3 = x2;\r\n            y3 = y2 + 1;\r\n            d3 = 3;\r\n\r\n            x4 = x2 + 1;\r\n            y4 = y2;\r\n            d4 = 2;\r\n\r\n            x5 = x2 - 1;\r\n            y5 = y2;\r\n            d5 = 4;\r\n            break;\r\n\r\n        case 4 : \r\n            x3 = x2 - 1;\r\n            y3 = y2;\r\n            d3 = 4;\r\n\r\n            x4 = x2;\r\n            y4 = y2 + 1;\r\n            d4 = 3;\r\n\r\n            x5 = x2;\r\n            y5 = y2 - 1;\r\n            d5 = 1;\r\n            break;\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n    const FeatherAgain = (x, y, x2, y2, d2) => {\r\n        /* Nothing new to visit: destination does not exist or not in current room! */\r\n        if (!TileInSameRoom(x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n            return {\r\n                handled : true,\r\n                added : added,\r\n                hasBlock : hasBlock,\r\n                blockedReason : \"Feather\",\r\n                blockedItems : [LA_FEATHER],\r\n            };\r\n        }\r\n\r\n        if (!AllowMovement({...props, x2 : x2, y2 : y2})) {\r\n            return {\r\n                handled : true,\r\n                added : added,\r\n                hasBlock : hasBlock,\r\n                blockedReason : \"Feather\",\r\n                blockedItems : [LA_FEATHER],\r\n            };\r\n        }\r\n\r\n        /* Disallow diagonal jumps past 2 pits, think about D4 cross */\r\n        if ((amount >= 3) && ((x !== x2) && (y !== y2))) {\r\n            return {\r\n                handled : true,\r\n                added : added,\r\n                hasBlock : false,\r\n            };\r\n        }\r\n\r\n        /* Information about the new tile to analyze */\r\n        let tileType = props.tileTypesArr[y2][x2];\r\n        let tileID = props.tileIDsArr[y2][x2];\r\n        let state = props.stateArr[y2][x2];\r\n        let spriteID = props.spritesArr[y2][x2];\r\n        let spriteState = props.spriteStateArr[y2][x2];\r\n\r\n        switch (true) {\r\n            /* Nothing new to visit: destination was already visited previously! */\r\n            case (state !== 0)                           : result = { handled : true, added : added, hasBlock : hasBlock }; break;\r\n\r\n            // /* Don't allow to jump to a blocking sprite */\r\n            // case (spriteID !== null && spriteState === 0) : result = { handled : true, added : added, hasBlock : true }; break; \r\n\r\n            /* Don't allow to jump to a blocking sprite */\r\n            case (spriteID !== null && spriteState === 0 && LA_SPRITES_IMPASSABLE_SET.includes(spriteID)) : result = HandleImpassableSprite(); break; \r\n    \r\n            /* More to jump over */\r\n            case (tileType === Z4_TILE_PIT)               : result = FeatherMore(props, x, y, x2, y2, d, NewItems, amount + 1, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock); break;\r\n            case (tileType === Z4_TILE_FLIPPERS)          : result = FeatherMore(props, x, y, x2, y2, d, NewItems, amount + 1, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock); break;\r\n            case (tileType === Z4_TILE_PITTRANSITION)     : result = FeatherMore(props, x, y, x2, y2, d, NewItems, amount + 1, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock); break;\r\n    \r\n            /* Solid */\r\n            case (tileType === Z4_TILE_SOLID)             : result = HandleSolid(added); break;\r\n            case (tileType === Z4_TILE_PUSHABLEBLOCK)     : result = HandleSolid(added); break;\r\n            case (tileType === Z4_TILE_LEDGE)             : result = HandleSolid(added); break;\r\n    \r\n            /* Potential land */\r\n            case (tileType === Z4_TILE_TRANS)             : result = HandleTransparent(NewItems, added, amount, x2, y2); break;\r\n            case (tileType === Z4_TILE_GRASS)             : result = HandleGrass(NewItems, added, amount, x2, y2); break;\r\n            case (tileType === Z4_TILE_SPECIALGRASS)      : result = HandleSpecialGrass(props, x, y, x2, y2, d, NewItems, amount, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock); break;\r\n            case (tileType === Z4_TILE_PARTSOLID)         : result = HandlePartSolid(NewItems, added, amount, x2, y2, tileID, d2); break;\r\n            case (tileType === Z4_TILE_ORBBLOCK1)         : result = HandleOrbBlock1(NewItems, added, amount, x2, y2); break;\r\n            case (tileType === Z4_TILE_ORBBLOCK2)         : result = HandleOrbBlock2(NewItems, added, amount, x2, y2); break;\r\n\r\n            /* Up down stair */\r\n            case ((tileID === 0xE0) && (d2 === 3))        : result = HandleTransparent(NewItems, added, amount, x2, y2); break;                       \r\n    \r\n            /* Something else */\r\n            default                                       : result = { handled : true, added : added, hasBlock : hasBlock }; break;\r\n        }\r\n\r\n        return {\r\n            handled : true,\r\n            added : added,\r\n            hasBlock : result.hasBlock,\r\n            blockedReason : \"Feather\",\r\n            blockedItems : [LA_FEATHER],\r\n        };\r\n    };\r\n\r\n    result1 = FeatherAgain(x, y, x3, y3, d3).hasBlock;\r\n    result2 = FeatherAgain(x, y, x4, y4, d4).hasBlock;\r\n    result3 = FeatherAgain(x, y, x5, y5, d5).hasBlock;\r\n\r\n    result = result1 || result2 || result3;\r\n\r\n    return {\r\n        handled : true,\r\n        added : added,\r\n        hasBlock : result,\r\n        blockedReason : \"Feather\",\r\n        blockedItems : [LA_FEATHER],\r\n    };\r\n};\r\n\r\nconst HandleImpassableSprite = () => {\r\n    return { \r\n        handled : true, \r\n        hasBlock : false \r\n    };\r\n};\r\n\r\nconst HandleSolid = (added) => {\r\n    /* Nothing new to visit: destination is a solid tile! */\r\n    return {\r\n        added : added,\r\n        hasBlock : false,\r\n    };\r\n};\r\n\r\nconst HandleTransparent = (NewItems, added, amount, x2, y2) => {\r\n    /* Missing feather */\r\n    if (!NewItems.feather) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    } \r\n    \r\n    /* Missing boots */\r\n    if (amount === 3) {\r\n        if (!NewItems.boots) {\r\n            return {\r\n                hasBlock : true,\r\n            };\r\n        }\r\n    }\r\n\r\n    added.push({x : x2, y: y2});\r\n    return {\r\n        added : added,\r\n        hasBlock : false,\r\n    };\r\n};\r\n\r\nconst HandleGrass = (NewItems, added, amount, x2, y2) => {\r\n    /* Missing feather */\r\n    if (!NewItems.feather) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    } \r\n    \r\n    /* Missing boots */\r\n    if (amount === 3) {\r\n        if (!NewItems.boots) {\r\n            return {\r\n                hasBlock : true,\r\n            };\r\n        }\r\n    }\r\n    \r\n    /* Missing destroy grass */\r\n    if ((!NewItems.sword) && (!NewItems.fireRod) && (!NewItems.boomerang)) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    }\r\n\r\n    added.push({x : x2, y: y2});\r\n    return {\r\n        hasBlock : false,\r\n    };\r\n};\r\n\r\nconst HandleSpecialGrass = (props, x, y, x2, y2, d, NewItems, amount, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock) => {\r\n    /* Missing feather */\r\n    if (!NewItems.feather) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    } \r\n    \r\n    /* Missing boots */\r\n    if (amount === 3) {\r\n        if (!NewItems.boots) {\r\n            return {\r\n                hasBlock : true,\r\n            };\r\n        }\r\n    }\r\n    \r\n    /* Missing destroy grass */\r\n    if ((!NewItems.sword) && (!NewItems.fireRod) && (!NewItems.boomerang)) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    }\r\n\r\n    let result = FeatherMore(props, x, y, x2, y2, d, NewItems, amount + 1, maxXSquares, maxYSquares, uwIDArr, roomIDArr, added, hasBlock);\r\n    return result;\r\n};\r\n\r\nconst HandlePartSolid = (NewItems, added, amount, x2, y2, tileID, d) => {\r\n    /* If jumping up or down, only land on PARTSOLID 0x11 and 0x10 */\r\n    /* If jumping left or right, only land on PARTSOLID 0x12 and 0x13 */\r\n    if (\r\n        !(\r\n            (([0x11, 0x10].includes(tileID)) && ([1, 3].includes(d))) ||\r\n            (([0x12, 0x13].includes(tileID)) && ([2, 4].includes(d))) \r\n        )\r\n    ) {\r\n        return {\r\n            hasBlock : false,\r\n        };\r\n    }\r\n\r\n    /* Missing feather */\r\n    if (!NewItems.feather) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    } \r\n    \r\n    /* Missing boots */\r\n    if (amount === 3) {\r\n        if (!NewItems.boots) {\r\n            return {\r\n                hasBlock : true,\r\n            };\r\n        }\r\n    }\r\n\r\n    added.push({x : x2, y: y2});\r\n    return {\r\n        hasBlock : false,\r\n    };\r\n};\r\n\r\n// Crystal orb raised/lowered logic\r\n// D2: If you can reach the crystal, bombs or weapon\r\n// D3: If you can reach the crystal, bombs or weapon or PB\r\n// D6: If you can reach the crystal, bombs or boomerang (from entrance) bomb or boomerang or bow/rod (from top left), bomb for pb2 room, weapom for medicine chest\r\n// D7: If you can reach the crystal, bombs or weapon\r\n// D8: If you can reach the crystal, bombs or weapon\r\n// Color: If you can reach the crystal, bombs or weapon\r\n\r\n// TODO\r\nconst HandleOrbBlock1 = (NewItems, added, amount, x2, y2) => {\r\n    /* Missing feather */\r\n    if (!NewItems.feather) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    } \r\n\r\n    /* Missing boots */\r\n    if (amount === 3) {\r\n        if (!NewItems.boots) {\r\n            return {\r\n                hasBlock : true,\r\n            };\r\n        }\r\n    }\r\n\r\n    added.push({x : x2, y: y2});\r\n    return {\r\n        hasBlock : false,\r\n    };\r\n};\r\n\r\n// TODO\r\nconst HandleOrbBlock2 = (NewItems, added, amount, x2, y2) => {\r\n    /* Missing feather */\r\n    if (!NewItems.feather) {\r\n        return {\r\n            hasBlock : true,\r\n        };\r\n    } \r\n    \r\n    /* Missing boots */\r\n    if (amount === 3) {\r\n        if (!NewItems.boots) {\r\n            return {\r\n                hasBlock : true,\r\n            };\r\n        }\r\n    }\r\n\r\n    added.push({x : x2, y: y2});\r\n    return {\r\n        hasBlock : false,\r\n    };\r\n};","import { GetRoomInfo, TileInSameRoom } from \"../../other/utilities\";\r\nimport { \r\n    Z4_TILE_FLIPPERS, \r\n    Z4_TILE_PIT, \r\n    Z4_TILE_LEDGE,\r\n    Z4_TILE_PITTRANSITION,\r\n    Z4_TILE_TRANS,\r\n    Z4_TILE_SOLID,\r\n    Z4_TILE_PUSHABLEBLOCK,\r\n    LA_HOOKSHOT,\r\n} from \"../../other/uConstants\";\r\n\r\nexport const HookshotLogic = (props) => {\r\n\r\n    let { x, y, tileTypesArr } = props;\r\n\r\n    let result;\r\n    let tileType = tileTypesArr[y][x];\r\n\r\n    // if ((x===112) && (y===86)) {\r\n    //     debugger;\r\n    // }\r\n\r\n    /* Don't allow hookshot while in water */\r\n    if (tileType === Z4_TILE_FLIPPERS) {\r\n        return { \r\n            handled : false\r\n        }\r\n    }\r\n    \r\n    result = HookshotLeftLogic(props);\r\n    if (result.handled) {\r\n        return result;\r\n    }\r\n    \r\n    result = HookshotRightLogic(props);\r\n    if (result.handled) {\r\n        return result;\r\n    }\r\n    \r\n    result = HookshotUpLogic(props);\r\n    if (result.handled) {\r\n        return result;\r\n    }\r\n\r\n    result = HookshotDownLogic(props);\r\n    if (result.handled) {\r\n        return result;\r\n    }\r\n\r\n    return { \r\n        handled : false\r\n    }\r\n};\r\n\r\nconst HookshotUpLogic = (props) => {\r\n    let { x, y, x2, y2, NewItems, d, tileTypesArr, tileIDsArr, stateArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, uwID_next} = props;\r\n\r\n    let tileType = tileTypesArr[y2][x2];\r\n    let tileID = tileIDsArr[y2][x2];\r\n    let uwID = GetRoomInfo(x, y, uwIDArr, roomIDArr).uwID;\r\n    \r\n    /* Ledge Can Go Up */\r\n    if ((d === 1) && ([Z4_TILE_PIT, Z4_TILE_LEDGE, Z4_TILE_PITTRANSITION/*, Z4_TILE_SPECIALGRASS*/].includes(tileType))) {\r\n        let isGood = false;\r\n        let hookshotableUW0 = [0x20, 0xA0, 0xA1, 0x6E, 0xD4, 0xC8]; // Rock, chests, donut, sign, taltal heights rock\r\n        let hookshotableUW123 = [0x20, 0xA0, 0xA1, 0xA6, 0xA7]; // Pot, chests, Pushblocks\r\n\r\n        if (!(\r\n            (tileType === Z4_TILE_PIT) ||\r\n            (tileType === Z4_TILE_PITTRANSITION) ||\r\n            // (tileType === Z4_TILE_SPECIALGRASS) ||\r\n            ((uwID_next !== 0) && (tileID === 0x22)) \r\n        )) {    \r\n            return {\r\n                handled : false,\r\n                hasBlock : false,\r\n            };\r\n        }\r\n\r\n        // if (tileType === Z4_TILE_SPECIALGRASS) {\r\n        //     if (\r\n        //         (!NewItems.sword) ||\r\n        //         (!NewItems.fireRod) ||\r\n        //         (!NewItems.boomerang)\r\n        //     ) {\r\n        //         hasBlock = true;\r\n        //         return {\r\n        //             handled : true,\r\n        //             hasBlock : true,\r\n        //         };\r\n        //     }\r\n        // }\r\n\r\n        for (let y3 = y2 - 1; y3 >= y2 - 7; y3--) {\r\n\r\n            if (!TileInSameRoom(x, y, x2, y3, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n\r\n            let tileID2 = tileIDsArr[y3][x2];\r\n            let tileType2 = tileTypesArr[y3][x2];\r\n\r\n            let state3 = stateArr[y3 + 1][x2];\r\n            let tileType3 = tileTypesArr[y3 + 1][x2];\r\n            \r\n            if ((uwID === 0) && hookshotableUW0.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else if ((uwID !== 0) && hookshotableUW123.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else if ((uwID !== 0) && (tileID2 === 0x9E)) {\r\n                isGood = true;\r\n            }\r\n            else {\r\n                if ([Z4_TILE_SOLID, Z4_TILE_PUSHABLEBLOCK].includes(tileType2)) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n            }\r\n            \r\n            if (isGood) {\r\n                if (state3 !== 0) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n\r\n                if (!NewItems.hookshot) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : true,\r\n                        blockedReason : \"Hookshot\",\r\n                        blockedItems : [LA_HOOKSHOT],\r\n                    };\r\n                }\r\n\r\n                let added = [];\r\n\r\n                /* D5 Hookshot bridge */\r\n                if ((uwID !== 0) && (tileID2 === 0x9E)) {\r\n                    for (let y4 = y3; y4 <= y2; y4++) {\r\n                        added.push({x : x2, y: y4});\r\n                    }\r\n                }\r\n                else { \r\n                    added.push({x : x2, y: y3 + 1});\r\n                }\r\n\r\n                return {\r\n                    handled : true,\r\n                    added : added,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n        }\r\n\r\n        return {\r\n            handled : true,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n};\r\n\r\nconst HookshotDownLogic = (props) => {\r\n    let { x, y, x2, y2, NewItems, d, tileTypesArr, tileIDsArr, stateArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, uwID_next} = props;\r\n\r\n    let tileType = tileTypesArr[y2][x2];\r\n    let tileID = tileIDsArr[y2][x2];\r\n    let uwID = GetRoomInfo(x, y, uwIDArr, roomIDArr).uwID;\r\n    \r\n    /* Ledge Can down Up */\r\n    if ((d === 3) && ([Z4_TILE_PIT, Z4_TILE_LEDGE, Z4_TILE_PITTRANSITION/*, Z4_TILE_SPECIALGRASS*/].includes(tileType))) {\r\n        let isGood = false;\r\n        let hookshotableUW0 = [0x20, 0xA0, 0xA1, 0x6E, 0xD4, 0xC8]; // Rock, chests, donut, sign, taltal heights rock\r\n        let hookshotableUW123 = [0x20, 0xA0, 0xA1, 0xA6, 0xA7]; // Pot, chests, Pushblocks\r\n\r\n        if (!(\r\n            (tileType === Z4_TILE_PIT) ||\r\n            (tileType === Z4_TILE_PITTRANSITION) ||\r\n            // (tileType === Z4_TILE_SPECIALGRASS) ||\r\n            ((uwID_next !== 0) && (tileID === 0x21)) \r\n        )) {    \r\n            return {\r\n                handled : false,\r\n                hasBlock : false,\r\n            };\r\n        }\r\n\r\n        // if (tileType === Z4_TILE_SPECIALGRASS) {\r\n        //     if (\r\n        //         (!iNewItems.sword) ||\r\n        //         (!NewItems.fireRod) ||\r\n        //         (!NewItems.boomerang)\r\n        //     ) {\r\n        //         hasBlock = true;\r\n        //         return {\r\n        //             handled : true,\r\n        //             hasBlock : true,\r\n        //         };\r\n        //     }\r\n        // }\r\n\r\n        for (let y3 = y2 + 1; y3 <= y2 + 7; y3++) {\r\n\r\n            if (!TileInSameRoom(x, y, x2, y3, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n\r\n            let tileID2 = tileIDsArr[y3][x2];\r\n            let tileType2 = tileTypesArr[y3][x2];\r\n\r\n            let state3 = stateArr[y3 - 1][x2];\r\n            let tileType3 = tileTypesArr[y3 - 1][x2];\r\n\r\n            if ((uwID === 0) && hookshotableUW0.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else if ((uwID !== 0) && hookshotableUW123.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else if ((uwID !== 0) && (tileID2 === 0x9F)) {\r\n                isGood = true;\r\n            }\r\n            else {\r\n                if ([Z4_TILE_SOLID, Z4_TILE_PUSHABLEBLOCK].includes(tileType2)) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n            }\r\n            \r\n            if (isGood) {\r\n                if (state3 !== 0) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n\r\n                if (!NewItems.hookshot) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : true,\r\n                        blockedReason : \"Hookshot\",\r\n                        blockedItems : [LA_HOOKSHOT],\r\n                    };\r\n                }\r\n\r\n                let added = [];\r\n\r\n                /* D5 Hookshot bridge */\r\n                if ((uwID !== 0) && (tileID2 === 0x9F)) {\r\n                    for (let y4 = y3; y4 >= y2; y4--) {\r\n                        added.push({x : x2, y: y4});\r\n                    }\r\n                }\r\n                else { \r\n                    added.push({x : x2, y: y3 - 1});\r\n                }\r\n\r\n                return {\r\n                    handled : true,\r\n                    added : added,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n        }\r\n\r\n        return {\r\n            handled : true,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n};\r\n\r\nconst HookshotLeftLogic = (props) => {\r\n    let { x, y, x2, y2, NewItems, d, tileTypesArr, tileIDsArr, stateArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, uwID_next } = props;\r\n\r\n    let tileType = tileTypesArr[y2][x2];\r\n    let tileID = tileIDsArr[y2][x2];\r\n    let uwID = GetRoomInfo(x, y, uwIDArr, roomIDArr).uwID;\r\n    \r\n    /* Ledge Can Go Left */\r\n    if ((d === 4) && ([Z4_TILE_PIT, Z4_TILE_LEDGE, Z4_TILE_PITTRANSITION/*, Z4_TILE_SPECIALGRASS*/].includes(tileType))) {\r\n        let isGood = false;\r\n        let hookshotableUW0 = [0x20, 0xA0, 0xA1, 0x6E, 0xD4, 0xC8]; // Rock, chests, donut, sign, taltal heights rock\r\n        let hookshotableUW123 = [0x20, 0xA0, 0xA1, 0xA6, 0xA7]; // Pot, chests, Pushblocks\r\n\r\n        if (!(\r\n            (tileType === Z4_TILE_PIT) ||\r\n            (tileType === Z4_TILE_PITTRANSITION) ||\r\n            // (tileType === Z4_TILE_SPECIALGRASS) ||\r\n            ((uwID_next === 0) && (tileID === 0xF0)) ||\r\n            ((uwID_next !== 0) && (tileID === 0x24)) \r\n        )) {    \r\n            return {\r\n                handled : false,\r\n                hasBlock : false,\r\n            };\r\n        }\r\n\r\n        // if (tileType === Z4_TILE_SPECIALGRASS) {\r\n        //     if (\r\n        //         (!NewItems.sword) ||\r\n        //         (!NewItems.fireRod) ||\r\n        //         (!NewItems.boomerang)\r\n        //     ) {\r\n        //         hasBlock = true;\r\n        //         return {\r\n        //             handled : true,\r\n        //             hasBlock : true,\r\n        //         };\r\n        //     }\r\n        // }\r\n\r\n        for (let x3 = x2 - 1; x3 >= x2 - 7; x3--) {\r\n\r\n            if (!TileInSameRoom(x, y, x3, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n\r\n            let tileID2 = tileIDsArr[y2][x3];\r\n            let tileType2 = tileTypesArr[y2][x3];\r\n\r\n            let state3 = stateArr[y2][x3 + 1];\r\n            let tileType3 = tileTypesArr[y2][x3 + 1];\r\n\r\n            if ((uwID === 0) && hookshotableUW0.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else if ((uwID !== 0) && hookshotableUW123.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else {\r\n                if ([Z4_TILE_SOLID, Z4_TILE_PUSHABLEBLOCK].includes(tileType2)) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n            }\r\n            \r\n            if (isGood) {\r\n                if (state3 !== 0) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n\r\n                if (!NewItems.hookshot) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : true,\r\n                        blockedReason : \"Hookshot\",\r\n                        blockedItems : [LA_HOOKSHOT],\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    handled : true,\r\n                    added : [{x : x3 + 1, y: y2}],\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n        }\r\n\r\n        return {\r\n            handled : true,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n};\r\n\r\nconst HookshotRightLogic = (props) => {\r\n    let { x, y, x2, y2, NewItems, d, tileTypesArr, tileIDsArr, stateArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, uwID_next } = props;\r\n\r\n    let tileType = tileTypesArr[y2][x2];\r\n    let tileID = tileIDsArr[y2][x2];\r\n    let uwID = GetRoomInfo(x, y, uwIDArr, roomIDArr).uwID;\r\n    \r\n    /* Ledge Can Go Right */\r\n    if ((d === 2) && ([Z4_TILE_PIT, Z4_TILE_LEDGE, Z4_TILE_PITTRANSITION/*, Z4_TILE_SPECIALGRASS*/].includes(tileType))) {\r\n        let isGood = false;\r\n        let hookshotableUW0 = [0x20, 0xA0, 0xA1, 0x6E, 0xD4, 0xC8]; // Rock, chests, donut, sign, taltal heights rock\r\n        let hookshotableUW123 = [0x20, 0xA0, 0xA1, 0xA6, 0xA7]; // Pot, chests, Pushblocks\r\n\r\n        if (!(\r\n            (tileType === Z4_TILE_PIT) ||\r\n            (tileType === Z4_TILE_PITTRANSITION) ||\r\n            // (tileType === Z4_TILE_SPECIALGRASS) ||\r\n            ((uwID_next === 0) && (tileID === 0xF3)) ||\r\n            ((uwID_next !== 0) && (tileID === 0x23)) \r\n        )) {    \r\n            return {\r\n                handled : false,\r\n                hasBlock : false,\r\n            };\r\n        }\r\n\r\n        // if (tileType === Z4_TILE_SPECIALGRASS) {\r\n        //     if (\r\n        //         (!NewItems.sword) ||\r\n        //         (!NewItems.fireRod) ||\r\n        //         (!NewItems.boomerang)\r\n        //     ) {\r\n        //         hasBlock = true;\r\n        //         return {\r\n        //             handled : true,\r\n        //             hasBlock : true,\r\n        //         };\r\n        //     }\r\n        // }\r\n\r\n        for (let x3 = x2 + 1; x3 <= x2 + 7; x3++) {\r\n\r\n            if (!TileInSameRoom(x, y, x3, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n\r\n            let tileID2 = tileIDsArr[y2][x3];\r\n            let tileType2 = tileTypesArr[y2][x3];\r\n\r\n            let state3 = stateArr[y2][x3 - 1];\r\n            let tileType3 = tileTypesArr[y2][x3 - 1];\r\n            if ((uwID === 0) && hookshotableUW0.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else if ((uwID !== 0) && hookshotableUW123.includes(tileID2) && (tileType3 === Z4_TILE_TRANS)) {\r\n                isGood = true;\r\n            }\r\n            else {\r\n                if ([Z4_TILE_SOLID, Z4_TILE_PUSHABLEBLOCK].includes(tileType2)) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n            }\r\n            \r\n            if (isGood) {\r\n                if (state3 !== 0) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : false,\r\n                    };\r\n                }\r\n\r\n                if (!NewItems.hookshot) {\r\n                    return {\r\n                        handled : true,\r\n                        hasBlock : true,\r\n                        blockedReason : \"Hookshot\",\r\n                        blockedItems : [LA_HOOKSHOT],\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    handled : true,\r\n                    added : [{x : x3 - 1, y: y2}],\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n        }\r\n\r\n        return {\r\n            handled : true,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n};\r\n","import { TileInSameRoom, DoesPlayerHaveItem } from \"../../other/utilities\";\r\nimport { \r\n    Z4_BOARD_STATE_COMPLETE,\r\n    LA_SPRITES_IMPASSABLE_SET,\r\n    LA_SPRITE_Octorock,\r\n    LA_SPRITE_Moblin,\r\n    LA_SPRITE_Tektite,\r\n    LA_SPRITE_Leever,\r\n    LA_SPRITE_Armos,\r\n    LA_SPRITE_SEAORCHIN,\r\n    LA_SPRITE_LIKELIKE,\r\n    LA_SPRITE_SHARK1,\r\n    LA_SPRITE_SMALL_REDGEL,\r\n    LA_SPRITE_HARDHATBETTLE,\r\n    LA_SPRITE_KEESE,\r\n    LA_SPRITE_STALFOS_RUNAWAY,\r\n    LA_SPRITE_GREENGEL_HIDDEN,\r\n    LA_SPRITE_REDGEL,\r\n    LA_SPRITE_CRAB,\r\n    LA_SPRITE_MOBLIN_SWORD,\r\n    LA_SPRITE_GHOST,\r\n    LA_SPRITE_KINGMOBLIN,\r\n    LA_SPRITE_BUZZBLOB,\r\n    LA_SPRITE_MINIMOLDORM,\r\n    LA_SPRITE_DECKOFCARDS,\r\n    LA_SPRITE_SPIKEYBETTLE,\r\n    LA_SPRITE_STALFOS2,\r\n    LA_SPRITE_POWDERONWINGS,\r\n    LA_SPRITE_TRACKINGGHOST,\r\n    LA_SPRITE_POLSVOICE,\r\n    LA_SPRITE_COLOR_SLIME1,\r\n    LA_SPRITE_COLOR_SLIME2,\r\n    LA_SPRITE_COLOR_SLIME3,\r\n    LA_SPRITE_SOLDIERINWALL,\r\n    LA_SPRITE_COLOR_ORB_GREEN,\r\n    LA_SPRITE_COLOR_ORB_RED,\r\n    LA_SPRITE_COLOR_ORB_GOLD,\r\n    LA_SPRITE_COLOR_GOLEM,\r\n    LA_SPRITE_COLOR_BOSS,\r\n    LA_SPRITE_BOMB_ENEMY,\r\n    LA_SPRITE_BOMB_STALKER_ENEMY,\r\n    LA_SPRITE_PARIODD,\r\n    LA_SPRITE_CACTUS_ENEMY,\r\n    LA_SPRITE_WATER_TEKTITE,\r\n    LA_SPRITE_PEAHAT,\r\n    LA_SPRITE_ROPE,\r\n    LA_SPRITE_VIRE,\r\n    LA_SPRITE_GIBDO,\r\n    LA_SPRITE_STAFLOS_THROWER,\r\n    LA_SPRITE_STAR_ENEMY,\r\n    LA_SPRITE_WIZZROBE,\r\n    LA_SPRITE_ANTIKIRBY,\r\n    LA_SPRITE_GOOMBA,\r\n    LA_SPRITE_SWAMP_FLOWER_L,\r\n    LA_SPRITE_SWAMP_FLOWER_S,\r\n    LA_SPRITE_MADBOMBER,\r\n    LA_SPRITE_BALLANDCHAINTROOPER,\r\n    LA_SPRITE_FLAMETHROWER,\r\n    LA_SPRITE_CROW,\r\n    LA_SPRITE_ANTIVACUUM,\r\n    LA_SPRITE_ARMMIMIC,\r\n    LA_SPRITE_D1_BOSS,\r\n    LA_SPRITE_D2_BOSS,\r\n    LA_SPRITE_D3_BOSS,\r\n    LA_SPRITE_D4_BOSS,\r\n    LA_SPRITE_D5_BOSS,\r\n    LA_SPRITE_D6_BOSS,\r\n    LA_SPRITE_D7_BOSS,\r\n    LA_SPRITE_D8_BOSS,\r\n    LA_SPRITE_D9_BOSS,\r\n    LA_SPRITE_COLOR_BUZZBLOB_BOSS,\r\n    LA_SPRITE_D1_MINIBOSS,\r\n    LA_SPRITE_D1_MINIBOSS2,\r\n    LA_SPRITE_D2_MINIBOSS,\r\n    LA_SPRITE_D3_MINIBOSS,\r\n    LA_SPRITE_D4_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS,\r\n    LA_SPRITE_D5_MINIBOSS2,\r\n    LA_SPRITE_D6_MINIBOSS,\r\n    LA_SPRITE_D7_MINIBOSS,\r\n    LA_SPRITE_D8_MINIBOSS,\r\n    LA_SPRITE_LANMOLA,\r\n    LA_SPRITE_ARMOSMINIBOSS,\r\n    LA_SPRITE_TURTLE_ROCK_SNAKE,\r\n    LA_SPRITE_MOTHERWITHBABY,\r\n    LA_SPRITE_MINI_BOWWOW_NPC,\r\n    LA_SPRITE_CROCODILE_NPC,\r\n    LA_SPRITE_KIKITHEMONKEY_NPC,\r\n    LA_SPRITE_TARINWITHBEES,\r\n    LA_SPRITE_BEARCHEF,\r\n    LA_SPRITE_PAPAHL,\r\n    LA_SPRITE_CHRISTINEANDWRITE,\r\n    LA_SPRITE_GRANDMA,\r\n    LA_SPRITE_FISHERMAN,\r\n    LA_SPRITE_MERMAID,\r\n    LA_SPRITE_MERMAIDSTATUE,\r\n    LA_SPRITE_MAGNIFYINGLENS,\r\n    LA_SPRITE_TARIN,\r\n    LA_SPRITE_RICHARD,\r\n    LA_SPRITE_MARIN,\r\n    LA_SPRITE_MAMBO,\r\n    LA_SPRITE_MAMU,\r\n    LA_SPRITE_WITCH,\r\n    LA_SPRITE_TRENDY_NPC,\r\n    LA_SPRITE_SHOP_NPC,\r\n    LA_SPRITE_WALRUS,\r\n    LA_SPRITE_MADAMMEOWMEOW,\r\n    LA_SPRITE_BOWWOW,\r\n    LA_SPRITE_BEACHMARIN,\r\n    LA_SPRITE_NPC_MOBLIN,\r\n    LA_SPRITE_SPRITE_SWORD,\r\n    LA_SPRITE_SLIME_KEY_HIDDEN,\r\n    LA_SPRITE_INSTRUMENT,\r\n    LA_SPRITE_HEART_PIECE,\r\n    LA_SPRITE_BOMB_HIDDEN,\r\n    LA_SPRITE_POWDER_HIDDEN,\r\n    LA_SPRITE_KEY,\r\n    LA_SPRITE_MUSHROOM,\r\n    LA_SPRITE_ELEPHANTSTATUE,\r\n    LA_SPRITE_ROOSTERSTATUE,\r\n    LA_SPRITE_RAFT,\r\n    LA_SPRITE_EYE_BLOCK,\r\n    LA_SPRITE_CRYSTAL_ORB,\r\n    LA_SPRITE_DUNGEONOWLSTATUE,\r\n    LA_SPRITE_D7PILLAR,\r\n    LA_SPRITE_SEASHELL_HIDDEN,\r\n    LA_SPRITE_MADBATTERWELL,\r\n    LA_SPRITE_COLOR_SPINNER_RED,\r\n    LA_SPRITE_COLOR_SPINNER_BLUE,\r\n    LA_SPRITE_COLOR_SPINNER_GOLD,\r\n    LA_SPRITE_PULL_LEVER,\r\n    LA_SPRITE_HORSEHEAD,\r\n    LA_SPRITE_MD_POT,\r\n    LA_SPRITE_MD_TWOMP,\r\n    LA_SPRITE_MD_LR_PLATFORM,\r\n    LA_SPRITE_MD_UD_PLATFORM,\r\n    LA_SPRITE_MD_POT_PLATFORM,\r\n    LA_SPRITE_MD_Plant,\r\n    LA_SPRITE_MD_BIGFALLBLOCK,\r\n    LA_SPRITE_MD_FISH1,\r\n    LA_SPRITE_MD_FISH2,\r\n    LA_SPRITE_MD_FISH3,\r\n    LA_SPRITE_MD_WEIGHT,\r\n    LA_SPRITE_MD_JELLYFISH,\r\n    LA_SPRITE_CUCCO,\r\n    LA_SPRITE_HEART_HIDDEN,\r\n    LA_SPRITE_RUPEE_HIDDEN,\r\n    LA_SPRITE_BUTTERFLY,\r\n    LA_SPRITE_TELEPHONE,\r\n    LA_SPRITE_FAIRY_HIDDEN,\r\n    LA_SPRITE_BOOK,\r\n    LA_SPRITE_NPC_KID1,\r\n    LA_SPRITE_NPC_KID2,\r\n    LA_SPRITE_NPC_KID3,\r\n    LA_SPRITE_NPC_KID4,\r\n    LA_SPRITE_NPC_FISHINGGAME,\r\n    LA_SPRITE_TORCH_FIREBALLER,\r\n    LA_SPRITE_OWL,\r\n    LA_SPRITE_GRANDPA,\r\n    LA_SPRITE_GRAVEGHOST,\r\n    LA_SPRITE_MOUSE,\r\n    LA_SPRITE_TRAP,\r\n    LA_SPRITE_DUNGEONWARP,\r\n    LA_SPRITE_CAT,\r\n    LA_SPRITE_ZORA,\r\n    LA_SPRITE_RAT,\r\n    LA_SPRITE_Spark1,\r\n    LA_SPRITE_Spark2,\r\n    LA_SPRITE_HEARTONWINGS,\r\n    LA_SPRITE_BIRD,\r\n    LA_SPRITE_GRAVEGHOSTBIG,\r\n    LA_SPRITE_PINCERFROMPIT,\r\n    LA_SPRITE_OCTOROKONWINGS,\r\n    LA_SPRITE_SPIDERSFROMPIT,\r\n    LA_SPRITE_DREAMBED,\r\n    LA_SPRITE_HONEYCOMB,\r\n    LA_SPRITE_SIGNMAZEEVENT,\r\n    LA_SPRITE_RICHARDFROG,\r\n    LA_SPRITE_TREE_NPC,\r\n    LA_SPRITE_FLYINGBOMBDROPPER,\r\n    LA_SPRITE_SPAWNZOMBIEEVENT,\r\n    LA_SPRITE_CRAZYTRACY,\r\n    LA_SPRITE_GHOST_NPC_GRAVE,\r\n    LA_SPRITE_CRABINROCK,\r\n    LA_SPRITE_SKELETON_NPC_BLUE,\r\n    LA_SPRITE_SKELETON_NPC_RED,\r\n    LA_SPRITE_COLOR_FLYING_BOMBER,\r\n    LA_SPRITE_COLOR_HOPPER,\r\n    LA_SPRITE_CASTLEGATE_EVENT,\r\n    LA_SPRITE_ANTIFAIRY,\r\n    LA_SPRITE_BUNNY_NPC,\r\n    LA_SPRITE_BUNNY_LISTENING_NPC,\r\n    LA_SPRITE_BEAR_LISTENING_NPC,\r\n    LA_SPRITE_CROW_LISTENING_NPC,\r\n    LA_SPRITE_DIVEINWATER_EVENT,\r\n    LA_SPRITE_ARROW_HIDDEN,\r\n    LA_SPRITE_BEAMOS,\r\n    LA_SPRITE_BLOCK_VERTICAL1,\r\n    LA_SPRITE_BLOCK_VERTICAL2,\r\n    LA_SPRITE_BLOCK_HORIZONTAL1,\r\n    LA_SPRITE_BLOCK_HORIZONTAL2,\r\n    LA_SPRITE_TOUCHTILES_EVENT1,\r\n    LA_SPRITE_TOUCHTILES_EVENT2,\r\n    LA_SPRITE_MARINTALTALHEIGHTS,\r\n    LA_SPRITE_RAISINGTILES_EVENT,\r\n    LA_SPRITE_VACUUM,\r\n    LA_SPRITE_MD_Fireball,\r\n    LA_SPRITE_MD_GiantSpark,\r\n    LA_SPRITE_MD_SmallTwomp,\r\n    Z4_TILE_PIT,\r\n\r\n    LA_POWERBRACLET,\r\n    LA_MIRRORSHIELD,\r\n    LA_BOW,  \r\n    LA_HOOKSHOT,\r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_OCARINA,\r\n    LA_FEATHER,\r\n    LA_SHOVEL,\r\n    LA_POWDER,\r\n    LA_BOMB,\r\n    LA_SWORDv0,\r\n    // LA_FLIPPERS,\r\n    // LA_TRADINGITEM,\r\n    // LA_FakeSword1,\r\n    // LA_FakeSword2,\r\n    // LA_Mecidine,\r\n    // LA_TailKey,\r\n    // LA_AngularKey,\r\n    // LA_FaceKey,\r\n    // LA_BirdKey,\r\n    LA_GoldenLeaf,\r\n    // LA_Map,\r\n    // LA_Compass,\r\n    // LA_OwlBeak,\r\n    // LA_NightmareKey,\r\n    // LA_SmallKey,\r\n    LA_50Rupees,\r\n    LA_20Rupees,\r\n    LA_100Rupees,\r\n    LA_200Rupees,\r\n    // LA_500Rupees,\r\n    // LA_SeaShell,\r\n    // LA_HookshotNote,\r\n    // LA_Gel,\r\n    LA_SONG1,\r\n    // LA_SONG2,\r\n    LA_SONG3,\r\n    LA_BOOMERANG,\r\n} from \"../../other/uConstants\";\r\nimport { AddChestContent2 } from \"./ChestLogic\";\r\nimport { GetSpriteInfoFromRoom, IntToHex } from \"../../other/utilities\"\r\n\r\nexport const SpriteLogic = (props) => {\r\n    let { x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr, spriteStateArr, uwID_next, roomID_next, spriteID_next, spriteState_next } = props;\r\n\r\n    let result;\r\n\r\n    /* Must be in the same room */\r\n    if (!TileInSameRoom(x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    /* Must be a sprite */\r\n    if ((typeof spriteID_next === 'undefined') || (spriteID_next === null)) {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n\r\n    /* Must not be completed already */\r\n    if (spriteState_next === Z4_BOARD_STATE_COMPLETE) {\r\n        return {\r\n            handled : true,\r\n            hasBlock : false,\r\n            allow : !LA_SPRITES_IMPASSABLE_SET.includes(spriteID_next),\r\n        };\r\n    }\r\n\r\n    /* Debug - Block every sprite */\r\n    // return {\r\n    //     handled : true,\r\n    //     hasBlock : true,\r\n    // }\r\n  \r\n    switch (spriteID_next) {\r\n        /* Enemies */\r\n        case LA_SPRITE_Octorock            : result = HandleOctorock(props); break;\r\n        case LA_SPRITE_Moblin              : result = HandleMoblin(props); break;\r\n        case LA_SPRITE_Tektite             : result = HandleTektite(props); break;\r\n        case LA_SPRITE_Leever              : result = HandleLeever(props); break;\r\n        case LA_SPRITE_Armos               : result = HandleArmos(props); break;\r\n        case LA_SPRITE_SEAORCHIN           : result = HandleSeaOrchin(props); break;\r\n        case LA_SPRITE_LIKELIKE            : result = HandleLikeLike(props); break;\r\n        case LA_SPRITE_SHARK1              : result = HandleShark(props); break;\r\n        case LA_SPRITE_SMALL_REDGEL        : result = HandleSmallRedGel(props); break;\r\n        case LA_SPRITE_HARDHATBETTLE       : result = HandleHardHatBettle(props); break;\r\n        case LA_SPRITE_KEESE               : result = HandleKeese(props); break;\r\n        case LA_SPRITE_STALFOS_RUNAWAY     : result = HandleStalfosRunAway(props); break;\r\n        case LA_SPRITE_GREENGEL_HIDDEN     : result = HandleGreenGelHidden(props); break;\r\n        case LA_SPRITE_REDGEL              : result = HandleRedGel(props); break;\r\n        case LA_SPRITE_CRAB                : result = HandleCrab(props); break;\r\n        case LA_SPRITE_MOBLIN_SWORD        : result = HandleMoblinSword(props); break;\r\n        case LA_SPRITE_GHOST               : result = HandleGhost(props); break;\r\n        case LA_SPRITE_KINGMOBLIN          : result = HandleKingMoblin(props); break;\r\n        case LA_SPRITE_BUZZBLOB            : result = HandleBuzzBlob(props); break;\r\n        case LA_SPRITE_MINIMOLDORM         : result = HandleMiniMoldorm(props); break;\r\n        case LA_SPRITE_DECKOFCARDS         : result = HandleDeckOfCards(props); break;\r\n        case LA_SPRITE_SPIKEYBETTLE        : result = HandleSpikeyBeetle(props); break;\r\n        case LA_SPRITE_STALFOS2            : result = HandleStalfos2(props); break;\r\n        case LA_SPRITE_POWDERONWINGS       : result = HandlePowderOnWings(props); break;\r\n        case LA_SPRITE_TRACKINGGHOST       : result = HandleTrackingGhost(props); break;\r\n        case LA_SPRITE_POLSVOICE           : result = HandlePolsVoice(props); break;\r\n        case LA_SPRITE_COLOR_SLIME1        : result = HandleColorSlime1(props); break;\r\n        case LA_SPRITE_COLOR_SLIME2        : result = HandleColorSlime2(props); break;\r\n        case LA_SPRITE_COLOR_SLIME3        : result = HandleColorSlime3(props); break;\r\n        case LA_SPRITE_SOLDIERINWALL       : result = HandleSoldierInWall(props); break;\r\n        case LA_SPRITE_COLOR_ORB_GREEN     : result = HandleColorOrbGreen(props); break;\r\n        case LA_SPRITE_COLOR_ORB_RED       : result = HandleColorOrbRed(props); break;\r\n        case LA_SPRITE_COLOR_ORB_GOLD      : result = HandleColorOrbGold(props); break;\r\n        case LA_SPRITE_COLOR_GOLEM         : result = HandleColorGolem(props); break;\r\n        case LA_SPRITE_COLOR_BOSS          : result = HandleColorBoss(props); break;\r\n        case LA_SPRITE_BOMB_ENEMY          : result = HandleBombEnemy(props); break;\r\n        case LA_SPRITE_BOMB_STALKER_ENEMY  : result = HandleBombStalkerEnemy(props); break;\r\n        case LA_SPRITE_PARIODD             : result = HandlePariodd(props); break;\r\n        case LA_SPRITE_CACTUS_ENEMY        : result = HandleCactusEnemy(props); break;\r\n        case LA_SPRITE_WATER_TEKTITE       : result = HandleWaterTekTite(props); break;\r\n        case LA_SPRITE_PEAHAT              : result = HandlePeaHat(props); break;\r\n        case LA_SPRITE_ROPE                : result = HandleRope(props); break;\r\n        case LA_SPRITE_VIRE                : result = HandleVire(props); break;\r\n        case LA_SPRITE_GIBDO               : result = HandleGibdo(props); break;\r\n        case LA_SPRITE_STAFLOS_THROWER     : result = HandleStalfosThrower(props); break;\r\n        case LA_SPRITE_STAR_ENEMY          : result = HandleStarEnemy(props); break;\r\n        case LA_SPRITE_WIZZROBE            : result = HandleWizzRobe(props); break;\r\n        case LA_SPRITE_ANTIKIRBY           : result = HandleAntiKirby(props); break;\r\n        case LA_SPRITE_GOOMBA              : result = HandleGoomba(props); break;\r\n        case LA_SPRITE_SWAMP_FLOWER_L      : result = HandleSwampFlower_L(props); break;\r\n        case LA_SPRITE_SWAMP_FLOWER_S      : result = HandleSwampFlower_S(props); break;\r\n\r\n        case LA_SPRITE_MADBOMBER           : result = HandleMadBomber(props); break;\r\n        case LA_SPRITE_BALLANDCHAINTROOPER : result = HandleBallAndChainTrooper(props); break;\r\n        case LA_SPRITE_FLAMETHROWER        : result = HandleFlameThrower(props); break;\r\n        case LA_SPRITE_CROW                : result = HandleCrow(props); break;\r\n        case LA_SPRITE_ANTIVACUUM          : result = HandleAntiVacuum(props); break;\r\n        case LA_SPRITE_ARMMIMIC            : result = HandleArmMimic(props); break;\r\n\r\n        /* Bosses */\r\n        case LA_SPRITE_D1_BOSS             : result = HandleMoldormBoss(props); break;\r\n        case LA_SPRITE_D2_BOSS             : result = HandleGenieBoss(props); break;\r\n        case LA_SPRITE_D3_BOSS             : result = HandleSlimeEyeBoss(props); break;\r\n        case LA_SPRITE_D4_BOSS             : result = HandleFishBoss(props); break;\r\n        case LA_SPRITE_D5_BOSS             : result = HandleSlimeEelBoss(props); break;\r\n        case LA_SPRITE_D6_BOSS             : result = HandleFacadeBoss(props); break;\r\n        case LA_SPRITE_D7_BOSS             : result = HandleEvilEagleBoss(props); break;\r\n        case LA_SPRITE_D8_BOSS             : result = HandleHotHeadBoss(props); break;\r\n        case LA_SPRITE_D9_BOSS             : result = HandleDeathlBoss(props); break;\r\n        case LA_SPRITE_COLOR_BUZZBLOB_BOSS : result = HandleColorBuzzBlobBoss(props); break;\r\n\r\n        /* Minibosses */\r\n        // case LA_SPRITE_DUNGEONWARP         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D1_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D1_MINIBOSS2        : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D2_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D3_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D4_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D5_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D5_MINIBOSS2        : result = HandleMasterStalfos(props); break;\r\n        case LA_SPRITE_D6_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D7_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n        case LA_SPRITE_D8_MINIBOSS         : result = HandleMiniBoss(props); break;\r\n\r\n        /* Other bosses */\r\n        case LA_SPRITE_LANMOLA             : result = HandleLanmola(props); break;\r\n        case LA_SPRITE_ARMOSMINIBOSS       : result = HandleArmosMiniboss(props); break;\r\n        case LA_SPRITE_TURTLE_ROCK_SNAKE   : result = HandleTurtleRockSnake(props); break;\r\n\r\n        /* Trading squence NPCs */\r\n        case LA_SPRITE_MOTHERWITHBABY      : result = HandleMotherWithBaby(props); break;\r\n        case LA_SPRITE_MINI_BOWWOW_NPC     : result = HandleMiniBowwow(props); break;\r\n        case LA_SPRITE_CROCODILE_NPC       : result = HandleCrocodile(props); break;\r\n        case LA_SPRITE_KIKITHEMONKEY_NPC   : result = HandleKikiTheMonkey(props); break;\r\n        case LA_SPRITE_TARINWITHBEES       : result = HandleTarinWithBees(props); break;\r\n        case LA_SPRITE_BEARCHEF            : result = HandleBearChef(props); break;\r\n        case LA_SPRITE_PAPAHL              : result = HandlePapahl(props); break;\r\n        case LA_SPRITE_CHRISTINEANDWRITE   : result = HandleChristineAndMrWrite(props); break;\r\n        case LA_SPRITE_GRANDMA             : result = HandleGrandma(props); break;\r\n        case LA_SPRITE_FISHERMAN           : result = HandleFisherMan(props); break;\r\n        case LA_SPRITE_MERMAID             : result = HandleMermaid(props); break;\r\n        case LA_SPRITE_MERMAIDSTATUE       : result = HandleMermaidStatue(props); break;\r\n        case LA_SPRITE_MAGNIFYINGLENS      : result = HandleMagnifyingLens(props); break;\r\n\r\n        /* NPCs */\r\n        case LA_SPRITE_TARIN               : result = HandleTarin(props); break;\r\n        case LA_SPRITE_RICHARD             : result = HandleRichard(props); break;\r\n        case LA_SPRITE_MARIN               : result = HandleMarin(props); break;\r\n        case LA_SPRITE_MAMBO               : result = HandleMambo(props); break;\r\n        case LA_SPRITE_MAMU                : result = HandleMamu(props); break;\r\n        case LA_SPRITE_WITCH               : result = HandleWitch(props); break;\r\n        case LA_SPRITE_TRENDY_NPC          : result = HandleTrendyNPC(props); break;\r\n        case LA_SPRITE_SHOP_NPC            : result = HandleShopNPC(props); break;\r\n        case LA_SPRITE_WALRUS              : result = HandleWalrus(props); break;\r\n        case LA_SPRITE_MADAMMEOWMEOW       : result = HandleMadamMeowMeow(props); break;\r\n        case LA_SPRITE_BOWWOW              : result = HandleBowwow(props); break;\r\n        case LA_SPRITE_BEACHMARIN          : result = HandleBeachMarin(props); break;\r\n        case LA_SPRITE_NPC_MOBLIN          : result = HandleNPCMoblin(props); break;\r\n\r\n        /* Items */\r\n        case LA_SPRITE_SPRITE_SWORD        : result = HandleSword(props); break;\r\n        case LA_SPRITE_SLIME_KEY_HIDDEN    : result = HandleSlimeKeyHidden(props); break;\r\n        case LA_SPRITE_INSTRUMENT          : result = HandleInstrument(props); break;\r\n        case LA_SPRITE_HEART_PIECE         : result = HandleHeartPiece(props); break;\r\n        case LA_SPRITE_BOMB_HIDDEN         : result = HandleBombHidden(props); break;\r\n        case LA_SPRITE_POWDER_HIDDEN       : result = HandlePowderHidden(props); break;\r\n        case LA_SPRITE_KEY                 : result = HandleKey(props); break;\r\n        case LA_SPRITE_MUSHROOM            : result = HandleMushroom(props); break;\r\n\r\n        /* Interactables */\r\n        case LA_SPRITE_ELEPHANTSTATUE      : result = HandleElephantStatue(props); break;\r\n        case LA_SPRITE_ROOSTERSTATUE       : result = HandleRoosterStatueAndSkeleton(props); break;\r\n        case LA_SPRITE_RAFT                : result = HandleRaft(props); break;\r\n        case LA_SPRITE_EYE_BLOCK           : result = HandleEyeBlock(props); break;\r\n        case LA_SPRITE_CRYSTAL_ORB         : result = HandleCrystalOrb(props); break;\r\n        case LA_SPRITE_DUNGEONOWLSTATUE    : result = HandleDungeonOwlStatus(props); break;\r\n        case LA_SPRITE_D7PILLAR            : result = HandleD7Pillar(props); break;\r\n        case LA_SPRITE_SEASHELL_HIDDEN     : result = HandleSeashellHidden(props); break;\r\n        case LA_SPRITE_MADBATTERWELL       : result = HandleMadBatterWell(props); break;\r\n        case LA_SPRITE_COLOR_SPINNER_RED   : result = HandleColorSpinnerRed(props); break;\r\n        case LA_SPRITE_COLOR_SPINNER_BLUE  : result = HandleColorSpinnerBlue(props); break;\r\n        case LA_SPRITE_COLOR_SPINNER_GOLD  : result = HandleColorSpinnerGold(props); break;\r\n        case LA_SPRITE_PULL_LEVER          : result = HandlePullLever(props); break;\r\n        case LA_SPRITE_HORSEHEAD           : result = HandleHorseHead(props); break;\r\n\r\n        /* Minidugeon only */\r\n        case LA_SPRITE_MD_POT              : result = HandlePot(props); break;\r\n        case LA_SPRITE_MD_TWOMP            : result = HandleTwomp(props); break;\r\n        case LA_SPRITE_MD_LR_PLATFORM      : result = HandleLeftRightPlatform(props); break;\r\n        case LA_SPRITE_MD_UD_PLATFORM      : result = HandleUpDownPlatform(props); break;\r\n        case LA_SPRITE_MD_POT_PLATFORM     : result = HandlePotPlatform(props); break;\r\n        case LA_SPRITE_MD_Plant            : result = HandlePlant(props); break;\r\n        case LA_SPRITE_MD_BIGFALLBLOCK     : result = HandleTwomp2(props); break;\r\n        case LA_SPRITE_MD_FISH1            : result = HandleFish1(props); break;\r\n        case LA_SPRITE_MD_FISH2            : result = HandleFish2(props); break;\r\n        case LA_SPRITE_MD_FISH3            : result = HandleFish3(props); break;\r\n        case LA_SPRITE_MD_WEIGHT           : result = HandleWeight(props); break;\r\n        case LA_SPRITE_MD_JELLYFISH        : result = HandleJellyFish(props); break;\r\n\r\n        /* Nothing */\r\n        case LA_SPRITE_CUCCO               : result = HandleNothing(props); break;\r\n        case LA_SPRITE_HEART_HIDDEN        : result = HandleNothing(props); break;\r\n        case LA_SPRITE_RUPEE_HIDDEN        : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BUTTERFLY           : result = HandleNothing(props); break;\r\n        case LA_SPRITE_TELEPHONE           : result = HandleNothing(props); break;\r\n        case LA_SPRITE_FAIRY_HIDDEN        : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BOOK                : result = HandleNothing(props); break;\r\n        case LA_SPRITE_NPC_KID1            : result = HandleNothing(props); break;\r\n        case LA_SPRITE_NPC_KID2            : result = HandleNothing(props); break;\r\n        case LA_SPRITE_NPC_KID3            : result = HandleNothing(props); break;\r\n        case LA_SPRITE_NPC_KID4            : result = HandleNothing(props); break;\r\n        case LA_SPRITE_NPC_FISHINGGAME     : result = HandleNothing(props); break;\r\n        case LA_SPRITE_TORCH_FIREBALLER    : result = HandleNothing(props); break;\r\n        case LA_SPRITE_OWL                 : result = HandleNothing(props); break;\r\n        case LA_SPRITE_GRANDPA             : result = HandleNothing(props); break;\r\n        case LA_SPRITE_GRAVEGHOST          : result = HandleNothing(props); break;\r\n        case LA_SPRITE_MOUSE               : result = HandleNothing(props); break;\r\n        case LA_SPRITE_TRAP                : result = HandleNothing(props); break;\r\n        case LA_SPRITE_DUNGEONWARP         : result = HandleNothing(props); break;\r\n        case LA_SPRITE_CAT                 : result = HandleNothing(props); break;\r\n        case LA_SPRITE_ZORA                : result = HandleNothing(props); break;\r\n        case LA_SPRITE_RAT                 : result = HandleNothing(props); break;\r\n        case LA_SPRITE_Spark1              : result = HandleNothing(props); break;\r\n        case LA_SPRITE_Spark2              : result = HandleNothing(props); break;\r\n        case LA_SPRITE_HEARTONWINGS        : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BIRD                : result = HandleNothing(props); break;\r\n        case LA_SPRITE_GRAVEGHOSTBIG       : result = HandleNothing(props); break;\r\n        case LA_SPRITE_PINCERFROMPIT       : result = HandleNothing(props); break;\r\n        case LA_SPRITE_OCTOROKONWINGS      : result = HandleNothing(props); break;\r\n        case LA_SPRITE_SPIDERSFROMPIT      : result = HandleNothing(props); break;\r\n        case LA_SPRITE_DREAMBED            : result = HandleNothing(props); break;\r\n        case LA_SPRITE_HONEYCOMB           : result = HandleNothing(props); break;\r\n        case LA_SPRITE_SIGNMAZEEVENT       : result = HandleNothing(props); break;\r\n        case LA_SPRITE_RICHARDFROG         : result = HandleNothing(props); break;\r\n        case LA_SPRITE_TREE_NPC            : result = HandleNothing(props); break;\r\n        case LA_SPRITE_FLYINGBOMBDROPPER   : result = HandleNothing(props); break;\r\n        case LA_SPRITE_SPAWNZOMBIEEVENT    : result = HandleNothing(props); break;\r\n        case LA_SPRITE_CRAZYTRACY          : result = HandleNothing(props); break;\r\n        case LA_SPRITE_GHOST_NPC_GRAVE     : result = HandleNothing(props); break;\r\n        case LA_SPRITE_CRABINROCK          : result = HandleNothing(props); break;\r\n        case LA_SPRITE_SKELETON_NPC_BLUE   : result = HandleNothing(props); break;\r\n        case LA_SPRITE_SKELETON_NPC_RED    : result = HandleNothing(props); break;\r\n        case LA_SPRITE_COLOR_FLYING_BOMBER : result = HandleNothing(props); break;\r\n        case LA_SPRITE_COLOR_HOPPER        : result = HandleNothing(props); break;\r\n        case LA_SPRITE_CASTLEGATE_EVENT    : result = HandleNothing(props); break;\r\n        case LA_SPRITE_ANTIFAIRY           : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BUNNY_NPC           : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BUNNY_LISTENING_NPC : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BEAR_LISTENING_NPC  : result = HandleNothing(props); break;\r\n        case LA_SPRITE_CROW_LISTENING_NPC  : result = HandleNothing(props); break;\r\n        case LA_SPRITE_DIVEINWATER_EVENT   : result = HandleNothing(props); break;\r\n        case LA_SPRITE_ARROW_HIDDEN        : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BEAMOS              : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BLOCK_VERTICAL1     : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BLOCK_VERTICAL2     : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BLOCK_HORIZONTAL1   : result = HandleNothing(props); break;\r\n        case LA_SPRITE_BLOCK_HORIZONTAL2   : result = HandleNothing(props); break;\r\n        case LA_SPRITE_TOUCHTILES_EVENT1   : result = HandleNothing(props); break;\r\n        case LA_SPRITE_TOUCHTILES_EVENT2   : result = HandleNothing(props); break;\r\n        case LA_SPRITE_MARINTALTALHEIGHTS  : result = HandleNothing(props); break;\r\n        case LA_SPRITE_RAISINGTILES_EVENT  : result = HandleNothing(props); break;\r\n        case LA_SPRITE_VACUUM              : result = HandleNothing(props); break;\r\n        case LA_SPRITE_MD_Fireball         : result = HandleNothing(props); break;\r\n        case LA_SPRITE_MD_GiantSpark       : result = HandleNothing(props); break;\r\n        case LA_SPRITE_MD_SmallTwomp       : result = HandleNothing(props); break;\r\n\r\n        default : \r\n            result = {\r\n                hasBlock : true,\r\n                blockedReason : \"NewSprite\",\r\n            };\r\n            console.log(\r\n                '[WARNING] New sprite detected: $' + IntToHex(spriteID_next, 2) + ' at ' +\r\n                'uwID: ' + uwID_next + ', roomID: ' + IntToHex(roomID_next, 2)\r\n            );\r\n    }\r\n\r\n    /* Is the sprite completed? */\r\n    if (!result.hasBlock) {\r\n        spriteStateArr[y2][x2] = 2;\r\n    }\r\n\r\n    // if ((uwID_next === 1) && (roomID_next === 0xFF)) {\r\n    //     debugger;\r\n    // }\r\n\r\n    /* Check if the sprite was in D4 or D7's boss location */\r\n    HandleD4D7Boss(props);\r\n\r\n    return {\r\n        handled : true,\r\n        allow :  (typeof result.allow !== 'undefined') ? result.allow : !LA_SPRITES_IMPASSABLE_SET.includes(spriteID_next),\r\n        hasBlock : result.hasBlock,\r\n        blockedReason : result.blockedReason,\r\n        blockedItems : result.blockedItems,\r\n        added : result.added,\r\n    };\r\n};\r\n\r\nconst HandleNothing = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleD4D7Boss = (props) => {\r\n\r\n    const { uwID_next, roomID_next, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr, NewItems } = props;\r\n\r\n    if ((uwID_next === 1) && (roomID_next === 0xFF)) {\r\n        let arr = GetSpriteInfoFromRoom(uwID_next, roomID_next, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n        let arr2 = arr.filter(o => o.killable);\r\n        if (arr2.length > 0) {\r\n            if (arr2[0].state === Z4_BOARD_STATE_COMPLETE) {\r\n                NewItems.dungeonItems[3].bossKilled++;\r\n            }\r\n        }\r\n    }\r\n\r\n    if ((uwID_next === 2) && (roomID_next === 0xE8)) {\r\n        let arr = GetSpriteInfoFromRoom(uwID_next, roomID_next, maxXSquares, maxYSquares, spritesArr, spriteStateArr, uwIDArr, roomIDArr);\r\n        let arr2 = arr.filter(o => o.killable);\r\n        if (arr2.length > 0) {\r\n            if (arr2[0].state === Z4_BOARD_STATE_COMPLETE) {\r\n                NewItems.dungeonItems[6].bossKilled++;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nconst HandleMoldormBoss = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (NewItems.sword) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Sword\",\r\n        blockedItems : [LA_SWORDv0],\r\n    };\r\n};\r\n\r\nconst HandleGenieBoss = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (\r\n        (NewItems.powerBracelet) &&\r\n        (\r\n            (NewItems.sword) ||\r\n            (NewItems.bomb) ||\r\n            (NewItems.fireRod)\r\n        )\r\n    ) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Genie\",\r\n        blockedItems : [LA_POWERBRACLET, LA_SWORDv0, LA_BOMB, LA_FIREROD],\r\n    };\r\n};\r\n\r\nconst HandleSlimeEyeBoss = (props) => {\r\n    const { uwID_next, NewItems, roomID_next } = props;\r\n\r\n    if (\r\n        (!NewItems.sword) ||\r\n        (!NewItems.boots)\r\n    ) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"SlimeEye\",\r\n            blockedItems : [LA_SWORDv0, LA_BOOTS],\r\n        };\r\n    }\r\n    /* Special case: if D3's boss is in D8's boss location */\r\n    else if ((uwID_next === 2) && (roomID_next === 0x34)) {\r\n        if (!NewItems.feather) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Feather\",\r\n                blockedItems : [LA_FEATHER],\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleFishBoss = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (!(\r\n        (NewItems.sword) ||\r\n        ((NewItems.bow) && (NewItems.bomb)) ||\r\n        (NewItems.fireRod)\r\n    )) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"FishBoss\",\r\n            blockedItems : [LA_SWORDv0, LA_BOW, LA_BOMB, LA_FIREROD],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSlimeEelBoss = (props) => {\r\n    const { uwID_next, NewItems, roomID_next } = props;\r\n\r\n    if (!NewItems.sword) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"SlimeEel\",\r\n            blockedItems : [LA_SWORDv0],\r\n        };\r\n    }    \r\n    \r\n    if (!NewItems.hookshot) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"SlimeEel\",\r\n            blockedItems : [LA_HOOKSHOT],\r\n        };\r\n    }\r\n\r\n    /* Special case: if D5's boss is in D7's boss location */\r\n    else if ((uwID_next === 2) && (roomID_next === 0xE8)) {\r\n        if (!NewItems.feather) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Feather\",\r\n                blockedItems : [LA_FEATHER],\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleFacadeBoss = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    if (!NewItems.bomb) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bomb\",\r\n            blockedItems : [LA_BOMB],\r\n        };\r\n    }\r\n    /* Special case: if D6's boss is in D4's boss location */\r\n    else if ((uwID_next === 1) && (roomID_next === 0xFF)) {\r\n        if (!NewItems.feather) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Feather\",\r\n                blockedItems : [LA_FEATHER],\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    \r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleEvilEagleBoss = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (!(\r\n        ((NewItems.sword) && (NewItems.shield >= 2)) ||\r\n        NewItems.bomb ||\r\n        NewItems.fireRod\r\n    )) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"EvilEagle\",\r\n            blockedItems : [LA_SWORDv0, LA_MIRRORSHIELD, LA_BOMB, LA_FEATHER],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleHotHeadBoss = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    if (!NewItems.fireRod) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Firerod\",\r\n            blockedItems : [LA_FIREROD],\r\n        };\r\n    }\r\n    /*Special case: if D8's boss is in D7's boss location */\r\n    else if ((uwID_next === 2) && (roomID_next === 0xE8)) {\r\n        if (!NewItems.hookshot) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Hookshot\",\r\n                blockedItems : [LA_HOOKSHOT],\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleDeathlBoss = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (!(\r\n        (NewItems.sword) &&\r\n        (NewItems.bow) && \r\n        ((NewItems.mushroom || NewItems.powder))\r\n    )) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Deathl\",\r\n            blockedItems : [LA_SWORDv0, LA_BOW, LA_POWDER],\r\n        };\r\n    }\r\n    else {\r\n        NewItems.flags.gameCompleted++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleMiniBoss = (props) => {\r\n    const { spriteID_next, NewItems } = props;\r\n\r\n    switch (spriteID_next) {\r\n        case LA_SPRITE_D1_MINIBOSS  : if (NewItems.sword || NewItems.fireRod || NewItems.bow)   { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D1_MINIBOSS2 : if (NewItems.sword || NewItems.fireRod || NewItems.bow)   { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D2_MINIBOSS  : if (NewItems.sword || NewItems.fireRod || NewItems.bow)   { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D3_MINIBOSS  : if (NewItems.bomb)                                        { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D4_MINIBOSS  : if (NewItems.sword)                                       { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D5_MINIBOSS  : if (NewItems.sword || NewItems.hookshot || NewItems.bow)  { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D5_MINIBOSS2 : if (NewItems.sword || NewItems.bomb)                      { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D6_MINIBOSS  : if (NewItems.powerBracelet)                               { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D7_MINIBOSS  : if (NewItems.sword || NewItems.bow || NewItems.hookshot)  { return { hasBlock: false }; } break;\r\n        case LA_SPRITE_D8_MINIBOSS  : if (NewItems.sword)                                       { return { hasBlock: false }; } break;\r\n        default : \r\n            return {\r\n                hasBlock: true,\r\n                blockedReason : \"Miniboss\",\r\n            }\r\n    }\r\n\r\n    return {\r\n        hasBlock: true,\r\n        blockedReason : \"Unknown Miniboss\",\r\n    }\r\n};\r\n\r\nconst HandleElephantStatue = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (!(NewItems.powerBracelet >= 2)) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet L2\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n            allow: false\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleRaft = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    /* Duplicate spriteID for Raft and RaftGuy */\r\n    if ((uwID_next === 2) && (roomID_next === 0xB0)) {\r\n        return {\r\n            hasBlock: false\r\n        }\r\n    }\r\n\r\n    if ((uwID_next === 0) && (roomID_next === 0x3F)) {\r\n        if (NewItems.other.rupees < 200) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Rupees\",\r\n                blockedItems : [LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n                allow: false\r\n            };\r\n        }\r\n        \r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    \r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Unknown Raft\",\r\n        allow: false\r\n    };\r\n};\r\n\r\nconst HandleFlameThrower = (props) => {\r\n    const { uwID_next, NewItems } = props;\r\n    \r\n    /* Sprite appears in multiple places...maybe? */   \r\n    if (uwID_next === 1) {\r\n        if (NewItems.shield >= 2) {\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Shield L2\",\r\n                blockedItems : [LA_MIRRORSHIELD],\r\n                allow: false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleCrow = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    /* Golden Leaf 1 */\r\n    if ((uwID_next === 0) && (roomID_next === 0x58)) {\r\n        if (!NewItems.powerBracelet) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Power Bracelet\",\r\n                blockedItems : [LA_POWERBRACLET],\r\n            };\r\n        }\r\n        else {\r\n            NewItems.keys.goldenLeaves++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleAntiVacuum = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword || !NewItems.boots) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"AntiVacuum\",\r\n            blockedItems : [LA_SWORDv0, LA_BOOTS],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleArmMimic = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!(NewItems.sword || (NewItems.shield && NewItems.feather))) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"ArmMimic\",\r\n            blockedItems : [LA_SWORDv0, LA_MIRRORSHIELD, LA_FEATHER],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleHeartPiece = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    NewItems.other.heartPieces++;\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleBombHidden = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n        };\r\n    }\r\n    else {\r\n        NewItems.bomb++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandlePowderHidden = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n        };\r\n    }\r\n    else {\r\n        NewItems.powder++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleCrystalOrb = (props) => {\r\n    return {\r\n        hasBlock : false,\r\n        allow: false\r\n    };\r\n};\r\n\r\nconst HandleDungeonOwlStatus = (props) => {\r\n    return {\r\n        hasBlock : false,\r\n        allow: false\r\n    };\r\n};\r\n\r\nconst HandleD7Pillar = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (NewItems.powerBracelet) {\r\n        NewItems.flags.D7Pillar++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n            allow: false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleMambo = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.ocarina) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Ocarina\",\r\n            blockedItems : [LA_OCARINA],\r\n            allow: false\r\n        };\r\n    }\r\n    else {\r\n        NewItems.songs.song2++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSword = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    NewItems.sword++;\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleTarin = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    /* House Tarin */\r\n    if ((uwID_next === 2) && (roomID_next === 0xA3)) {\r\n        NewItems.shield++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    else if ((uwID_next === 0) && (roomID_next === 0x51)) {\r\n        if (NewItems.powder) {\r\n            NewItems.flags.racoonTarin++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n        \r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Powder\",\r\n            blockedItems : [LA_POWDER],\r\n        };\r\n    }\r\n        \r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Unknown Tarin\",\r\n    };\r\n};\r\n\r\nconst HandleRichard = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    /* The randomizer has Richard in his house, as well as his basement. */\r\n    if ((NewItems.keys.goldenLeaves >= 5) || NewItems.keys.slimeKey) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Golden Leaves\",\r\n            blockedItems : [LA_GoldenLeaf],\r\n            allow: false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSlimeKeyHidden = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.shovel) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Shovel\",\r\n            blockedItems : [LA_SHOVEL],\r\n        };\r\n    }\r\n    else {\r\n        NewItems.keys.slimeKey++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleLanmola = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.bow) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Lanmola\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_BOW],\r\n        };\r\n    }\r\n    else {        \r\n        NewItems.keys.anglarKey++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleInstrument = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    if ((uwID_next === 1) && (roomID_next === 0x02)) {\r\n        NewItems.dungeonItems[0].instrument++;\r\n    }\r\n    if ((uwID_next === 1) && (roomID_next === 0x2A)) {\r\n        NewItems.dungeonItems[1].instrument++;\r\n    }\r\n    if ((uwID_next === 1) && (roomID_next === 0x59)) {\r\n        NewItems.dungeonItems[2].instrument++;\r\n    }\r\n    if ((uwID_next === 1) && (roomID_next === 0x62)) {\r\n        NewItems.dungeonItems[3].instrument++;\r\n    }\r\n    if ((uwID_next === 1) && (roomID_next === 0x82)) {\r\n        NewItems.dungeonItems[4].instrument++;\r\n    }\r\n    if ((uwID_next === 1) && (roomID_next === 0xB5)) {\r\n        NewItems.dungeonItems[5].instrument++;\r\n    }\r\n    if ((uwID_next === 2) && (roomID_next === 0x2C)) {\r\n        NewItems.dungeonItems[6].instrument++;\r\n    }\r\n    if ((uwID_next === 2) && (roomID_next === 0x30)) {\r\n        NewItems.dungeonItems[7].instrument++;\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleMarin = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    /* Not at the house */\r\n    if (!((uwID_next === 2) && (roomID_next === 0xA3))) {\r\n        if (!NewItems.ocarina) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Ocarina\",\r\n                blockedItems : [LA_OCARINA],\r\n            };\r\n        }        \r\n        else if (!NewItems.flags.racoonTarin) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"RacoonTarin\",\r\n            };\r\n        }\r\n        else {\r\n            NewItems.songs.song1++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    \r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleMamu = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.ocarina || (NewItems.other.rupees < 500)) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Mamu\",\r\n            blockedItems : [LA_OCARINA, LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n        };\r\n    }\r\n\r\n    NewItems.songs.song3++;\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleMushroom = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    NewItems.mushroom++;\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleWitch = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.mushroom) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Mushroom\",\r\n            blockedItems : [LA_POWDER],\r\n        };\r\n    }\r\n    else {\r\n        NewItems.powder++;\r\n        NewItems.flags.mushroomFlag++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleTrendyNPC = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    // 10 + 40 Rupee buffer\r\n    if (NewItems.other.rupees < 50) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Rupees\",\r\n            blockedItems : [LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n        };\r\n    }    \r\n    \r\n    /* Debugger */\r\n    // NewItems.powder++;\r\n    \r\n    if (!NewItems.trading.yoshiDoll) {\r\n        NewItems.trading.yoshiDoll++;\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleShopNPC = (props) => {\r\n    const { NewItems, shovelSlotItem, bowSlotItem } = props;\r\n    \r\n    if (!NewItems.bomb) {\r\n        if (NewItems.other.rupees < 40) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Rupees\",\r\n                blockedItems : [LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n            };\r\n        } \r\n        \r\n        NewItems.bomb++;\r\n    }\r\n\r\n    // if (!NewItems.shield) {\r\n    //     if (NewItems.other.rupees < 40) {\r\n    //         return {\r\n    //             hasBlock : true\r\n    //         };\r\n    //     }\r\n        \r\n    //     NewItems.push(\"Shield\");\r\n    // }\r\n\r\n    if (!DoesPlayerHaveItem(NewItems, shovelSlotItem)) {\r\n        if (NewItems.other.rupees < 300) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Rupees\",\r\n                blockedItems : [LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n            };\r\n        }\r\n\r\n        AddChestContent2(NewItems, shovelSlotItem);\r\n    }\r\n\r\n    if (!DoesPlayerHaveItem(NewItems, bowSlotItem)) {\r\n        if (NewItems.other.rupees < 1280) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Rupees\",\r\n                blockedItems : [LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n            };\r\n        }\r\n\r\n        AddChestContent2(NewItems, bowSlotItem);\r\n    }\r\n\r\n    if (NewItems.bomb && NewItems.shield && DoesPlayerHaveItem(NewItems, shovelSlotItem) && DoesPlayerHaveItem(NewItems, bowSlotItem)) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    // if (!NewItems.shovel) {\r\n    //     if (NewItems.other.rupees < 300) {\r\n    //         return {\r\n    //             hasBlock : true,\r\n    //             blockedReason : \"Rupees\",\r\n    //             blockedItems : [LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n    //         };\r\n    //     }\r\n\r\n    //     NewItems.shovel++;\r\n    // }\r\n\r\n    // if (!NewItems.bow) {\r\n    //     if (NewItems.other.rupees < 1280) {\r\n    //         return {\r\n    //             hasBlock : true,\r\n    //             blockedReason : \"Rupees\",\r\n    //             blockedItems : [LA_20Rupees, LA_50Rupees, LA_100Rupees, LA_200Rupees],\r\n    //         };\r\n    //     }\r\n\r\n    //     NewItems.bow++;\r\n    // } \r\n    \r\n    // if (NewItems.bomb && NewItems.shield && NewItems.shovel && NewItems.bow) {\r\n    //     return {\r\n    //         hasBlock : false\r\n    //     };\r\n    // }\r\n    \r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"More to buy at shop\",\r\n    };\r\n};\r\n\r\nconst HandleRoosterStatueAndSkeleton = (props) => {\r\n    const { x2, y2, uwID_next, NewItems } = props;\r\n    \r\n    /* Sprite appears in multiple places [statue, luigi, rooster itself] */\r\n\r\n    /* Rooster Statue */\r\n    if (uwID_next === 0) {\r\n        if (!(NewItems.powerBracelet >= 2)) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Power Bracelet L2\",\r\n                blockedItems : [LA_POWERBRACLET],\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                added : [\r\n                    {x : x2, y: y2},\r\n                ],\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n\r\n    /* Rooster skeleton */\r\n    else if (uwID_next === 1) {\r\n        if (!NewItems.ocarina || !NewItems.songs.song3) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Rooster Skeleton\",\r\n                blockedItems : [LA_OCARINA, LA_SONG3],\r\n            };\r\n        }\r\n        else {\r\n            NewItems.flags.rooster++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        }\r\n    }\r\n};\r\n\r\nconst HandleTurtleRockSnake = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (NewItems.ocarina && NewItems.songs.song3 && NewItems.sword) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Turtle Rock Snake\",\r\n        blockedItems : [LA_OCARINA, LA_SONG3, LA_SWORDv0],\r\n    };\r\n};\r\n\r\nconst HandleBeachMarin = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (\r\n        NewItems.trading.pineapple || \r\n        NewItems.trading.hibiscus || \r\n        NewItems.trading.letter || \r\n        NewItems.trading.broom || \r\n        NewItems.trading.fishingHook || \r\n        NewItems.trading.necklace || \r\n        NewItems.trading.magnifyingLens\r\n    ) {\r\n        NewItems.flags.marin++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Trading Item\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleWalrus = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (NewItems.flags.marin) {\r\n        NewItems.flags.marinReturned++;\r\n        return {\r\n            hasBlock : false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Marin\",\r\n            allow: false\r\n        }\r\n    }\r\n};\r\n\r\nconst HandleMadamMeowMeow = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.flags.bowwow) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bowwow\",\r\n        };\r\n    }\r\n    else {\r\n        NewItems.flags.bowwowReturned++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleBowwow = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    if ((uwID_next === 2) && (roomID_next === 0xE2)) {\r\n        if (!NewItems.dungeonItems[0].instrument) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Instrument D1\",\r\n            };\r\n        }\r\n        else {\r\n            NewItems.flags.bowwow++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock: false\r\n        }\r\n    }\r\n};\r\n\r\nconst HandleMasterStalfos = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.bomb) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword and Bomb\",\r\n            blockedItems : [LA_SWORDv0, LA_BOMB],\r\n        };\r\n    }\r\n\r\n    if ((uwID_next === 1) && (roomID_next === 0x80)) {\r\n        if (NewItems.flags.MStalfosKills === 3) {\r\n            NewItems.flags.MStalfosKills++;\r\n            NewItems.hookshot++;\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"MStalfosKills\",\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        NewItems.flags.MStalfosKills++;\r\n    }\r\n\r\n    return {\r\n        hasBlock: false\r\n    }\r\n};\r\n\r\nconst HandleSeashellHidden = (props) => {\r\n    const { tileID_next, NewItems } = props;\r\n    \r\n    if ((tileID_next === 0x20) && !NewItems.shovel) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Shovel\",\r\n            blockedItems : [LA_SHOVEL],\r\n        };\r\n    }\r\n\r\n    if ((tileID_next === 0x5C) && (!NewItems.sword && !NewItems.fireRod && !NewItems.boomerang)) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Firerod or Boomerang\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_BOOMERANG],\r\n        };\r\n    }\r\n\r\n    if ((tileID_next === 0xF5) && (!NewItems.boots)) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Boots\",\r\n            blockedItems : [LA_BOOTS],\r\n        };\r\n    }\r\n\r\n    NewItems.other.seaShell++;\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleOctorock = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleMoblin = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleTektite = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleLeever = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleArmos = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.bomb && !NewItems.hookshot) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bomb or Hookshot\",\r\n            blockedItems : [LA_BOMB, LA_HOOKSHOT],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSeaOrchin = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.shield && !NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon or Shield\",\r\n            blockedItems : [LA_MIRRORSHIELD, LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n            allow: false\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleLikeLike = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleShark = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSmallRedGel = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleHardHatBettle = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.shield) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Shield\",\r\n            blockedItems : [LA_MIRRORSHIELD, LA_SWORDv0],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleKeese = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleStalfosRunAway = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.hookshot) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Hookshot\",\r\n            blockedItems : [LA_SWORDv0, LA_HOOKSHOT],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleGreenGelHidden = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleRedGel = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleCrab = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleMoblinSword = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleGhost = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleKingMoblin = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword\",\r\n            blockedItems : [LA_SWORDv0],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleBuzzBlob = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.powder) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword and Powder\",\r\n            blockedItems : [LA_SWORDv0, LA_POWDER],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleMiniMoldorm = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder &&!NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleDeckOfCards = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.shield && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no Powder + Shield\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_MIRRORSHIELD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSpikeyBeetle = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.shield) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Shield\",\r\n            blockedItems : [LA_SWORDv0, LA_MIRRORSHIELD],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleStalfos2 = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.hookshot) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Hookshot\",\r\n            blockedItems : [LA_SWORDv0, LA_HOOKSHOT],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandlePowderOnWings = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.feather) {\r\n        // NewItems.powder++;\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Feather\",\r\n            blockedItems : [LA_FEATHER],\r\n        };\r\n    }\r\n    else {\r\n        // NewItems.powder++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleTrackingGhost = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.powder) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Powder\",\r\n            blockedItems : [LA_SWORDv0, LA_POWDER],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandlePolsVoice = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.bomb && !NewItems.powerBracelet && (!NewItems.ocarina && !NewItems.songs.song1)) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bomb or Power Bracelet or Ocarina and Song1\",\r\n            blockedItems : [LA_BOMB, LA_POWDER, LA_OCARINA, LA_SONG1],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleMadBatterWell = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.powder) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorSlime1 = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorSlime2 = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorSlime3 = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.powder && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorSpinnerRed = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorSpinnerBlue = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorSpinnerGold = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandlePullLever = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorBuzzBlobBoss = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.powder) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword and Powder\",\r\n            blockedItems : [LA_SWORDv0, LA_POWDER],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSoldierInWall = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    if (!NewItems.bomb) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bomb\",\r\n            blockedItems : [LA_BOMB],\r\n        };\r\n    }\r\n    else if ((uwID_next === 2) && (roomID_next === 0xC5)) { // roomx2 roomy3 // TODO\r\n        NewItems.keys.goldenLeaves++;\r\n    }\r\n    \r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleColorOrbGreen = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Power Bracelet\",\r\n            blockedItems : [LA_SWORDv0, LA_POWERBRACLET],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorOrbRed = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Power Bracelet\",\r\n            blockedItems : [LA_SWORDv0, LA_POWERBRACLET],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorOrbGold = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Power Bracelet\",\r\n            blockedItems : [LA_SWORDv0, LA_POWERBRACLET],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorGolem = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.bomb) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Bomb\",\r\n            blockedItems : [LA_SWORDv0, LA_BOMB],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleColorBoss = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.bow && !NewItems.fireRod) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bow or FireRod\",\r\n            blockedItems : [LA_BOW, LA_FIREROD],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleBombEnemy = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleBombStalkerEnemy = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandlePariodd = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!(NewItems.sword || NewItems.fireRod || NewItems.boomerang)) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder no hookshot\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleCactusEnemy = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleWaterTekTite = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.powder && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandlePeaHat = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword\",\r\n            blockedItems : [LA_SWORDv0],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleRope = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.powder && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleVire = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.powder && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleGibdo = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder no hookshot\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleStalfosThrower = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.hookshot && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon no powder no firerod\",\r\n            blockedItems : [LA_SWORDv0, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleStarEnemy = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.powder && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Weapon\",\r\n            blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleWizzRobe = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.bomb && !NewItems.fireRod) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bomb or Firerod\",\r\n            blockedItems : [LA_BOMB, LA_FIREROD],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleHorseHead = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleAntiKirby = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.bomb && !NewItems.fireRod) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Bomb or Firerod\",\r\n            blockedItems : [LA_BOMB, LA_FIREROD],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleGoomba = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.feather && !NewItems.sword && !NewItems.fireRod && !NewItems.hookshot && !NewItems.powder && !NewItems.boomerang) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Feather or Weapon\",\r\n            blockedItems : [LA_FEATHER, LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_HOOKSHOT, LA_BOOMERANG],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSwampFlower_L = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang && !NewItems.flags.bowwow) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Firerod or Hookshot or Boomerang or Bowwow\",\r\n            blockedItems : [LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n            allow : false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleSwampFlower_S = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.fireRod && !NewItems.hookshot && !NewItems.boomerang && !NewItems.flags.bowwow) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Firerod or Hookshot or Boomerang or Bowwow\",\r\n            blockedItems : [LA_FIREROD, LA_HOOKSHOT, LA_BOOMERANG],\r\n            allow : false,\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleTwomp = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.boots) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Boots\",\r\n            blockedItems : [LA_BOOTS],\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n};\r\n\r\nconst HandleLeftRightPlatform = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleUpDownPlatform = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandlePotPlatform = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    /* One room has this platform without the need to carry a pot on it. */\r\n    if ((uwID_next === 1) && (roomID_next === 0x3B)) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    if (!NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandlePot = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (!NewItems.powerBracelet) {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Power Bracelet\",\r\n            blockedItems : [LA_POWERBRACLET],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n}\r\n\r\nconst HandlePlant = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    }\r\n};\r\n\r\nconst HandleTwomp2 = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    }\r\n};\r\n\r\nconst HandleFish1 = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    }\r\n};\r\n\r\nconst HandleFish2 = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    }\r\n};\r\n\r\nconst HandleFish3 = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    }\r\n};\r\n\r\nconst HandleWeight = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    }\r\n};\r\n\r\nconst HandleJellyFish = (props) => {\r\n    return {\r\n        hasBlock : false\r\n    }\r\n};\r\n\r\nconst HandleKey = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    /* Bird key */\r\n    if ((uwID_next === 2) && (roomID_next === 0x7A)) {\r\n        NewItems.keys.birdKey++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    \r\n    /* Ignore Anglar key below the desert */\r\n    if ((uwID_next === 1) && (roomID_next === 0xF8)) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    \r\n    /* Ignore Anglar key below the desert */\r\n    if ((uwID_next === 1) && (roomID_next === 0x7C)) {\r\n        NewItems.dungeonItems[3].smallKey++;\r\n        NewItems.dungeonItems[3].smallKeyFound++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    console.log(`${props.x} ${props.y}`);\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Overworld key\",\r\n        // blockedItems : [],\r\n    };\r\n\r\n    // mapCategory2 // handle this elsewhere since the small key drops\r\n};\r\n\r\nconst HandleArmosMiniboss = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    if ((uwID_next === 2) && (roomID_next === 0x7F)) {\r\n        if (!NewItems.sword && !NewItems.fireRod && !NewItems.bow) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Sword or FireRod or Bow\",\r\n                blockedItems : [LA_SWORDv0, LA_FIREROD, LA_BOW],\r\n            };\r\n        }     \r\n        else {\r\n            NewItems.keys.faceKey++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nconst HandleMadBomber = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    if ((uwID_next === 0) && (roomID_next === 0x5A)) {\r\n        if (!NewItems.bow && !NewItems.sword) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Bow or Sword\",\r\n                blockedItems : [LA_SWORDv0, LA_BOW],\r\n            };\r\n        }\r\n        else {\r\n            NewItems.keys.goldenLeaves++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock: false\r\n        }\r\n    }\r\n};\r\n\r\nconst HandleBallAndChainTrooper = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    if ((uwID_next === 2) && (roomID_next === 0xC6)) {\r\n        if (!NewItems.bow && !NewItems.sword && !NewItems.fireRod) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Bow or Sword or Firerod\",\r\n                blockedItems : [LA_SWORDv0, LA_FIREROD, LA_BOW],\r\n            };\r\n        }\r\n        else {\r\n            NewItems.keys.goldenLeaves++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock: false\r\n        }\r\n    }\r\n};\r\n\r\n//====================================================================================================================\r\n\r\nconst HandleEyeBlock = (props) => {\r\n    const { x, y, x2, y2, tileTypesArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr } = props;\r\n\r\n    let added = [];\r\n\r\n    const CheckForLava = (x2, y2, d, added) => {\r\n        let x3;\r\n        let y3;\r\n        let tileType;\r\n\r\n        switch (d) {\r\n            case 1:\r\n                x3 = x2;\r\n                y3 = y2 - 1;\r\n                break;\r\n\r\n            case 2:\r\n                x3 = x2 + 1;\r\n                y3 = y2;\r\n                break;\r\n\r\n            case 3:\r\n                x3 = x2;\r\n                y3 = y2 + 1;\r\n                break;\r\n\r\n\r\n            case 4:\r\n                x3 = x2 - 1;\r\n                y3 = y2;\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n\r\n        if (TileInSameRoom(x, y, x3, y3, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n            tileType = tileTypesArr[y3][x3];\r\n            if (tileType === Z4_TILE_PIT) {\r\n\r\n                let filtered = added.filter(o => o.x === x3 && o.y === y3);\r\n\r\n                if (filtered.length === 0) {\r\n                    added.push({x : x3, y : y3, allowed: Z4_TILE_PIT});\r\n                    CheckForLava(x3, y3, 1, added);\r\n                    CheckForLava(x3, y3, 2, added);\r\n                    CheckForLava(x3, y3, 3, added);\r\n                    CheckForLava(x3, y3, 4, added);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    CheckForLava(x2, y2, 1, added);\r\n    CheckForLava(x2, y2, 2, added);\r\n    CheckForLava(x2, y2, 3, added);\r\n    CheckForLava(x2, y2, 4, added);\r\n    \r\n    return {\r\n        hasBlock : false,\r\n        added: added,\r\n    };\r\n};\r\n\r\n//====================================================================================================================\r\n//\r\n//                        ######## ########     ###    ########  #### ##    ##  ######   \r\n//                           ##    ##     ##   ## ##   ##     ##  ##  ###   ## ##    ##  \r\n//                           ##    ##     ##  ##   ##  ##     ##  ##  ####  ## ##        \r\n//                           ##    ########  ##     ## ##     ##  ##  ## ## ## ##   #### \r\n//                           ##    ##   ##   ######### ##     ##  ##  ##  #### ##    ##  \r\n//                           ##    ##    ##  ##     ## ##     ##  ##  ##   ### ##    ##  \r\n//                           ##    ##     ## ##     ## ########  #### ##    ##  ###### \r\n//\r\n//====================================================================================================================\r\n\r\nconst HandleMotherWithBaby = (props) => {\r\n    const { NewItems } = props;\r\n    \r\n    if (NewItems.trading.yoshiDoll) {\r\n        NewItems.trading.ribbon++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Yoshi Doll\",\r\n        // blockedItems : [LA_TRADINGITEM],\r\n    };\r\n};\r\n\r\nconst HandleMiniBowwow = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Ribbon -> Dog Food, Duplicate NPC, can trade with one specific. */\r\n    if ((uwID_next === 2) && (roomID_next === 0xB2)) {\r\n        if (NewItems.trading.ribbon) {\r\n            NewItems.trading.dogFood++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Ribbon\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleCrocodile = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Dog Food -> Bananas, Duplicate NPC, can trade with one specific. */\r\n    if ((uwID_next === 2) && (roomID_next === 0xFE)) {\r\n        if (NewItems.trading.dogFood) {\r\n            NewItems.trading.bananas++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"DogFood\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleKikiTheMonkey = (props) => {\r\n    const { x2, y2, NewItems } = props;\r\n\r\n    if (NewItems.trading.bananas) {\r\n        NewItems.trading.stick++;\r\n        return {\r\n            hasBlock : false,\r\n            added : [\r\n                // {x : x2, y: y2 - 2},\r\n                // {x : x2, y: y2 - 3},\r\n                // {x : x2, y: y2 - 4},\r\n                {x : x2, y: y2 - 5},\r\n            ]\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Bananas\",\r\n        // blockedItems : [LA_TRADINGITEM],\r\n    };\r\n};\r\n\r\nconst HandleTarinWithBees = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (NewItems.trading.stick) {\r\n        NewItems.trading.honeycomb++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Stick\",\r\n        // blockedItems : [LA_TRADINGITEM],\r\n    };\r\n};\r\n\r\nconst HandleBearChef = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    if (NewItems.trading.honeycomb) {\r\n        NewItems.trading.pineapple++;\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Honeycomb\",\r\n        // blockedItems : [LA_TRADINGITEM],\r\n    };\r\n};\r\n\r\nconst HandlePapahl = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Pineapple -> Hibiscus, Duplicate NPC, can trade with one specific. */\r\n    if ((uwID_next === 0) && (roomID_next === 0x19)) {\r\n        if (NewItems.trading.pineapple) {\r\n            NewItems.trading.hibiscus++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Pineapple\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleChristineAndMrWrite = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Hibiscus -> Letter */\r\n    if ((uwID_next === 2) && (roomID_next === 0xD9)) {\r\n        if (NewItems.trading.hibiscus) {\r\n            NewItems.trading.letter++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Hibiscus\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    /* Hibiscus -> Letter */\r\n    if ((uwID_next === 2) && (roomID_next === 0xA8)) {\r\n        if (NewItems.trading.letter) {\r\n            NewItems.trading.broom++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Letter\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Unknown Christine and Mr Write\",\r\n    };\r\n};\r\n\r\nconst HandleGrandma = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Broom -> Fishing Hook, Duplicate NPC, can trade with one specific. */\r\n    if ((uwID_next === 0) && (roomID_next === 0xCD)) {\r\n        if (NewItems.trading.broom) {\r\n            NewItems.trading.fishingHook++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Broom\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleFisherMan = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Fishing Hook -> Necklace */\r\n    if ((uwID_next === 2) && (roomID_next === 0xF5)) {\r\n        if (NewItems.trading.fishingHook) {\r\n            NewItems.trading.necklace++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Fishing Hook\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleMermaid = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Fishing Hook -> Necklace */\r\n    if ((uwID_next === 0) && (roomID_next === 0xC9)) {\r\n        if (NewItems.trading.necklace) {\r\n            NewItems.trading.scale++;\r\n            return {\r\n                hasBlock : false,\r\n                allow: true\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Necklace\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n            allow: false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false,\r\n    };\r\n};\r\n\r\nconst HandleMermaidStatue = (props) => {\r\n    const { NewItems } = props;\r\n\r\n    /* Scale -> Statue */\r\n    if (NewItems.trading.scale) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : true,\r\n        blockedReason : \"Scale\",\r\n        // blockedItems : [LA_TRADINGITEM],\r\n    };\r\n};\r\n\r\nconst HandleMagnifyingLens = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n\r\n    /* Scale -> Magnifying Lens */\r\n    if ((uwID_next === 2) && (roomID_next === 0x97)) {\r\n        if (NewItems.trading.scale) {\r\n            NewItems.trading.magnifyingLens++;\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Scale\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    return {\r\n        hasBlock : false\r\n    };\r\n};\r\n\r\nconst HandleNPCMoblin = (props) => {\r\n    const { uwID_next, roomID_next, NewItems } = props;\r\n    \r\n    /* NPC Moblin - LA_SPRITE_NPC_MOBLIN */\r\n    if ((uwID_next === 1) && (roomID_next === 0xF5)) {\r\n        if (NewItems.trading.magnifyingLens) {\r\n            return {\r\n                hasBlock : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Magnifying Lens\",\r\n            // blockedItems : [LA_TRADINGITEM],\r\n        };\r\n    }\r\n\r\n    /* Mask mimic - LA_SPRITE_MASKMIMIC */\r\n    if (NewItems.sword || NewItems.bomb) {\r\n        return {\r\n            hasBlock : false\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Sword or Bomb\",\r\n            blockedItems : [LA_SWORDv0, LA_BOMB],\r\n        }\r\n    }\r\n};","import { LowNibble, GetUWIDFromSubmapID, GetCoordiantesOfRoom } from \"../../other/utilities\";\r\nimport { VIEWID_E2, Z4_TILE_PITTRANSITION, Z4_BOARD_STATE_COMPLETE, LA_POWERBRACLET, LA_HOOKSHOT } from \"../../other/uConstants\";\r\n\r\nexport const TransitionLogic = (props) => {\r\n    const { x, y, transitionsArr, transitionsDataArr, uwIDArr, roomIDArr, uwID_curr, roomID_curr, roomX_curr, roomY_curr, tileType_curr, disableTransitions, eventsArr, eventsStateArr, NewItems } = props;\r\n\r\n    // if ((x === 65) && (y === 3)) {\r\n    //     debugger;\r\n    // }\r\n\r\n    if (!transitionsArr[y][x]) {\r\n        return {\r\n            handled : false\r\n        }\r\n    }\r\n\r\n    if (disableTransitions) {\r\n        return {\r\n            handled : false\r\n        }\r\n    }\r\n    \r\n    let xx;\r\n    let yy;\r\n\r\n    /* If event is spawn staircase, check for event trigger */\r\n    xx = Math.trunc(x / 10);\r\n    yy = Math.trunc(y / 8);\r\n    let event = eventsArr[yy][xx];\r\n    let state = eventsStateArr[yy][xx];\r\n    let id = LowNibble(event);\r\n    if (id === 0x0A) {\r\n        if (!(state === Z4_BOARD_STATE_COMPLETE)) {\r\n            return {\r\n                handled : true,\r\n                hasBlock : true,\r\n                blockedReason : \"Event Staircase\",\r\n                allow : true,\r\n            }\r\n        }\r\n    }\r\n \r\n    let transition = transitionsDataArr[y][x];\r\n    let viewID = transition[0];\r\n    let subMapID = transition[1];\r\n    let roomID = transition[2];\r\n    xx = transition[3];\r\n    yy = transition[4];\r\n\r\n    let uwID = GetUWIDFromSubmapID(viewID, subMapID);\r\n    let coord = GetCoordiantesOfRoom(uwID, roomID, uwIDArr, roomIDArr);\r\n\r\n    let xx2 = LowNibble(xx);\r\n    let yy2 = LowNibble(yy) - 1;\r\n\r\n    let x3 = coord[0].x + xx2;\r\n    let y3 = coord[0].y + yy2;\r\n\r\n    if (tileType_curr === Z4_TILE_PITTRANSITION) {\r\n        if (viewID === VIEWID_E2) { // Minidungeon\r\n            return {\r\n                handled : true,\r\n                hasBlock : false,\r\n                added : [{ x : coord[0].x + roomX_curr, y : coord[0].y }],\r\n                allow : false,\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                handled : true,\r\n                hasBlock : false,\r\n                added : [{ x : coord[0].x + roomX_curr, y : coord[0].y + roomY_curr }],\r\n                allow : false,\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        /* Sign post maze reveal staircase */\r\n        if ((uwID_curr === 0) && (roomID_curr === 0xD4) && (roomX_curr === 8) && (roomY_curr === 2)) {\r\n            if (!(NewItems.hookshot && NewItems.powerBracelet)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : true,\r\n                    blockedReason : \"Hookshot and Power Bracelet\",\r\n                    blockedItems : [LA_HOOKSHOT, LA_POWERBRACLET],\r\n                    allow : false,\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            handled : true,\r\n            hasBlock : false,\r\n            added : [{ x : x3, y : y3 }],\r\n            allow : true,\r\n        }\r\n    }\r\n};","import { Z4_TILE_PIT } from \"../other/uConstants\";\r\nimport { GetUWID, GetRoomID, GetMapCategory, AddVisited, AddRevisit, AddCompleted, IntToHex } from \"../other/utilities\";\r\nimport { EventLogic, ChestLogic, SmallKeyDropLogic, SpriteLogic, TransitionLogic } from \"../index\";\r\n\r\nexport const DoCurrentLogic = (x, y, data_props) => {\r\n    let hasBlock = false;\r\n    let result;\r\n\r\n    let currentTile_props = {\r\n        x : x, \r\n        y : y,\r\n        roomX_curr : Math.trunc(x % 10),\r\n        roomY_curr : Math.trunc(y % 8),\r\n        uwID_curr : GetUWID(x, y, data_props.uwIDArr),\r\n        roomID_curr : GetRoomID(x, y, data_props.roomIDArr),\r\n        spriteID_curr : data_props.spritesArr[y][x],\r\n        spriteState_curr : data_props.spriteStateArr[y][x],\r\n        tileType_curr : data_props.tileTypesArr[y][x],\r\n        tileID_curr : data_props.tileIDsArr[y][x],\r\n        state_curr : data_props.stateArr[y][x],\r\n        mapCategory_curr : GetMapCategory(x, y, data_props.mapCategoriesArr)\r\n    };\r\n\r\n    /* Handle events */\r\n    let eventProps = {\r\n        ...currentTile_props,\r\n        ...data_props,\r\n    };\r\n\r\n    EventLogic(eventProps);\r\n\r\n    result = ChestLogic(eventProps);\r\n    if (result.handled) {\r\n        if (result.hasBlock) {\r\n            hasBlock = true;\r\n            AddRevisit(x, y, eventProps, `Chest Logic`, result.blockedReason, result.blockedItems);\r\n        }\r\n    }\r\n\r\n    result = SmallKeyDropLogic(eventProps);\r\n    if (result.handled) {\r\n        if (result.hasBlock) {\r\n            hasBlock = true;\r\n            AddRevisit(x, y, eventProps, `SmallKeyDrop Logic`, result.blockedReason, result.blockedItems);\r\n        }\r\n    }\r\n\r\n    result = TransitionLogic(eventProps);\r\n    if (result.handled) {\r\n        if (result.hasBlock) {\r\n            hasBlock = true;\r\n            AddRevisit(x, y, eventProps, `Transition Logic`, result.blockedReason, result.blockedItems);\r\n        }\r\n        if (result.added) {\r\n            result.added.forEach(o => {\r\n                AddVisited(o.x, o.y, eventProps);\r\n            });\r\n        }\r\n        if (!result.allow) {\r\n            if (!hasBlock) {\r\n                AddCompleted(x, y, data_props);\r\n                return {\r\n                    hasBlock : hasBlock,\r\n                    allow : false\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Current tile has uncleared sprite? Probably from jumping onto a passable sprite. */\r\n    result = SpriteLogic({\r\n        ...eventProps, \r\n        x2: x, \r\n        y2: y, \r\n        uwID_next : GetUWID(x, y, data_props.uwIDArr),\r\n        roomID_next : GetRoomID(x, y, data_props.roomIDArr),\r\n        spriteID_next : data_props.spritesArr[y][x],\r\n        spriteState_next : data_props.spriteStateArr[y][x],\r\n        tileType_next : data_props.tileTypesArr[y][x],\r\n        tileID_next : data_props.tileIDsArr[y][x],\r\n        state_next : data_props.stateArr[y][x],\r\n    }); \r\n    if (result.handled) {\r\n        if (result.added) {\r\n            result.added.forEach(o => {\r\n                AddVisited(o.x, o.y, data_props, Z4_TILE_PIT);\r\n            });\r\n        }\r\n        if (result.hasBlock) {\r\n            hasBlock = true;\r\n            AddRevisit(x, y, data_props, `SpriteLogic id 0x${IntToHex(data_props.spritesArr[y][x])}`, result.blockedReason, result.blockedItems);\r\n        }\r\n        if (!result.allow) {\r\n            if (!hasBlock) {\r\n                AddCompleted(x, y, data_props);\r\n                return {\r\n                    hasBlock : hasBlock,\r\n                    allow : false\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Special - Cave that can work with bomb arrows and hookshot... */\r\n    if ((currentTile_props.uwID_curr === 2) && (currentTile_props.roomID_curr === 0xE6) && (currentTile_props.roomX_curr === 8) && (currentTile_props.roomY_curr === 6)) {\r\n        if ((data_props.NewItems.bomb) && (data_props.NewItems.feather) && (data_props.NewItems.hookshot)) {\r\n            AddVisited(currentTile_props.x - 5, currentTile_props.y, eventProps);\r\n        }\r\n        else {\r\n            hasBlock = true;\r\n            AddRevisit(currentTile_props.x, currentTile_props.y, data_props, \"Bomb Hookshot Feather Room\", \"Bomb and Feather and Hookshot\");\r\n        }\r\n    }\r\n\r\n    /* Castle Gate */\r\n    if ((currentTile_props.uwID_curr === 0) && (currentTile_props.roomID_curr === 0x79)) {\r\n        if (\r\n            ((currentTile_props.roomX_curr === 5) && (currentTile_props.roomY_curr === 3))\r\n        ) {\r\n            if (!data_props.NewItems.flags.castleButtonPressed) {\r\n                hasBlock = true;\r\n                AddRevisit(currentTile_props.x, currentTile_props.y, data_props, \"Castle Gate\", \"Castle Button\");\r\n            }\r\n            else {\r\n                AddVisited(currentTile_props.x, currentTile_props.y - 3, data_props);\r\n            }\r\n        }\r\n\r\n        if (\r\n            ((currentTile_props.roomX_curr === 5) && (currentTile_props.roomY_curr === 0))\r\n        ) {\r\n            if (!data_props.NewItems.flags.castleButtonPressed) {\r\n                hasBlock = true;\r\n                AddRevisit(currentTile_props.x, currentTile_props.y, data_props, \"Castle Gate\", \"Castle Button\");\r\n            }\r\n            else {\r\n                AddVisited(currentTile_props.x, currentTile_props.y + 3, data_props);\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        hasBlock : hasBlock,\r\n        allow : true\r\n    };\r\n}","import { LowNibble } from \"../../other/utilities\";\r\nimport { Z4_BOARD_STATE_COMPLETE } from \"../../other/uConstants\";\r\n\r\nexport const SmallKeyDropLogic = (props) => {\r\n    const { x, y, roomX_curr, roomY_curr, eventsArr, eventsStateArr, subMapIDArr, uwID_curr, roomID_curr, NewItems } = props;\r\n\r\n    if (!(\r\n        ((roomX_curr === 2) && (roomY_curr === 3)) || \r\n        ((roomX_curr === 5) && (roomY_curr === 4))\r\n    )) {\r\n        return {\r\n            handled : false\r\n        }\r\n    }\r\n\r\n    /* Small key drop event */\r\n    if ((roomX_curr === 2) && (roomY_curr === 3)) {\r\n        let xx = Math.trunc(x / 10);\r\n        let yy = Math.trunc(y / 8);\r\n        let event = eventsArr[yy][xx];\r\n        let eventID = LowNibble(event);  \r\n        let state = eventsStateArr[yy][xx];\r\n        if (eventID === 0x08) {\r\n            if (state === Z4_BOARD_STATE_COMPLETE) {\r\n                let subMapID = subMapIDArr[yy][xx];\r\n\r\n                /* Color dungeon */\r\n                if (subMapID === 11) {\r\n                    subMapID = 9; // Slot 10\r\n                }\r\n\r\n                /* Castle has a small key drop that turns into a golden leaf */\r\n                if ((uwID_curr === 2) && (roomID_curr === 0xD2)) {\r\n                    NewItems.keys.goldenLeaves++;\r\n                }\r\n                else {\r\n                    NewItems.dungeonItems[subMapID].smallKey++;\r\n                    NewItems.dungeonItems[subMapID].smallKeyFound++;\r\n                } \r\n                \r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    handled : true,\r\n                    blockedReason : \"Event SmallKeyDrop\",\r\n                    hasBlock : true\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n\r\n    /* Small key drop event */\r\n    if ((roomX_curr === 5) && (roomY_curr === 4)) {\r\n        let xx = Math.trunc(x / 10);\r\n        let yy = Math.trunc(y / 8);\r\n        let event = eventsArr[yy][xx];\r\n        let eventID = LowNibble(event);  \r\n        let state = eventsStateArr[yy][xx];\r\n        if (eventID === 0x09) {\r\n            if (state === Z4_BOARD_STATE_COMPLETE) {\r\n                let subMapID = subMapIDArr[yy][xx];\r\n\r\n                /* Color dungeon */\r\n                if (subMapID === 11) {\r\n                    subMapID = 9; // Slot 10\r\n                }\r\n\r\n                /* Castle has a small key drop that turns into a golden leaf */\r\n                if ((uwID_curr === 2) && (roomID_curr === 0xD2)) {\r\n                    NewItems.keys.goldenLeaves++;\r\n                }\r\n                else {\r\n                    NewItems.dungeonItems[subMapID].smallKey++;\r\n                    NewItems.dungeonItems[subMapID].smallKeyFound++;\r\n                }    \r\n                \r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : true, \r\n                    blockedReason : \"Event SmallKeyDrop\",\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n        };\r\n    }\r\n};","import { GetUWID, GetRoomID, GetMapCategory, IntToHex, AddVisited, AddRevisit, TileExists, TileInSameRoom } from \"../other/utilities\";\r\nimport { Z4_BOARD_STATE_UNCLEARED, Z4_TILE_PIT } from \"../other/uConstants\";\r\nimport { MinidungeonLogic, FirerodLogic, BowLogic, RoosterLogic, HookshotLogic, FeatherLogic, SpriteLogic, TileTypeLogic, AllowMovement } from \"../index\";\r\n\r\nexport const DoNextLogic = (x, y, data_props, allowedTileType) => {\r\n    let result;\r\n    let hasBlock = false;\r\n    let x2;\r\n    let y2;\r\n\r\n    let currentTile_props = {\r\n        x : x, \r\n        y : y,\r\n        roomX_curr : Math.trunc(x % 10),\r\n        roomY_curr : Math.trunc(y % 8),\r\n        uwID_curr : GetUWID(x, y, data_props.uwIDArr),\r\n        roomID_curr : GetRoomID(x, y, data_props.roomIDArr),\r\n        spriteID_curr : data_props.spritesArr[y][x],\r\n        spriteState_curr : data_props.spriteStateArr[y][x],\r\n        tileType_curr : data_props.tileTypesArr[y][x],\r\n        tileID_curr : data_props.tileIDsArr[y][x],\r\n        state_curr : data_props.stateArr[y][x],\r\n        mapCategory_curr : GetMapCategory(x, y, data_props.mapCategoriesArr)\r\n    };\r\n\r\n    for (let d = 1; d <= 4; d++) {\r\n        switch (d) {\r\n            case 1 :\r\n                x2 = x;\r\n                y2 = y - 1;\r\n                break;\r\n\r\n            case 2 : \r\n                x2 = x + 1;\r\n                y2 = y;\r\n                break;\r\n\r\n            case 3 : \r\n                x2 = x;\r\n                y2 = y + 1;\r\n                break;\r\n\r\n            case 4 : \r\n                x2 = x - 1;\r\n                y2 = y;\r\n                break;\r\n\r\n            default : \r\n                break;\r\n        }\r\n\r\n        if (!TileExists(x2, y2, data_props.maxXSquares, data_props.maxYSquares)) {\r\n            continue;\r\n        }\r\n\r\n        let nextTile_props = {\r\n            x2 : x2,\r\n            y2 : y2,\r\n            roomX_next : Math.trunc(x2 % 10),\r\n            roomY_next : Math.trunc(y2 % 8),\r\n            uwID_next : GetUWID(x2, y2, data_props.uwIDArr),\r\n            roomID_next : GetRoomID(x2, y2, data_props.roomIDArr),\r\n            spriteID_next : data_props.spritesArr[y2][x2],\r\n            spriteState_next : data_props.spriteStateArr[y2][x2],\r\n            tileType_next : data_props.tileTypesArr[y2][x2],\r\n            tileID_next : data_props.tileIDsArr[y2][x2],\r\n            state_next : data_props.stateArr[y2][x2],\r\n            mapCategory_next : GetMapCategory(x, y, data_props.mapCategoriesArr),\r\n            allowedTileType : allowedTileType,\r\n        };\r\n\r\n        let props = {\r\n            d : d,\r\n            ...currentTile_props,\r\n            ...nextTile_props,\r\n            ...data_props,\r\n        };\r\n\r\n        /* Debug - same room */\r\n        if (props.disableRoomChange) {\r\n            if (!TileInSameRoom(props.x, props.y, props.x2, props.y2, props.maxXSquares, props.maxYSquares, props.uwIDArr, props.roomIDArr)) {\r\n                hasBlock = false;\r\n                continue;\r\n            }\r\n        }\r\n\r\n        /* Minidungeon */\r\n        result = MinidungeonLogic(props);\r\n        if (result.handled) {\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, `Minidungeon Logic`, result.blockedReason, result.blockedItems);\r\n                continue;\r\n            }\r\n            \r\n            if (!result.allow) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        /* Current tile firerod logic for D8 */\r\n        result = FirerodLogic(props);\r\n        if (result.handled) {\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, `Firerod Logic`, result.blockedReason, result.blockedItems);\r\n            }\r\n            else if (result.added) {\r\n                if (result.added.length > 0) {\r\n                    result.added.forEach(o => {\r\n                        AddVisited(o.x, o.y, props);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Current tile bow logic for D8 */\r\n        result = BowLogic(props);\r\n        if (result.handled) {\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, 'Bow Logic', result.blockedReason, result.blockedItems);\r\n            }\r\n            else if (result.added) {\r\n                if (result.added.length > 0) {\r\n                    result.added.forEach(o => {\r\n                        AddVisited(o.x, o.y, props);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        result = RoosterLogic(props);\r\n        if (result.handled) {\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, `Rooster Logic`, result.blockedReason, result.blockedItems);\r\n            }\r\n            if (result.added) {\r\n                if (result.added.length > 0) {\r\n                    result.added.forEach(o => {\r\n                        AddVisited(o.x, o.y, props);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Do before feather to account for far away tiles first */\r\n        result = HookshotLogic(props);\r\n        if (result.handled) {\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, \"Hookshot Logic\", result.blockedReason, result.blockedItems);\r\n            }\r\n            else if (result.added) {\r\n                if (result.added.length > 0) {\r\n                    result.added.forEach(o => {\r\n                        AddVisited(o.x, o.y, props);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        result = FeatherLogic(props);\r\n        if (result.handled) {\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, \"Feather Logic\", result.blockedReason, result.blockedItems);\r\n\r\n                if (result.added.length > 0) {\r\n                    result.added.forEach(o => {\r\n                        AddVisited(o.x, o.y, props);\r\n                    });\r\n                }\r\n\r\n                continue;\r\n            }\r\n            else if (result.added.length > 0) {\r\n                result.added.forEach(o => {\r\n                    AddVisited(o.x, o.y, props);\r\n                });\r\n            }\r\n        }\r\n\r\n        /* Can't go before minidungeon logic since transitions happen on the edge of the screen\r\n        which could connect to another minidungeon room on the gameboard but they are\r\n        not traversable to each other */\r\n        /* Already completed? */\r\n        if (props.state_next !== Z4_BOARD_STATE_UNCLEARED) {\r\n            continue;\r\n        }\r\n\r\n        /* Are we allowed to move? */\r\n        result = AllowMovement(props);\r\n        if (result.handled) {\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, `Allow movement Logic`, result.blockedReason, result.blockedItems);\r\n                continue;\r\n            }\r\n            if (!result.allow) {\r\n                continue;\r\n            }\r\n            if (result.allowedTileType) {\r\n                props.allowedTileType = result.allowedTileType;\r\n            }\r\n        }\r\n\r\n        /* Sprite next tile */\r\n        result = SpriteLogic(props); \r\n        if (result.handled) {\r\n            if (result.added) {\r\n                result.added.forEach(o => {\r\n                    AddVisited(o.x, o.y, props, Z4_TILE_PIT);\r\n                });\r\n            }\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, `SpriteLogic id 0x${IntToHex(props.spriteID_next)}`, result.blockedReason, result.blockedItems);\r\n            }\r\n            if (!result.allow) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        result = TileTypeLogic(props);\r\n        if (result.handled) {\r\n            if (result.added) {\r\n                result.added.forEach(o => {\r\n                    AddVisited(o.x, o.y, props);\r\n                });\r\n            }\r\n\r\n            if (result.hasBlock) {\r\n                hasBlock = true;\r\n                AddRevisit(x, y, props, `TileTypeLogic id ${props.tileType_next}`, result.blockedReason, result.blockedItems);\r\n                continue;\r\n            }\r\n            else if (!result.allow) {\r\n                continue;\r\n            }\r\n            else {\r\n                AddVisited(props.x2, props.y2, props);\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        hasBlock: hasBlock\r\n    };\r\n};\r\n","import { Z4_MAPCATEGORY_Side } from '../../other/uConstants';\r\nimport { TileInSameRoom } from '../../other/utilities';\r\n\r\nexport const MinidungeonLogic = (props) => {\r\n    const { x, y, x2, y2, d, uwID_next, roomID_next, NewItems, mapCategoriesArr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, uwID_curr, roomID_curr } = props;\r\n\r\n    let result;\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n    \r\n    if (mapCategoriesArr[yy][xx] !== Z4_MAPCATEGORY_Side) {\r\n        return {\r\n            handled : false,\r\n            hasBlock : false,\r\n            allow : false,\r\n        }\r\n    }\r\n\r\n    if (!TileInSameRoom(x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n\r\n        /* D4 above boss room transition */\r\n        if ((uwID_curr === 1) && (roomID_curr === 0xEF)) {\r\n            if (d === 1) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                    allow : false,\r\n                } \r\n            }\r\n        }\r\n\r\n        /* Allow going down a room */\r\n        if (\r\n            ((uwID_curr === 1) && (roomID_curr === 0xEF)) ||\r\n            ((uwID_curr === 2) && (roomID_curr === 0xE8))\r\n        ) {\r\n            if (d === 3) {\r\n                // allow\r\n            }\r\n            else {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                    allow : false,\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Allow going up a room */\r\n        else if (\r\n            ((uwID_curr === 1) && (roomID_curr === 0xFF)) ||\r\n            ((uwID_curr === 2) && (roomID_curr === 0xF8))\r\n        ) {\r\n            if (d === 1) {\r\n                // allow\r\n            }\r\n            else {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                    allow : false,\r\n                }\r\n            }\r\n        }            \r\n        \r\n        /* Every direction transitions out */\r\n        else if (\r\n            ((uwID_curr === 2) && (roomID_curr === 0xE9)) ||        // Mansion\r\n            ((uwID_curr === 2) && (roomID_curr === 0xF5)) ||        // Fisherman under bridge\r\n            ((uwID_curr === 2) && (roomID_curr === 0xFD))           // Manbo\r\n        ) {\r\n            if ((d === 2) || (d === 4)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                    allow : false,\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                    allow : false,\r\n                }\r\n            }\r\n        }\r\n\r\n        /* Ignore up down transitions in this room */\r\n        else if (\r\n            ((uwID_curr === 1) && (roomID_curr === 0x7C)) ||     // D4 small key room\r\n            ((uwID_curr === 1) && (roomID_curr === 0x1A))        // D1 fall in pit at boss room\r\n        ) {\r\n            if (y2 !== y) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : false,\r\n                    allow : false,\r\n                }\r\n            }\r\n        }    \r\n\r\n        /* Ignore transitions in this room */\r\n        else if (\r\n            ((uwID_curr === 2) && (roomID_curr === 0xB1))        // Fishing Game\r\n        ) {\r\n            return {\r\n                handled : true,\r\n                hasBlock : false,\r\n                allow : false,\r\n            }\r\n        }    \r\n\r\n        else if (y2 !== y) {\r\n            return {\r\n                handled : true,\r\n                hasBlock : false,\r\n                allow : false,\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Check if player is allowed to cross this minidungeon with simple logic */\r\n    switch (uwID_next) {\r\n        case 1:\r\n            switch (roomID_next) {\r\n                /* D1 */\r\n                case 0x18 : result = true; break;\r\n                case 0x19 : result = true; break;\r\n                case 0x1A : result = true; break;\r\n                case 0x1B : result = true; break;\r\n\r\n                /* D2 */\r\n                case 0x3E : result = NewItems.feather; break;\r\n                case 0x3F : result = NewItems.feather; break;\r\n                case 0x3C : result = NewItems.feather; break;\r\n                case 0x3D : result = NewItems.feather; break;\r\n                case 0x3A : result = (NewItems.feather && NewItems.boots) || (NewItems.powerBracelet); break;\r\n                case 0x3B : result = (NewItems.feather && NewItems.boots) || (NewItems.powerBracelet); break;\r\n\r\n                /* D3 */\r\n                case 0xAA : result = (NewItems.feather && NewItems.boots); break;\r\n                case 0xAB : result = (NewItems.feather && NewItems.boots); break;\r\n\r\n                /* D4 */\r\n                case 0xEF : result = NewItems.flippers; break;\r\n                case 0xFF : result = NewItems.flippers; break;\r\n                case 0x7D : result = true; break;\r\n                case 0x7C : result = NewItems.flippers; break;\r\n                case 0x1E : result = NewItems.feather; break;\r\n                case 0x1F : result = true; break;\r\n                case 0x5E : result = NewItems.flippers; break;\r\n                case 0x5F : result = NewItems.flippers; break;\r\n\r\n                /* D5 */\r\n                case 0xA2 : result = NewItems.flippers; break;\r\n                case 0xA3 : result = NewItems.flippers; break;\r\n                case 0xA4 : result = (NewItems.feather && NewItems.hookshot); break;\r\n                case 0xA5 : result = (NewItems.feather && NewItems.hookshot); break;\r\n                case 0xA6 : result = NewItems.feather; break;\r\n                case 0xA7 : result = NewItems.feather; break;\r\n                case 0xA8 : result = NewItems.feather; break;\r\n                case 0xA9 : result = NewItems.feather; break;\r\n\r\n                /* D6 */\r\n                case 0xD8 : result = NewItems.feather; break;\r\n                case 0xD9 : result = NewItems.feather; break;\r\n                case 0xDA : result = true; break;\r\n                case 0xDB : result = NewItems.feather; break;\r\n                case 0xDC : result = true; break;\r\n                case 0xDD : result = true; break;\r\n\r\n                /* Caves */\r\n                case 0xEB : result = NewItems.feather; break;                        // Under castle\r\n                case 0xEC : result = NewItems.feather; break;                        // Under castle\r\n\r\n                default   : result = false;\r\n            }\r\n            break;\r\n        \r\n        case 2 : \r\n            switch (roomID_next) {\r\n                /* D7 */\r\n                case 0xF8 : result = true; break;\r\n                case 0xE8 : result = true; break;\r\n\r\n                /* D8 */\r\n                case 0x60 : result = NewItems.fireRod && NewItems.feather; break;\r\n                case 0x61 : result = NewItems.fireRod; break;\r\n                case 0x62 : result = NewItems.fireRod && NewItems.feather; break;\r\n                case 0x63 : result = NewItems.fireRod && NewItems.feather; break;\r\n                case 0x64 : result = NewItems.feather; break;\r\n                case 0x65 : result = NewItems.feather; break;\r\n                case 0x66 : result = NewItems.feather; break;\r\n                case 0x67 : result = (NewItems.feather && NewItems.boots) || NewItems.hookshot; break;\r\n                case 0x68 : result = NewItems.feather; break;\r\n                case 0x69 : result = NewItems.feather; break;\r\n                case 0x6A : result = NewItems.feather; break;\r\n                case 0x6B : result = NewItems.feather; break;\r\n\r\n                /* Caves */\r\n                case 0xB1 : result = NewItems.flippers; break;                        // Fishing game\r\n                case 0xC0 : result = NewItems.flippers; break;                        // Underwater paggage to D5\r\n                case 0xC1 : result = NewItems.flippers; break;                        // Underwater paggage to D5\r\n                case 0xF5 : result = NewItems.flippers && NewItems.feather; break;    // Fisherman under the bridge\r\n                case 0xE9 : result = true; break;                                     // Seashell mansion\r\n                case 0xFD : result = NewItems.flippers; break;                        // Manbo\r\n\r\n                default   : result = false;\r\n            }\r\n            break;\r\n\r\n        default :\r\n            result = false;\r\n    }\r\n\r\n    let hasBlock = !result;    \r\n    \r\n    return {\r\n        handled : true,\r\n        hasBlock : hasBlock,\r\n        blockedReason: \"Minidungeon\",\r\n        allow : result,\r\n    }\r\n};","import { LA_FIREROD } from \"../../other/uConstants\";\r\n\r\nexport const FirerodLogic = (props) => {\r\n    const { x, y, uwID_curr, roomID_curr, NewItems, roomX_curr, roomY_curr } = props;\r\n\r\n    /* Only handling the one room in D8 with a chest spawn event */\r\n    if ((uwID_curr === 2) && (roomID_curr === 0x46) && (roomX_curr === 4) && (roomY_curr === 6)) {\r\n        if (NewItems.fireRod) {\r\n            return {\r\n                handled : true,\r\n                added : [{x : x - 3, y : y}],\r\n                hasBlock : false,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                handled : true,\r\n                hasBlock : true,\r\n                blockedReason: \"Firerod\",\r\n                blockedItems : [LA_FIREROD],\r\n            };\r\n        }\r\n    }\r\n\r\n    /* Only handling the one room in D8 with a chest spawn event */\r\n    if ((uwID_curr === 2) && (roomID_curr === 0x46) && (roomX_curr === 5) && (roomY_curr === 6)) {\r\n        if (NewItems.fireRod) {\r\n            return {\r\n                handled : true,\r\n                added : [{x : x + 3, y: y}],\r\n                hasBlock : false,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                handled : true,\r\n                hasBlock : true,\r\n                blockedReason: \"Firerod\",\r\n                blockedItems : [LA_FIREROD],\r\n            };\r\n        }\r\n    }\r\n\r\n    return { \r\n        handled : false\r\n    };\r\n};\r\n","import { LA_BOW } from \"../../other/uConstants\";\r\n\r\nexport const BowLogic = (props) => {\r\n    let { x, y, uwID_curr, roomID_curr, NewItems, roomX_curr, roomY_curr } = props;\r\n\r\n    /* Only handling the one room in D8 with a chest spawn event */\r\n    if ((uwID_curr === 2) && (roomID_curr === 0x41) && (roomX_curr === 4) && (roomY_curr === 3)) {\r\n        if (NewItems.bow) {\r\n            return {\r\n                handled : true,\r\n                added : [{x : x, y : y - 2}],\r\n                hasBlock : false,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                handled : true,\r\n                hasBlock : true,\r\n                blockedReason : \"Bow\",\r\n                blockedItems : [LA_BOW],\r\n            };\r\n        }\r\n    }\r\n\r\n    return { \r\n        handled : false\r\n    };\r\n};","import { TileInSameRoom } from \"../../other/utilities\";\r\nimport { \r\n    DUNGEONS_SUBMAP_SET, \r\n    Z4_TILE_PIT, \r\n    Z4_TILE_FLIPPERS, \r\n    Z4_TILE_PITTRANSITION, \r\n    Z4_TILE_TRANS, \r\n    Z4_BOARD_STATE_UNCLEARED, \r\n    Z4_TILE_GRASS, \r\n    LA_SWORDv0, \r\n    LA_FIREROD, \r\n    LA_POWDER, \r\n    LA_BOOMERANG,\r\n    Z4_TILE_SPECIALGRASS,\r\n} from \"../../other/uConstants\";\r\n\r\nexport const RoosterLogic = (props) => {\r\n    const { x, y, x2, y2, NewItems, stateArr, tileTypesArr, uwID_curr, maxXSquares, maxYSquares, uwIDArr, roomIDArr, subMapIDArr } = props;\r\n\r\n    /* Must be in the same room */\r\n    if (!TileInSameRoom(x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n        return {\r\n            handled : false\r\n        };\r\n    }\r\n\r\n    let xx = Math.trunc(x / 10);\r\n    let yy = Math.trunc(y / 8);\r\n    let subMapID = subMapIDArr[yy][xx];\r\n\r\n    /* No rooster in dungeons */\r\n    if ((uwID_curr !== 0) && (DUNGEONS_SUBMAP_SET.includes(subMapID))) {\r\n        return {\r\n            handled : false\r\n        };\r\n    }\r\n\r\n    const RoosterFly = (x, y, x2, y2, pitArr, transparentArr, grassArr) => {\r\n\r\n        let d;\r\n        let x3;\r\n        let y3;\r\n        let tileType2;\r\n\r\n        for (d = 1; d <= 4; d++) {\r\n            switch (d) {\r\n                case 1 : \r\n                    x3 = x2;\r\n                    y3 = y2 - 1;\r\n                    break;\r\n\r\n                case 2 : \r\n                    x3 = x2 + 1;\r\n                    y3 = y2;\r\n                    break;\r\n\r\n                case 3 : \r\n                    x3 = x2;\r\n                    y3 = y2 + 1;\r\n                    break;\r\n\r\n                case 4 : \r\n                    x3 = x2 - 1;\r\n                    y3 = y2;\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            /* Must be in the same room */\r\n            if (!TileInSameRoom(x, y, x3, y3, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) {\r\n                continue;\r\n            }\r\n\r\n            tileType2 = tileTypesArr[y3][x3];\r\n\r\n            /* If we found a new pit, add it to the list and fly again */\r\n            if (feathableTileTypes.includes(tileType2)) {\r\n                let count = 0;\r\n                for (let i = 0; i < pitArr.length; i++) {\r\n                    if ((pitArr[i].x === x3) && (pitArr[i].y === y3)) {\r\n                        count++;\r\n                    }\r\n                }\r\n                // let len = pitArr.filter(o => o.x === x3 && o.y === y3).length;\r\n                if (count === 0) {\r\n                    pitArr.push({x : x3, y : y3});\r\n                    RoosterFly(x, y, x3, y3, pitArr, transparentArr, grassArr);\r\n                }\r\n            }\r\n\r\n            /* If we found a new transparent tile, add it to the list and stop the current recurrsion */\r\n            else if (tileType2 === Z4_TILE_TRANS) {\r\n                let count = 0;\r\n                for (let i = 0; i < transparentArr.length; i++) {\r\n                    if ((transparentArr[i].x === x3) && (transparentArr[i].y === y3)) {\r\n                        count++;\r\n                    }\r\n                }\r\n                if (count === 0) {\r\n                    if ((x !== x3) || (y !== y3)) {\r\n                        transparentArr.push({x : x3, y : y3});\r\n                    }\r\n                }\r\n            }\r\n            \r\n            /* If the landing spot is grass, we technically could land */\r\n            else if (tileType2 === Z4_TILE_GRASS) {\r\n                let count = 0;\r\n                for (let i = 0; i < grassArr.length; i++) {\r\n                    if ((grassArr[i].x === x3) && (grassArr[i].y === y3)) {\r\n                        count++;\r\n                    }\r\n                }\r\n                if (count === 0) {\r\n                    if ((x !== x3) || (y !== y3)) {\r\n                        grassArr.push({x : x3, y : y3});\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const FinishRoosterFly = (transparentArr, grassArr) => {\r\n        /* Find only new tiles */\r\n        let transparentArrFiltered = transparentArr.filter(o => stateArr[o.y][o.x] === Z4_BOARD_STATE_UNCLEARED);\r\n        let grassArrFiltered = grassArr.filter(o => stateArr[o.y][o.x] === Z4_BOARD_STATE_UNCLEARED);\r\n\r\n        if ((transparentArrFiltered.length > 0) || (grassArrFiltered.length > 0)) {\r\n            \r\n            if (!(NewItems.flags.rooster && NewItems.powerBracelet)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : true,\r\n                    allow : true,\r\n                    blockedReason : \"Rooster or PowerBracelet\",\r\n                    added : added\r\n                };\r\n            }\r\n\r\n            if (transparentArrFiltered.length > 0) {\r\n                transparentArrFiltered.forEach(o => {\r\n                    added.push({x : o.x, y : o.y});\r\n                });\r\n            }\r\n\r\n            if (!(NewItems.sword || NewItems.fireRod)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : true,\r\n                    blockedReason : \"Sword or FireRod\",\r\n                    blockedItems : [LA_SWORDv0, LA_FIREROD],\r\n                    added : added\r\n                };\r\n            }\r\n\r\n            if (grassArr.length > 0) {\r\n                grassArr.forEach(o => {\r\n                    added.push({x : o.x, y : o.y});\r\n                });\r\n            }\r\n\r\n            return {\r\n                handled : true,\r\n                hasBlock : false,\r\n                added : added\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                handled : false\r\n            };\r\n        }\r\n    };\r\n\r\n    let feathableTileTypes = [Z4_TILE_PIT, Z4_TILE_FLIPPERS, Z4_TILE_PITTRANSITION];\r\n    let pitArr = [];\r\n    let transparentArr = [];\r\n    let grassArr = [];\r\n    let added = [];\r\n    let tileType_curr = tileTypesArr[y][x];\r\n    let tileType = tileTypesArr[y2][x2];\r\n\r\n    if (tileType_curr === Z4_TILE_TRANS) {\r\n        if (feathableTileTypes.includes(tileType)) {\r\n            RoosterFly(x, y, x2, y2, pitArr, transparentArr, grassArr);\r\n            let result = FinishRoosterFly(transparentArr, grassArr);\r\n            return result;\r\n        }\r\n        else if (tileType === Z4_TILE_SPECIALGRASS) {\r\n            if (!(NewItems.sword || NewItems.fireRod || NewItems.powder || NewItems.boomerang)) {\r\n                return {\r\n                    handled : true,\r\n                    hasBlock : true,\r\n                    added : added,\r\n                    blockedReason : \"Weapon no hookshot\",\r\n                    blockedItems : [LA_SWORDv0, LA_FIREROD, LA_POWDER, LA_BOOMERANG],\r\n                }\r\n            }\r\n            else {\r\n                RoosterFly(x, y, x2, y2, pitArr, transparentArr, grassArr);\r\n                let result = FinishRoosterFly(transparentArr, grassArr);\r\n                return result;\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                handled : false\r\n            };\r\n        }\r\n    }\r\n  \r\n    return {\r\n        handled : false\r\n    }\r\n};","import { IntToHex, LowNibble, TileInSameRoom, TileExists } from \"../../other/utilities\";\r\nimport { \r\n    LA_TailKey, \r\n    LA_GoldenLeaf,\r\n    LA_AngularKey,\r\n    LA_BirdKey,\r\n    LA_FaceKey,\r\n    LA_SWORDv0,\r\n    LA_FLIPPERS, \r\n    LA_BOMB, \r\n    LA_POWERBRACLET, \r\n    LA_FIREROD,\r\n    LA_BOOTS,\r\n    LA_POWDER,\r\n    LA_BOOMERANG,\r\n    Z4_TILE_TRANS,\r\n    Z4_TILE_FLIPPERS,\r\n    Z4_TILE_GRASS,\r\n    Z4_TILE_ORBBLOCK1,\r\n    Z4_TILE_ORBBLOCK2,\r\n    Z4_TILE_PIT,\r\n    Z4_TILE_PITTRANSITION,\r\n    Z4_TILE_RIVERRAPID,\r\n    Z4_BOARD_STATE_UNCLEARED,\r\n    Z4_BOARD_STATE_COMPLETE,\r\n    Z4_TILE_KEYLOCKED,\r\n    Z4_TILE_LEDGE,\r\n    Z4_TILE_SOLID,\r\n    Z4_TILE_POT,\r\n    Z4_TILE_DOORCLOSED,\r\n    Z4_TILE_BOMBABLE,\r\n    Z4_TILE_SWORDABLE,\r\n    Z4_TILE_PUSHABLEBLOCK,\r\n    Z4_TILE_HOOKSHOT,\r\n    Z4_TILE_CHEST,\r\n    Z4_TILE_STAIRS,\r\n    Z4_TILE_PARTSOLID,\r\n    Z4_TILE_ONEWAYTOP,\r\n    Z4_TILE_STRANGEOBJECT,\r\n    Z4_TILE_KEYHOLE,\r\n    Z4_TILE_UPDOWNONLY,\r\n    Z4_TILE_ICECUBE,\r\n    Z4_TILE_MDLADDER,\r\n    Z4_TILE_UNLITTORCH,\r\n    Z4_TILE_NIGHTMAREDOOR,\r\n    Z4_TILE_SPECIALGRASS,\r\n    Z4_TILE_DUNGEONGATE,\r\n    Z4_TILE_TOMBSTONE,\r\n    LA_SmallKey,\r\n} from \"../../other/uConstants\";\r\n\r\nexport const TileTypeLogic = (props) => {\r\n    let { x2, y2, NewItems, d, tileTypesArr, tileIDsArr, uwID_next, roomID_next } = props;\r\n\r\n    let result;\r\n    let tileType = tileTypesArr[y2][x2];\r\n    let tileID = tileIDsArr[y2][x2];\r\n\r\n    const HandleTransparent = (props) => {\r\n        const { uwID_curr, roomID_curr, tileID_next } = props;\r\n\r\n        /* Castle button */\r\n        if ((uwID_curr === 2) && (roomID_curr === 0xC3) && (tileID_next === 0xAA)) {\r\n            NewItems.flags.castleButtonPressed++;\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleSolid = (props) => {\r\n        const { x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr, d } = props;\r\n\r\n        /* If transitioning rooms and landing on a solid going down, do the ledge falling down logic */\r\n        if ((!TileInSameRoom(x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr)) && (d === 3)) {\r\n            let y3 = y2 + 1;\r\n\r\n            while (TileExists(x2, y3, maxXSquares, maxYSquares)) {\r\n                let tileType1 = tileTypesArr[y3][x2];\r\n\r\n                if ([Z4_TILE_TRANS, Z4_TILE_FLIPPERS, Z4_TILE_GRASS, Z4_TILE_ORBBLOCK1, Z4_TILE_ORBBLOCK2, Z4_TILE_PIT, Z4_TILE_PITTRANSITION, Z4_TILE_RIVERRAPID].includes(tileType1)) {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : false,\r\n                        added : [{x : x2, y: y3}],\r\n                    };\r\n                }\r\n\r\n                y3++;\r\n            }\r\n            \r\n            return {\r\n                hasBlock : false,\r\n                allow : false,\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : false\r\n        };\r\n    };\r\n    \r\n    const HandlePot = (props) => {\r\n        let { NewItems } = props;\r\n    \r\n        if (!NewItems.powerBracelet) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Power Bracelet\",\r\n                blockedItems : [LA_POWERBRACLET],\r\n                allow : false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n    };\r\n    \r\n    const HandleKeyLocked = (props) => {\r\n        const { x, y, x2, y2, NewItems, subMapIDArr, stateArr } = props;\r\n\r\n        /* If we already landed on the key tile, then we should have already opened it */\r\n        if (stateArr[y2][x2] !== Z4_BOARD_STATE_UNCLEARED) {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n\r\n        let xx = Math.trunc(x / 10);\r\n        let yy = Math.trunc(y / 8);\r\n        let subMapID = subMapIDArr[yy][xx];\r\n\r\n        /* Color dungeon */\r\n        if (subMapID === 11) {\r\n            subMapID = 9; // Slot 10\r\n        }\r\n\r\n        if (NewItems.dungeonItems[subMapID].smallKey > 0) {\r\n            NewItems.dungeonItems[subMapID].smallKey--;\r\n            NewItems.dungeonItems[subMapID].smallKeyUsed++; \r\n\r\n            let LockedDoorsArr = [];\r\n\r\n            /* Attempt to find near by keylocks that are adjacent */\r\n            for (xx = x2 - 1; xx <= x2 + 1; xx++) {\r\n                for (yy = y2 - 1; yy <= y2 + 1; yy++) {\r\n                    if (tileTypesArr[yy][xx] === Z4_TILE_KEYLOCKED) {\r\n                        LockedDoorsArr.push({x : xx, y : yy});\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return {\r\n                hasBlock : false,\r\n                added : LockedDoorsArr,\r\n                allow : true\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Small key\",\r\n            blockedItems : [LA_SmallKey],\r\n            allow : false\r\n        };\r\n    };\r\n    \r\n    const HandleDoorClosed = (props) => {\r\n        const { x, y, x2, y2, maxXSquares, maxYSquares, eventsArr, eventsStateArr, uwIDArr, roomIDArr } = props;\r\n\r\n        if ((!TileInSameRoom(x, y, x2, y2, maxXSquares, maxYSquares, uwIDArr, roomIDArr))) {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n\r\n        let xx = Math.trunc(x / 10);\r\n        let yy = Math.trunc(y / 8);\r\n        let event = eventsArr[yy][xx];\r\n        let eventID = LowNibble(event);  \r\n        let state = eventsStateArr[yy][xx];\r\n        \r\n        /* Event 0x00 checked: Removing that top D3 key door with a fake closed door lead to this check. */\r\n        if ((eventID === 0x00) || (eventID === 0x02) || (eventID === 0x03) || (eventID === 0x0C)) {\r\n            if (state === Z4_BOARD_STATE_COMPLETE) {\r\n                return {\r\n                    hasBlock: false,\r\n                    allow : true\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    hasBlock: true,\r\n                    blockedReason : \"Event Door Closed\",\r\n                    allow : false\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            hasBlock : true,\r\n            blockedReason : \"Event Door Closed\",\r\n            allow : false\r\n        };\r\n    };\r\n    \r\n    const HandleBombable = (props) => {\r\n        let { NewItems } = props;\r\n    \r\n        if (!NewItems.bomb) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Bomb\",\r\n                blockedItems : [LA_BOMB],\r\n                allow : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleSwordable = (props) => {\r\n        let { NewItems } = props;\r\n    \r\n        if (!NewItems.sword) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Sword\",\r\n                blockedItems : [LA_SWORDv0],\r\n                allow : false\r\n            };\r\n        }\r\n        \r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandlePit = (props) => {\r\n        return {\r\n            hasBlock : false,\r\n            allow : false\r\n        };\r\n    };\r\n    \r\n    const HandleWater = (props) => {\r\n        let { NewItems } = props;\r\n        \r\n        if (!NewItems.flippers) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Flippers\",\r\n                blockedItems : [LA_FLIPPERS],\r\n                allow : false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n    };\r\n    \r\n    const HandlePushblock = (props) => {\r\n\r\n        const { d, NewItems, uwID_curr, roomID_curr, roomX_next, roomY_next } = props;\r\n\r\n        let allow = false;\r\n\r\n        switch (true) {\r\n            /* D1 */\r\n            case (uwID_curr === 1) && (roomID_curr === 0x04) : allow = true; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x07) : allow = true; break;\r\n\r\n            /* D2 */\r\n            case (uwID_curr === 1) && (roomID_curr === 0x27) : allow = true; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x2F) : allow = true; break;\r\n\r\n            /* D3 */\r\n            case (uwID_curr === 1) && (roomID_curr === 0x50) : (d === 4) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x4C) : (d === 2) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x49) : (d === 3) ? allow = true : allow = false; break;           \r\n            case (uwID_curr === 1) && (roomID_curr === 0x46) : \r\n                if ((roomX_next === 7) && (roomY_next === 6)) {\r\n                    if (d === 2) {\r\n                        allow = true;\r\n                    }\r\n                    else {\r\n                        allow = false;\r\n                    }\r\n                }\r\n                else {\r\n                    allow = true;\r\n                }\r\n                break;\r\n\r\n            /* D4 */\r\n            case (uwID_curr === 1) && (roomID_curr === 0x6C) : allow = true; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x6E) : allow = false; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x68) : (d === 4) ? allow = true : allow = false; break;  \r\n            case (uwID_curr === 1) && (roomID_curr === 0x71) : (d === 2) ? allow = true : allow = false; break;  \r\n            case (uwID_curr === 1) && (roomID_curr === 0x6A) : \r\n                if ((roomX_next === 5) && (roomY_next === 4)) {\r\n                    if (d === 1) {\r\n                        allow = true;\r\n                    }\r\n                    else {\r\n                        allow = false;\r\n                    }\r\n                }\r\n                else {\r\n                    allow = false;\r\n                }\r\n                break;\r\n\r\n            /* D5 */\r\n            case (uwID_curr === 1) && (roomID_curr === 0x91) : allow = true; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x94) : (d === 3) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x8C) : allow = true; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x87) : (d === 4) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0x81) : allow = true; break;\r\n\r\n            /* D6 */\r\n            case (uwID_curr === 1) && (roomID_curr === 0xB7) : allow = false; break;\r\n            case (uwID_curr === 1) && (roomID_curr === 0xCB) : allow = true; break;\r\n\r\n            /* D7 */\r\n            case (uwID_curr === 2) && (roomID_curr === 0x18) : (d === 4) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x1C) : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x14) : (d === 2) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x15) : (d !== 4) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x29) : (d === 3) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x2E) : (d === 2) || (d === 3) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x24) : allow = true; break;\r\n\r\n            /* D8 */\r\n            case (uwID_curr === 2) && (roomID_curr === 0x40) : allow = true; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x4D) : (d === 2) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x47) : (d === 2) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x48) : (d === 3) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x49) : (d === 4) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x4F) : (d === 3) || (d === 4) ? allow = true : allow = false; break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x50) : allow = true; break;\r\n\r\n            /* Color */\r\n            case (uwID_curr === 3) && (roomID_curr === 0x02) : allow = true; break;\r\n\r\n            /* Caves */\r\n            case (uwID_curr === 1) && (roomID_curr === 0xEA) : (d === 2) ? allow = true : allow = false; break;                 /* D4 shortcut */\r\n            case (uwID_curr === 1) && (roomID_curr === 0xF0) : allow = true; break;                                             /* Hookshot to D6 */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xF4) : (d === 4) ? allow = true : allow = false; break;                 /* Heart piece boots cave */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xC8) : allow = true; break;                                             /* Richard basement 1 */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xCD) : allow = true; break;                                             /* Near mabe village chest cave */\r\n            case (uwID_curr === 2) && (roomID_curr === 0x7D) :                                                                  /* Rooster cave */\r\n                if ((roomX_next === 6) && (roomY_next === 2) && (d === 4)) {\r\n                    allow = false;\r\n                }\r\n                else {\r\n                    allow = true;\r\n                }\r\n                break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0xF7) : allow = true; break;                                             /* Animal village heartpiece cave */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xDF) : allow = false; break;                                            /* Cave under the grave */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xBD) : allow = true; break;                                             /* Log cave */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xAB) :                                                                  /* Log cave with heart piece */\r\n                if ((roomX_next === 4) && (roomY_next === 4)) {\r\n                    allow = (d === 3);\r\n                }\r\n                else if ((roomX_next === 3) && (roomY_next === 4)) {\r\n                    allow = (d === 4);\r\n                }\r\n                else if (\r\n                    ((roomX_next === 3) && (roomY_next === 5)) || \r\n                    ((roomX_next === 2) && (roomY_next === 5))\r\n                ) {\r\n                    allow = false;\r\n                }\r\n                else {\r\n                    allow = true;\r\n                }\r\n                break;\r\n            case (uwID_curr === 2) && (roomID_curr === 0x95) : allow = true; break;                                                /* Odd room */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xF2) : allow = true; break;                                                /* 5 Chest cave */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xEB) : allow = true; break;                                                /* Hookshot across to D8 */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xB7) : allow = (NewItems.sword); break;                                    /* On the way to tal tal heights */\r\n            case (uwID_curr === 2) && (roomID_curr === 0xC7) : allow = (NewItems.keys.slimeKey) || (NewItems.keys.goldenLeaves >= 5); break; /* Richard house */\r\n            default : \r\n                allow = false;\r\n                console.log(`You missed a pushblock! uwID=${uwID_curr} roomID=${IntToHex(roomID_curr)}`);\r\n                break;\r\n        }\r\n\r\n        return {\r\n            handled : true,\r\n            hasBlock : false,\r\n            allow : allow\r\n        }\r\n\r\n\r\n        // const { x, y } = props;\r\n\r\n        // let result = PushBlockLogic(props);\r\n        // if (result.handled) {\r\n        //     if (result.added) {\r\n        //         result.added.forEach(o => {\r\n        //             AddVisited(o.x, o.y, props);\r\n        //         });\r\n        //     }\r\n        //     if (result.hasBlock) {\r\n        //         AddRevisit(x, y, props, `PushBlockLogic`);\r\n        //         return {\r\n        //             hasBlock : true,\r\n        //             allow : false\r\n        //         }    \r\n        //     }\r\n        //     else if (!result.allow) {\r\n        //         return {\r\n        //             hasBlock : false,\r\n        //             allow : false\r\n        //         }   \r\n        //     }\r\n        //     else {\r\n        //         // AddVisited(props.x2, props.y2, props);\r\n        //         return {\r\n        //             hasBlock : false,\r\n        //             allow : true,\r\n        //             added: [{x : props.x2, y: props.y2}]\r\n        //         }   \r\n        //     }\r\n        // }\r\n\r\n\r\n\r\n\r\n\r\n        \r\n        // const { x2, y2 } = props;\r\n\r\n        // /* Stupid D4 trying to get early flippers... */\r\n        // if (((d === 2) || (d === 3)) && (tileTypesArr[y2 - 1][x2 + 1] === Z4_TILE_SOLID) && (tileTypesArr[y2 + 1][x2 + 1] === Z4_TILE_LEDGE)) {\r\n        //     return {\r\n        //         hasBlock : false,\r\n        //         allow : false\r\n        //     }; \r\n        // }\r\n        \r\n        // return {\r\n        //     hasBlock : false,\r\n        //     allow : true\r\n        // };\r\n    };\r\n    \r\n    const HandleHookshotable = (props) => {\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleChest = (props) => {\r\n        const { d, x, y, eventsArr, eventsStateArr, tileID_next, uwID_curr, roomID_curr, NewItems } = props;\r\n    \r\n        if (d !== 1) {\r\n            return {\r\n                hasBlock: false,\r\n                allow : false\r\n            };\r\n        }\r\n\r\n        if (tileID_next === 0xA1) {\r\n            let xx = Math.trunc(x / 10);\r\n            let yy = Math.trunc(y / 8);\r\n            let event = eventsArr[yy][xx];\r\n            let eventID = LowNibble(event);  \r\n            let state = eventsStateArr[yy][xx];\r\n            if ((eventID === 0x01) || (eventID === 0x06)) {\r\n                if (state === Z4_BOARD_STATE_COMPLETE) {\r\n                    return {\r\n                        hasBlock: false,\r\n                        allow : true\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock: true,\r\n                        blockedReason : \"Event Chest\",\r\n                        allow : false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if ((uwID_curr === 2) && (roomID_curr === 0xF2)) {\r\n                if (!NewItems.flags.fiveChestRoomOpened) {\r\n                    NewItems.flags.fiveChestRoomOpened++;\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : false\r\n                    }; \r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    hasBlock : false,\r\n                    allow : true\r\n                };\r\n            }\r\n        }\r\n    };\r\n    \r\n    const HandleTransition = (props) => {\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandlePartSolid = (props) => {\r\n        // Handled in AllowMovement\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleOneWayTop = (props) => {\r\n        let { d } = props;\r\n\r\n        if (d !== 1) {\r\n            return {\r\n                hasBlock : false,\r\n                allow : false\r\n            };  \r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleStrangeObject = (props) => {\r\n        let { NewItems } = props;\r\n    \r\n        if (!NewItems.boots) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Boots\",\r\n                blockedItems : [LA_BOOTS],\r\n                allow : false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n    };\r\n    \r\n    const HandleLedge = (props) => {\r\n        const { x2, y2, maxXSquares, maxYSquares, d, uwID_next } = props;\r\n\r\n        switch (d) {\r\n\r\n            /* Ledge to jump up: fall space after ledge */\r\n            case 1 : \r\n                if (\r\n                    ((uwID_next !== 0) && (tileID === 0x22))\r\n                ) {\r\n                    let y3 = y2 - 1;\r\n\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : false,\r\n                        added : [{x : x2, y: y3}],\r\n                    };\r\n                }  \r\n                break;\r\n\r\n            /* Ledge to jump right: fall space after ledge */\r\n            case 2 : \r\n                if (\r\n                    ((uwID_next === 0) && (tileID === 0xF3)) ||\r\n                    ((uwID_next !== 0) && (tileID === 0x23))\r\n                ) {\r\n                    let x3 = x2 + 1;\r\n\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : false,\r\n                        added : [{x : x3, y: y2}],\r\n                    };\r\n                }\r\n                break;\r\n\r\n            /* Ledge to jump down: Fall until you can land (or a Well...) */\r\n            case 3 : \r\n                if (\r\n                    ((uwID_next === 0) && (tileID === 0x4A)) ||   // Overworld ledge\r\n                    ((uwID_next !== 0) && (tileID === 0x21)) ||   // Dungeon ledge\r\n                    ((uwID_next === 0) && (tileID === 0xE9))      // Waterfall\r\n                ) {\r\n                    let y3 = y2 + 1;\r\n        \r\n                    while (TileExists(x2, y3, maxXSquares, maxYSquares)) {\r\n                        let tileType1 = tileTypesArr[y3][x2];\r\n        \r\n                        if ([Z4_TILE_TRANS, Z4_TILE_FLIPPERS, Z4_TILE_GRASS, Z4_TILE_ORBBLOCK1, Z4_TILE_ORBBLOCK2, Z4_TILE_PIT, Z4_TILE_PITTRANSITION, Z4_TILE_RIVERRAPID].includes(tileType1)) {\r\n                            return {\r\n                                hasBlock : false,\r\n                                allow : false,\r\n                                added : [{x : x2, y: y3}],\r\n                            };\r\n                        }\r\n\r\n                        // Well\r\n                        let tileID = tileIDsArr[y3][x2];\r\n                        if (tileID === 0x61) {\r\n                            return {\r\n                                hasBlock : false,\r\n                                allow : false,\r\n                                added : [{x : x2, y: y3}],\r\n                            };\r\n                        }\r\n        \r\n                        y3++;\r\n                    }\r\n                    \r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : false,\r\n                    };\r\n                }\r\n                break; \r\n\r\n            /* Ledge to jump right: fall space after ledge */\r\n            case 4 : \r\n                if (\r\n                    ((uwID_next === 0) && (tileID === 0xF0)) ||\r\n                    ((uwID_next !== 0) && (tileID === 0x24))\r\n                ) {\r\n                    let x3 = x2 - 1;\r\n        \r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : false,\r\n                        added : [{x : x3, y: y2}],\r\n                    };\r\n                }\r\n                break;\r\n\r\n            default : \r\n                return {\r\n                    hasBlock : false,\r\n                    allow : false\r\n                };\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : false\r\n        };     \r\n    };\r\n    \r\n    const HandleKeyHole = (props) => {\r\n        let { x, y, d, uwID_next, roomID_next } = props;\r\n\r\n        if (d === 1) {\r\n            if ((uwID_next === 0) && (roomID_next === 0xD3)) {\r\n                if (NewItems.keys.tailKey) {\r\n                    NewItems.flags.tailKeyUsed++;\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock : true,\r\n                        blockedReason : \"KeyHole\",\r\n                        blockedItems : [LA_TailKey],\r\n                        allow : false\r\n                    };\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0xB5)) {\r\n                if (NewItems.keys.slimeKey) {\r\n                    NewItems.flags.slimeKeyUsed++;\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock : true,\r\n                        blockedReason : \"KeyHole\",\r\n                        blockedItems : [LA_GoldenLeaf],\r\n                        allow : false\r\n                    };\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0x2B)) {\r\n                if (NewItems.keys.anglarKey) {\r\n                    NewItems.flags.anglarKeyUsed++;\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock : true,\r\n                        blockedReason : \"KeyHole\",\r\n                        blockedItems : [LA_AngularKey],\r\n                        allow : false\r\n                    };\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0x8C)) {\r\n                if (NewItems.keys.faceKey) {\r\n                    NewItems.flags.faceKeyUsed++;\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock : true,\r\n                        blockedReason : \"KeyHole\",\r\n                        blockedItems : [LA_FaceKey],\r\n                        allow : false\r\n                    };\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0x0E)) {\r\n                if (NewItems.keys.birdKey) {\r\n                    NewItems.flags.birdKeyUsed++;\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true,\r\n                        added : [{x : x + 4, y: y - 3}],\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock : true,\r\n                        blockedReason : \"KeyHole\",\r\n                        blockedItems : [LA_BirdKey],\r\n                        allow : false\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : false\r\n        };\r\n    };\r\n    \r\n    const HandleUpDownOnly = (props) => {\r\n        let { d } = props;\r\n\r\n        if ((d === 2) || (d === 4)) {\r\n            return {\r\n                hasBlock : false,\r\n                allow : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleGrass = (props) => {\r\n        let { NewItems } = props;\r\n    \r\n        if (\r\n            (!NewItems.sword) && \r\n            // (!NewItems.bomb) && \r\n            (!NewItems.powder) && \r\n            (!NewItems.powerBracelet) && \r\n            (!NewItems.fireRod) && \r\n            (!NewItems.boomerang)\r\n        ) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Weapon\",\r\n                blockedItems : [LA_SWORDv0, LA_POWDER, LA_POWERBRACLET, LA_FIREROD, LA_BOOMERANG],\r\n                allow : false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n    };\r\n    \r\n    const HandleRiverRapid = (props) => {\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleIceCube = (props) => {\r\n        let { NewItems } = props;\r\n    \r\n        if (!NewItems.fireRod) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Firerod\",\r\n                allow : false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n    };\r\n    \r\n    const HandleMDLadder = (props) => {\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleUnlitTorch = (props) => {\r\n        let { NewItems } = props;\r\n    \r\n        if (\r\n            !NewItems.fireRod &&\r\n            !NewItems.powder\r\n        ) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Firerod or powder\",\r\n                allow : false\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n    };\r\n    \r\n    const HandleNightmareDoor = (props) => {\r\n        const { x, y, NewItems, subMapIDArr } = props;\r\n\r\n        let xx = Math.trunc(x / 10);\r\n        let yy = Math.trunc(y / 8);\r\n        let subMapID = subMapIDArr[yy][xx];\r\n\r\n        /* Color dungeon */\r\n        if (subMapID === 11) {\r\n            subMapID = 9; // Slot 10\r\n        }\r\n\r\n        if (NewItems.dungeonItems[subMapID].nKey > 0) {\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Nightmare Key\",\r\n                allow : false\r\n            };\r\n        }\r\n    };\r\n    \r\n    // TODO more advanced logic\r\n    const HandleOrbBlock1 = (props) => {\r\n        let { NewItems } = props;\r\n\r\n        if (!NewItems.bomb) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Bomb\",\r\n                allow : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    // TODO more advanced logic\r\n    const HandleOrbBlock2 = (props) => {\r\n        let { NewItems } = props;\r\n\r\n        if (!NewItems.bomb) {\r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Bomb\",\r\n                allow : false\r\n            };\r\n        }\r\n        \r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandlePitTransition = (props) => {\r\n        return {\r\n            hasBlock : false,\r\n            allow : true\r\n        };\r\n    };\r\n    \r\n    const HandleSpecialGrass = (props) => {\r\n        let { NewItems, uwID_curr, roomID_curr } = props;\r\n\r\n        /* Staircase under bush */\r\n        if (\r\n            ((uwID_curr === 0) && (roomID_curr === 0x4A)) ||      // Staircase towards castle\r\n            ((uwID_curr === 0) && (roomID_curr === 0x07)) ||      // Staircase towards D8\r\n            ((uwID_curr === 0) && (roomID_curr === 0xAA)) ||      // Towards Animal village\r\n            ((uwID_curr === 0) && (roomID_curr === 0xD4))         // Sign post maze\r\n        ) {\r\n            if (NewItems.sword || NewItems.powder || NewItems.fireRod ||  NewItems.boomerang) {\r\n                return {\r\n                    hasBlock : false,\r\n                    allow : true\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    hasBlock : true,\r\n                    blockedReason : \"Weapon no powder\",\r\n                    allow : false\r\n                };\r\n            }\r\n        }\r\n        \r\n        return {\r\n            hasBlock : false,\r\n            allow : false\r\n        };\r\n    };\r\n    \r\n    const HandleDungeonGate = (props) => {\r\n        let { d, uwID_next, roomID_next } = props;\r\n\r\n        if (d === 1) {\r\n            if ((uwID_next === 0) && (roomID_next === 0xD3)) {\r\n                if (NewItems.keys.tailKey) {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0xB5)) {\r\n                if (NewItems.keys.slimeKey) {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0x2B)) {\r\n                if (NewItems.keys.anglarKey) {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0x8C)) {\r\n                if (NewItems.keys.faceKey) {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ((uwID_next === 0) && (roomID_next === 0x0E)) {\r\n                if (NewItems.keys.birdKey) {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return {\r\n                hasBlock : true,\r\n                blockedReason : \"Overworld key\",\r\n                allow : false\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : false\r\n        };\r\n    };\r\n    \r\n    const HandleTombstone = (props) => {\r\n        /* Moveable */\r\n        if (tileID === 0xC5) {\r\n\r\n            /* Color dungeon final tombstone required power bracelet */\r\n            if ((uwID_next === 0) && (roomID_next === 0x77)) {\r\n\r\n                let roomX = Math.trunc(x2 % 10);\r\n                let roomY = Math.trunc(y2 % 8);\r\n\r\n                if ((roomX === 7) && (roomY === 1)) {\r\n                    if (!NewItems.powerBracelet) {\r\n                        return {\r\n                            hasBlock : true,\r\n                            blockedReason : \"Power Bracelet\",\r\n                            allow : false\r\n                        };\r\n                    }\r\n                    else {\r\n                        return {\r\n                            hasBlock : false,\r\n                            allow : true\r\n                        };\r\n                    }\r\n                }\r\n                else {\r\n                    return {\r\n                        hasBlock : false,\r\n                        allow : true\r\n                    };\r\n                }\r\n            }\r\n\r\n            return {\r\n                hasBlock : false,\r\n                allow : true\r\n            };\r\n        }\r\n\r\n        return {\r\n            hasBlock : false,\r\n            allow : false\r\n        };\r\n    };\r\n\r\n    //===============================================================================================================\r\n\r\n    /* Overworld waterfall jumping off ledge */\r\n    if ((tileID === 0xE9) && (d === 3)) {\r\n        tileType = Z4_TILE_LEDGE; \r\n    }\r\n\r\n    switch (tileType) {\r\n        case Z4_TILE_TRANS             : result = HandleTransparent(props); break;\r\n        case Z4_TILE_SOLID             : result = HandleSolid(props); break;\r\n        case Z4_TILE_POT               : result = HandlePot(props); break;\r\n        case Z4_TILE_KEYLOCKED         : result = HandleKeyLocked(props); break;\r\n        case Z4_TILE_DOORCLOSED        : result = HandleDoorClosed(props); break;\r\n        case Z4_TILE_BOMBABLE          : result = HandleBombable(props); break;\r\n        case Z4_TILE_SWORDABLE         : result = HandleSwordable(props); break;\r\n        case Z4_TILE_PIT               : result = HandlePit(props); break;\r\n        case Z4_TILE_FLIPPERS          : result = HandleWater(props); break;\r\n        case Z4_TILE_PUSHABLEBLOCK     : result = HandlePushblock(props); break;\r\n        case Z4_TILE_HOOKSHOT          : result = HandleHookshotable(props); break;\r\n        case Z4_TILE_CHEST             : result = HandleChest(props); break;\r\n        case Z4_TILE_STAIRS            : result = HandleTransition(props); break;\r\n        case Z4_TILE_PARTSOLID         : result = HandlePartSolid(props); break;\r\n        case Z4_TILE_ONEWAYTOP         : result = HandleOneWayTop(props); break;\r\n        case Z4_TILE_STRANGEOBJECT     : result = HandleStrangeObject(props); break;\r\n        case Z4_TILE_LEDGE             : result = HandleLedge(props); break;\r\n        case Z4_TILE_KEYHOLE           : result = HandleKeyHole(props); break;\r\n        case Z4_TILE_UPDOWNONLY        : result = HandleUpDownOnly(props); break;\r\n        case Z4_TILE_GRASS             : result = HandleGrass(props); break;\r\n        case Z4_TILE_RIVERRAPID        : result = HandleRiverRapid(props); break;\r\n        case Z4_TILE_ICECUBE           : result = HandleIceCube(props); break;\r\n        case Z4_TILE_MDLADDER          : result = HandleMDLadder(props); break;\r\n        case Z4_TILE_UNLITTORCH        : result = HandleUnlitTorch(props); break;\r\n        case Z4_TILE_NIGHTMAREDOOR     : result = HandleNightmareDoor(props); break;\r\n        case Z4_TILE_ORBBLOCK1         : result = HandleOrbBlock1(props); break;\r\n        case Z4_TILE_ORBBLOCK2         : result = HandleOrbBlock2(props); break;\r\n        case Z4_TILE_PITTRANSITION     : result = HandlePitTransition(props); break;\r\n        case Z4_TILE_SPECIALGRASS      : result = HandleSpecialGrass(props); break;\r\n        case Z4_TILE_DUNGEONGATE       : result = HandleDungeonGate(props); break;\r\n        case Z4_TILE_TOMBSTONE         : result = HandleTombstone(props); break;\r\n        default : \r\n            result = { hasBlock : true, blockedReason : \"Unknown TileType\", allow: false };\r\n            console.log(`Unhandled tileType with new logic: ${tileType}`);\r\n    }\r\n\r\n    return {\r\n        handled : true,\r\n        hasBlock : result.hasBlock,\r\n        blockedReason : result.blockedReason,\r\n        blockedItems : result.blockedItems,\r\n        allow : result.allow,\r\n        added : result.added,\r\n    }\r\n};\r\n\r\n","import { AddRevisit, AddCompleted } from \"../other/utilities\";\r\nimport { DoNextLogic } from \"./DoNextLogic\";\r\nimport { DoCurrentLogic } from \"./DoCurrentLogic\";\r\n\r\nexport const Go = (x, y, data_props, allowedTileType) => {\r\n    let hasBlock = false;\r\n    let result;\r\n\r\n    result = DoCurrentLogic(x, y, data_props);\r\n    hasBlock = result.hasBlock;\r\n    if (!result.allow) {\r\n        return;\r\n    }\r\n\r\n    result = DoNextLogic(x, y, data_props, allowedTileType);\r\n    hasBlock = hasBlock || result.hasBlock;\r\n\r\n    if (!hasBlock) {\r\n        AddCompleted(x, y, data_props);\r\n    }\r\n    else {    \r\n        let found = data_props.revisit.find(o => o.x === x && o.y === y);\r\n        if (!found) {\r\n            debugger;\r\n            AddRevisit(x, y, data_props, \"Did not catch a revisit reason!\");\r\n        }\r\n    }\r\n};","import { KeepGoing } from \"./KeepGoing\";\r\nimport { Loop } from \"./Loop\";\r\n\r\nexport const RunIt = (data_props) => {\r\n    Loop(data_props);\r\n\r\n    if (KeepGoing(data_props)) {\r\n        window.requestAnimationFrame(() =>{});\r\n        // window.requestAnimationFrame(Run);\r\n        return {\r\n            running : true,\r\n            result : undefined,\r\n        }\r\n    }\r\n    else {\r\n        /* Final draw */\r\n        // window.requestAnimationFrame(() => {\r\n            window.requestAnimationFrame(() =>{});\r\n            if (data_props.NewItems.flags.gameCompleted) {\r\n                let t0 = data_props.t0;\r\n                let t1 = performance.now();\r\n                console.log(`Game is completable in ${((t1 - t0) / 1000).toFixed(3)} seconds!`);\r\n                return {\r\n                    running : false,\r\n                    result : true\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    running : false,\r\n                    result : false,\r\n                }\r\n            }\r\n        // });\r\n\r\n        // return {\r\n        //     running : true,\r\n        //     result : false,\r\n        // }\r\n    }\r\n};","import { FillTile } from \"../other/uDraw\";\r\nimport { Go } from \"../Logic/Go\";\r\n\r\nexport const Loop = (props) => {\r\n    let { canvas, p, w, h, amountDraw, visited, revisit, rounds } = props;\r\n\r\n    let allowedTileType = undefined;\r\n    let x;\r\n    let y;\r\n    let arr;\r\n    let i;\r\n    let j;\r\n\r\n    /* Run the next amount of tiles */\r\n    for (i = 0; i < amountDraw; i++) {\r\n        /* Can we visit something? */\r\n        if ((visited.length === 0) && (revisit.length === 0)) {\r\n            continue;\r\n        }\r\n\r\n        /* Which array to look at? */\r\n        arr = (visited.length > 0) ? visited : revisit;\r\n\r\n        /* Find a tile with no known blocks */\r\n        j = arr.findIndex(o => typeof o.reason === 'undefined');\r\n        if (j === -1) {\r\n            j = 0;\r\n        }\r\n\r\n        /* Go with the selected tile */\r\n        x = arr[j].x;\r\n        y = arr[j].y;\r\n        allowedTileType = arr[j].allowedTileType;\r\n        arr.splice(j, 1);\r\n        FillTile(canvas, x, y, 'orange', p, w, h);\r\n        rounds++;\r\n        props.rounds = rounds;\r\n        Go(x, y, props, allowedTileType);\r\n    }\r\n};","import { Finish } from \"./Finish\";\r\nimport { clone } from \"../other/utilities\";\r\nimport { FillTile } from \"../other/uDraw\";\r\nimport { Go } from \"../Logic/Go\";\r\n\r\nexport const KeepGoing = (props) => {\r\n    const { rounds, maxRounds, visited, pastVisited, revisit, pastRevisit, completed, pastCompleted, canvas, p, w, h } = props;\r\n\r\n    /* Went past max rounds? */\r\n    if (rounds >= maxRounds) {\r\n        Finish(props, `Visualizer stopped due to hitting max rounds limits.  Rounds: ${rounds}`);\r\n        return false;\r\n    }\r\n\r\n    /* Da heck kind of bug did I introduce? */\r\n    if (visited.length >= 50000) {\r\n        console.log(visited);\r\n        Finish(props, `Visualizer is...going in an infinite loop so it's stopping. Rounds: ${rounds}`);\r\n        return false;\r\n    }\r\n\r\n    /* We can keep going... */\r\n    if (visited.length > 0) {\r\n        return true;\r\n    }\r\n\r\n    /* Last ditch effort: check all revisits */\r\n    if (visited.length === 0) {\r\n        if (revisit.length > 0) {\r\n            for (let i = 0; i < revisit.length; i++) {\r\n                let x = revisit[0].x;\r\n                let y = revisit[0].y;\r\n                let allowedTileType = revisit[0].allowedTileType;\r\n                revisit.shift();\r\n                FillTile(canvas, x, y, 'orange', p, w, h);\r\n                props.rounds = props.rounds + 1;\r\n                Go(x, y, props, allowedTileType);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Visited */\r\n    let newVisited = false;\r\n    if (visited.length !== pastVisited.length) {\r\n        newVisited = true;\r\n    }\r\n    props.pastVisited = clone(visited);\r\n\r\n    /* Revisit */\r\n    let newRevisit = false;\r\n    if (revisit.length !== pastRevisit.length) {\r\n        newRevisit = true;\r\n    }\r\n    props.pastRevisit = clone(revisit);\r\n\r\n    /* Completed */\r\n    let newCompleted = false;\r\n    if (completed.length !== pastCompleted.length) {\r\n        newCompleted = true;\r\n    }\r\n    props.pastCompleted = clone(completed);\r\n\r\n    /* Check if something new happened */\r\n    if (!newCompleted && !newVisited && !newRevisit) {\r\n        Finish(props, `Visualizer is done...with ${visited.length} visited, ${revisit.length} revisit, ${completed.length} completed! Rounds: ${rounds}`);\r\n        return false;\r\n    }\r\n\r\n    /* Is there still something left to check? */\r\n    if ((visited.length === 0) && (revisit.length === 0)) {\r\n        Finish(props, `Visualizer is done! Revistitable tiles: ${visited.length}, Rounds: ${rounds}`);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n};","import { RunIt } from \"../main/RunIt\";\r\nimport { Z4_TILE_CHEST, LA_ITEMS_DUNGEONONLY_SET, GetChestContentName, /*LA_SHOVEL, LA_BOW,*/ LA_POWDER, LA_ITEMS_PROGRESSIVE_SET, LA_SONG1, LA_SONG2, LA_SONG3, LA_BOOMERANG, LA_GoldenLeaf } from './../other/uConstants';\r\nimport { RandomRange, GetUniqueArrayEntries } from \"../other/utilities\";\r\n\r\nexport const Run = (data_props) => {\r\n    const { chestArr, revisit, tileTypesArr, chestStateArr, dynamicChestContent } = data_props;\r\n\r\n    while (true) {\r\n        let output = RunIt(data_props);\r\n        \r\n        if (!output.running) {\r\n\r\n            if (dynamicChestContent) {\r\n\r\n                /* How many chests could we not open? */\r\n                let availableChests = [];\r\n                revisit.forEach(o => { \r\n                    if (tileTypesArr[o.y][o.x] === Z4_TILE_CHEST) {\r\n                        availableChests.push(o); \r\n                    }\r\n                });\r\n                // console.log(availableChests);\r\n\r\n                /* Which items are required by blockages? */\r\n                let requiredItems = [];\r\n                revisit.forEach(o => {\r\n                    if (o.blockedItems && o.blockedItems.length > 0) {\r\n                        o.blockedItems.forEach(o => {\r\n                            requiredItems.push(o); \r\n                        });\r\n                    }\r\n                });\r\n                let uniqueRequiredItems = GetUniqueArrayEntries([...requiredItems]);\r\n                // console.log(requiredItems);\r\n                // console.log(uniqueRequiredItems);\r\n\r\n                //-------------------------------------------------------------------------------------------------------\r\n\r\n                /* How many of those items can we actually swap around? */\r\n                let placableItems = uniqueRequiredItems.filter(x => !LA_ITEMS_DUNGEONONLY_SET.includes(x));\r\n                let excludeItems = [LA_SONG1, LA_SONG2, LA_SONG3, LA_BOOMERANG, LA_GoldenLeaf, /*LA_SHOVEL, LA_BOW,*/ LA_POWDER];\r\n                placableItems = placableItems.filter(x => !excludeItems.includes(x));\r\n\r\n                console.log(`availableChests: ${availableChests.length} placableItems: ${placableItems.length}`);\r\n\r\n                if ((availableChests.length > 0) && (placableItems.length > 0)) {\r\n                    /* Pick the last */\r\n                    let i = availableChests.length - 1;\r\n                    let o = availableChests[i];\r\n                    let x = o.x;\r\n                    let y = o.y;\r\n                    let xx = Math.trunc(x / 10);\r\n                    let yy = Math.trunc(y / 8);\r\n\r\n                    for (let attempt = 0; attempt <= 20; attempt++) {\r\n                        let randNum = RandomRange(0, placableItems.length-1);\r\n                        let chestContent = placableItems[randNum];\r\n    \r\n                        /* If there's some chests left, prioritize more progressive items */\r\n                        if (availableChests.length <= 2) {\r\n                            let progessiveItems = LA_ITEMS_PROGRESSIVE_SET.filter(x => placableItems.includes(x));\r\n                            if (progessiveItems.length > 0) {\r\n                                randNum = RandomRange(0, progessiveItems.length-1);\r\n                                chestContent = progessiveItems[randNum];\r\n                            }\r\n                        }\r\n                        \r\n                        /* Debug */\r\n                        // if (chestContent === LA_BirdKey) {\r\n                        //     debugger;\r\n                        // }\r\n    \r\n                        console.log(`Wanted ${GetChestContentName(chestContent)}`);\r\n    \r\n                        /* Does the chest with the item we want exist? */\r\n                        let swapX;\r\n                        let swapY;\r\n                        let isGood = false;\r\n                        for (let y1 = 0; y1 < chestArr.length; y1++) {\r\n                            for (let x1 = 0; x1 < chestArr[y1].length; x1++) {\r\n                                if (!isGood) {\r\n                                    if (chestArr[y1][x1] === chestContent) {\r\n                                        if (chestStateArr[y1][x1] !== true) {\r\n                                            swapX = x1;\r\n                                            swapY = y1;\r\n                                            isGood = true;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n    \r\n                        if (isGood) {\r\n                            let val1 = chestArr[yy][xx];        // Swap into\r\n                            let val2 = chestArr[swapY][swapX];  // Swap from\r\n                            chestArr[yy][xx] = val2;\r\n                            chestArr[swapY][swapX] = val1;\r\n                            chestStateArr[yy][xx] = true;\r\n    \r\n                            console.log(`Swapped roomX: ${xx} roomY: ${yy} ${GetChestContentName(val1)} with roomX: ${swapX} roomY: ${swapY} ${GetChestContentName(val2)}`);\r\n        \r\n                            /* Run again */\r\n                            let result = Run(data_props);\r\n                            return result;\r\n                        }\r\n                        else if (attempt >= 20) {\r\n                            console.log(`Wanted ${GetChestContentName(chestContent)}, but could not find.`);\r\n                            console.log(\"Done\");\r\n                            return output.result;\r\n                        }\r\n                        else {\r\n                            console.log(`Wanted ${GetChestContentName(chestContent)}, but could not find.`);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    console.log(\"Done\");\r\n                    return output.result;\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Done\");\r\n                return output.result;\r\n            }\r\n        }\r\n    }\r\n};","import { create2DArray, HexToInt, Assigned, AddVisited } from \"../other/utilities\";\r\nimport { InitCanvasEvents } from \"../other/uCanvasEvents\";\r\nimport { StartTiles } from \"./StartTiles\";\r\nimport { Run } from \"../main/Run\";\r\nimport { \r\n    FillGameBoardFull,\r\n    FillGameBoardFilterTileIDs,\r\n    FillGameBoardFilterTileTypes,\r\n    FillGameBoardFilterMapCategories,\r\n    FillGameBoardFilterTransitions,\r\n    FillGameBoardFilterTransitionsData,\r\n    FillGameBoardFilterChests,\r\n    FileGameBoardChestItems,\r\n    FillGameBoardSprites,\r\n    FillGameBoardFilterSprites,\r\n    FillSubmap,\r\n    FillRooms,\r\n    FillTiles,\r\n    OutlineTiles,\r\n    OutlineRooms,\r\n} from \"../other/uDraw\";\r\n\r\nexport function MainSanity(allData, useVisualizerUI = false, shuffleChests = false) {\r\n        \r\n    //===================================================================================================\r\n    //\r\n    //                                          Canvas\r\n    //\r\n    //===================================================================================================\r\n\r\n    let canvas;\r\n\r\n    if (useVisualizerUI) {\r\n        canvas = document.getElementById(\"canvas\");\r\n    }\r\n    else {\r\n        canvas = document.createElement('canvas');\r\n    }\r\n\r\n    let p = 0; // Padding\r\n    let w = 4;\r\n    let h = 4;\r\n\r\n    let GAMEBOARD_ROOMS_X = 0x20;\r\n    let GAMEBOARD_ROOMS_Y = 0x20;\r\n    let ROOM_SIZE_X = 10;\r\n    let ROOM_SIZE_Y = 8;\r\n\r\n    let maxXSquares = (GAMEBOARD_ROOMS_X * ROOM_SIZE_X);\r\n    let maxYSquares = (GAMEBOARD_ROOMS_Y * ROOM_SIZE_Y);\r\n\r\n    canvas.width = (p * 2) + (maxXSquares * w) + 1;\r\n    canvas.height = (p * 2) + (maxYSquares * h) + 1;\r\n\r\n    //===================================================================================================\r\n    //\r\n    //                                          DATA\r\n    //\r\n    //===================================================================================================\r\n\r\n    let chestArr = allData.chestSquares;\r\n    let eventsArr = allData.events;\r\n    let roomIDArr = allData.roomIDArr;\r\n    let subMapIDArr = allData.subMapIDsArr;\r\n    let spritesArr = allData.sprites;\r\n    let tileIDsArr = allData.tileIDs;\r\n    let tileTypesArr = allData.tileTypes;\r\n    let uwIDArr = allData.uwIDArr;\r\n    let mapCategoriesArr = allData.mapCategories;\r\n    let roomTypesArr = allData.roomTypes;\r\n    let connectorTypesArr = allData.connectorTypes;\r\n    let transitionsArr = allData.isTransition;\r\n    let transitionsDataArr = allData.transitions;\r\n    let shovelSlotItem = allData.shovelSlotItem;\r\n    let bowSlotItem = allData.bowSlotItem;\r\n\r\n    //===================================================================================================\r\n    //\r\n    //                                          STATE\r\n    //\r\n    //===================================================================================================\r\n\r\n    let stateArr = create2DArray(tileTypesArr.length, tileTypesArr[0].length, 0);    \r\n    let spriteStateArr = create2DArray(spritesArr.length, spritesArr[0].length, 0);\r\n    let eventsStateArr = create2DArray(eventsArr.length, eventsArr[0].length, 0);\r\n    let chestStateArr = create2DArray(eventsArr.length, eventsArr[0].length, !shuffleChests);   // allowChests\r\n\r\n    //===================================================================================================\r\n    //\r\n    //                                          ITEMS\r\n    //\r\n    //===================================================================================================\r\n\r\n    const NewItems = {\r\n        shield : 0,\r\n        sword : 0,\r\n        bomb : 0,\r\n        powder : 0,\r\n        feather : 0,\r\n        powerBracelet : 0,\r\n        boots : 0,\r\n        hookshot : 0,\r\n        fireRod : 0,\r\n        boomerang : 0,\r\n        ocarina : 0,\r\n        mushroom : 0,\r\n        bow : 0,\r\n        shovel : 0,\r\n        flippers : 0,\r\n\r\n        other : {\r\n            rupees : 0,\r\n            hookshotNote : 0,\r\n            gel : 0,\r\n            heartPieces : 0,\r\n            seaShell : 0,\r\n            medicine : 0,\r\n        },\r\n\r\n        songs : {\r\n            song1 : 0,\r\n            song2 : 0,\r\n            song3 : 0,\r\n        },\r\n\r\n        keys : {\r\n            tailKey : 0,\r\n            slimeKey : 0,\r\n            anglarKey : 0,\r\n            faceKey : 0,\r\n            birdKey : 0,\r\n            goldenLeaves : 0,\r\n        },\r\n\r\n        trading : {\r\n            yoshiDoll : 0,\r\n            dogFood : 0,\r\n            ribbon : 0,\r\n            bananas : 0,\r\n            stick : 0,\r\n            honeycomb : 0,\r\n            pineapple : 0,\r\n            hibiscus : 0,\r\n            letter : 0,\r\n            broom : 0,\r\n            fishingHook : 0,\r\n            necklace : 0,\r\n            scale : 0,\r\n            magnifyingLens : 0,\r\n        },\r\n\r\n        flags : {\r\n            bowwow : 0,\r\n            marin : 0,\r\n            ghost : 0,\r\n            rooster : 0,\r\n            racoonTarin : 0,\r\n            mushroomFlag : 0,\r\n            richard : 0,\r\n            bowwowReturned : 0,\r\n            marinReturned : 0,\r\n            D7Pillar : 0,\r\n            tailKeyUsed : 0,\r\n            slimeKeyUsed : 0,\r\n            anglarKeyUsed : 0,\r\n            faceKeyUsed : 0,\r\n            birdKeyUsed : 0,\r\n            gameCompleted : 0,\r\n            MStalfosKills : 0,\r\n            castleButtonPressed : 0,\r\n            fiveChestRoomOpened : 0,\r\n        },\r\n\r\n        debug : {\r\n            chestsOpened : 0\r\n        },\r\n            \r\n        dungeonItems : [\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n            {\r\n                map : 0,\r\n                compass : 0,\r\n                owlBeak : 0,\r\n                nKey : 0,\r\n                smallKey : 0,\r\n                instrument : 0,\r\n                bossKilled : 0,\r\n                smallKeyUsed : 0,\r\n                smallKeyFound : 0,\r\n            },\r\n        ]\r\n    };\r\n\r\n    /* Items */\r\n    if (useVisualizerUI) {\r\n        if (document.getElementById(\"ItemShield\").checked) NewItems.shield = 1;\r\n        if (document.getElementById(\"ItemShield2\").checked) NewItems.shield = 2;\r\n        if (document.getElementById(\"ItemSword\").checked) NewItems.sword = 1;\r\n        if (document.getElementById(\"ItemBomb\").checked) NewItems.bomb = 1;\r\n        if (document.getElementById(\"ItemPowder\").checked) NewItems.powder = 1;\r\n        if (document.getElementById(\"ItemFeather\").checked) NewItems.feather = 1;\r\n        if (document.getElementById(\"ItemPowerBracelet\").checked) NewItems.powerBracelet = 1;\r\n        if (document.getElementById(\"ItemPowerBracelet2\").checked) NewItems.powerBracelet = 2;\r\n        if (document.getElementById(\"ItemBoots\").checked) NewItems.boots = 1;\r\n        if (document.getElementById(\"ItemFlippers\").checked) NewItems.flippers = 1;\r\n        if (document.getElementById(\"ItemHookshot\").checked) NewItems.hookshot = 1;\r\n        if (document.getElementById(\"ItemFirerod\").checked) NewItems.fireRod = 1;\r\n        if (document.getElementById(\"ItemBoomerang\").checked) NewItems.boomerang = 1;\r\n        if (document.getElementById(\"ItemOcarina\").checked) NewItems.ocarina = 1;\r\n        if (document.getElementById(\"ItemBow\").checked) NewItems.bow = 1;\r\n        if (document.getElementById(\"ItemShovel\").checked) NewItems.shovel = 1;\r\n    \r\n        if (document.getElementById(\"ItemTailKey\").checked) NewItems.keys.tailKey = 1;\r\n        if (document.getElementById(\"ItemSlimeKey\").checked) NewItems.keys.slimeKey = 1;\r\n        if (document.getElementById(\"ItemAnglarKey\").checked) NewItems.keys.anglarKey = 1;\r\n        if (document.getElementById(\"ItemFaceKey\").checked) NewItems.keys.faceKey = 1;\r\n        if (document.getElementById(\"ItemBirdKey\").checked) NewItems.keys.birdKey = 1;\r\n    \r\n        if (document.getElementById(\"ItemNecklace\").checked) NewItems.trading.necklace = 1;\r\n        if (document.getElementById(\"ItemRooster\").checked) NewItems.flags.rooster = 1;\r\n    }\r\n\r\n    //===================================================================================================\r\n    //\r\n    //                                           FILL\r\n    //\r\n    //===================================================================================================\r\n\r\n    let amountDraw;\r\n    let maxRounds;\r\n    let FillGameBoard;\r\n    let FillSprites;\r\n    let filterTileID; \r\n    let filterTileType;\r\n    let sanity;\r\n    let filterMapCategory;\r\n    let filterSpriteID;\r\n    let ShowTransitions;\r\n    let ShowTransitionsData;\r\n    let GameBoardOpacity;\r\n    let ShowChests; \r\n    let ShowChestContent; \r\n    let disableTransitions;\r\n    let disableRoomChange;\r\n    let startX;\r\n    let startY;\r\n\r\n    if (useVisualizerUI) {\r\n        amountDraw = parseInt(document.getElementById(\"AmountDraw\").value);\r\n        maxRounds = parseInt(document.getElementById(\"MaxRounds\").value);\r\n        FillGameBoard = document.getElementById(\"FillGameBoardChecked\").checked;\r\n        FillSprites = document.getElementById(\"FillSpritesChecked\").checked;\r\n        filterTileID = document.getElementById(\"FilterTileID\").value !== '' ? HexToInt(document.getElementById(\"FilterTileID\").value) : undefined; \r\n        filterTileType = document.getElementById(\"FilterTileType\").value !== '' ? parseInt(document.getElementById(\"FilterTileType\").value) : undefined;\r\n        sanity = document.getElementById(\"Sanity\").checked;\r\n        filterMapCategory = document.getElementById(\"FilterMapCategory\").value !== '' ? parseInt(document.getElementById(\"FilterMapCategory\").value) : undefined;\r\n        filterSpriteID = document.getElementById(\"FilterSpriteID\").value !== '' ? HexToInt(document.getElementById(\"FilterSpriteID\").value) : undefined;\r\n        ShowTransitions = document.getElementById(\"ShowTransitions\").checked;\r\n        ShowTransitionsData = document.getElementById(\"ShowTransitionsData\").checked;\r\n        GameBoardOpacity = document.getElementById(\"GameboardOpacity\").value !== '' ? document.getElementById(\"GameboardOpacity\").value : 0;\r\n        ShowChests = document.getElementById(\"ShowChests\").checked; \r\n        ShowChestContent = document.getElementById(\"ShowChestContent\").checked; \r\n        disableTransitions = document.getElementById(\"DisableTransitions\").checked;\r\n        disableRoomChange = document.getElementById(\"DisableRoomChange\").checked;\r\n        startX = parseInt(document.getElementById(\"DebugStartX\").value);\r\n        startY = parseInt(document.getElementById(\"DebugStartY\").value);\r\n    }\r\n    else {\r\n        amountDraw = 1000;\r\n        maxRounds = 100000;\r\n        FillGameBoard = false;\r\n        FillSprites = false;\r\n        filterTileID = undefined; \r\n        filterTileType = undefined;\r\n        sanity = true;\r\n        filterMapCategory = undefined;\r\n        filterSpriteID = undefined;\r\n        ShowTransitions = false;\r\n        ShowTransitionsData = false;\r\n        GameBoardOpacity = 0;\r\n        ShowChests = false; \r\n        ShowChestContent = false; \r\n        disableTransitions = false;\r\n        disableRoomChange = false;\r\n        startX = 0;\r\n        startY = 0\r\n    }\r\n\r\n    /* Fill */\r\n    if (useVisualizerUI) {\r\n        if (FillGameBoard) FillGameBoardFull(canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, GameBoardOpacity);\r\n        if (Assigned(filterTileID)) FillGameBoardFilterTileIDs(canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, tileIDsArr, filterTileID);\r\n        if (Assigned(filterTileType)) FillGameBoardFilterTileTypes(canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, filterTileType);\r\n        if (Assigned(filterMapCategory)) FillGameBoardFilterMapCategories(canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, mapCategoriesArr, filterMapCategory);\r\n        if (ShowTransitions) FillGameBoardFilterTransitions(canvas, p, w, h, maxXSquares, maxYSquares, transitionsArr);\r\n        if (ShowTransitionsData) FillGameBoardFilterTransitionsData(canvas, p, w, h, maxXSquares, maxYSquares, transitionsDataArr);\r\n        if (ShowChests) FillGameBoardFilterChests(canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr);\r\n        if (ShowChestContent) FileGameBoardChestItems(canvas, p, w, h, maxXSquares, maxYSquares, tileTypesArr, chestArr, uwIDArr, roomIDArr, shovelSlotItem, bowSlotItem);\r\n        if (FillSprites) FillGameBoardSprites(canvas, p, w, h, maxXSquares, maxYSquares, spritesArr);\r\n        if (Assigned(filterSpriteID)) FillGameBoardFilterSprites(canvas, p, w, h, maxXSquares, maxYSquares, spritesArr, filterSpriteID);\r\n\r\n        /* Extra fills for fun */\r\n        if (document.getElementById(\"FillSubmap\").checked) FillSubmap(canvas, p, w, h);\r\n        if (document.getElementById(\"FillRooms\").checked) FillRooms(canvas, p, w, h, GAMEBOARD_ROOMS_X, GAMEBOARD_ROOMS_Y);\r\n        if (document.getElementById(\"FillTiles\").checked) FillTiles(canvas, p, w, h, maxXSquares, maxYSquares);\r\n        if (document.getElementById(\"OutlineTiles\").checked) OutlineTiles(canvas, p, w, h, maxXSquares, maxYSquares);\r\n        if (document.getElementById(\"OutlineRooms\").checked) OutlineRooms(canvas, p, w, h, GAMEBOARD_ROOMS_X, GAMEBOARD_ROOMS_Y, maxYSquares, maxXSquares);\r\n\r\n        /* Events */\r\n        InitCanvasEvents(canvas, tileTypesArr, tileIDsArr, stateArr, chestArr, spritesArr, uwIDArr, roomIDArr, w, h);\r\n    }\r\n\r\n    /* Do Sanity? */\r\n    if (!sanity) return;\r\n\r\n    //============================================================================================================\r\n    //\r\n    //                                 ######  ########    ###    ########  ######## \r\n    //                                ##    ##    ##      ## ##   ##     ##    ##    \r\n    //                                ##          ##     ##   ##  ##     ##    ##    \r\n    //                                 ######     ##    ##     ## ########     ##    \r\n    //                                      ##    ##    ######### ##   ##      ##    \r\n    //                                ##    ##    ##    ##     ## ##    ##     ##    \r\n    //                                 ######     ##    ##     ## ##     ##    ##  \r\n    //\r\n    //============================================================================================================\r\n\r\n    let data_props = {\r\n        /* Board */\r\n        maxXSquares : maxXSquares,\r\n        maxYSquares : maxYSquares,\r\n        \r\n        /* Data */\r\n        chestArr : chestArr,\r\n        eventsArr : eventsArr,\r\n        roomIDArr : roomIDArr,\r\n        subMapIDArr : subMapIDArr,\r\n        spritesArr : spritesArr,\r\n        tileIDsArr : tileIDsArr,\r\n        tileTypesArr : tileTypesArr,\r\n        uwIDArr : uwIDArr,\r\n        mapCategoriesArr : mapCategoriesArr,\r\n        roomTypesArr : roomTypesArr,\r\n        connectorTypesArr : connectorTypesArr,\r\n        transitionsArr : transitionsArr,\r\n        transitionsDataArr : transitionsDataArr,\r\n\r\n        /* State */\r\n        stateArr : stateArr,\r\n        spriteStateArr : spriteStateArr,\r\n        eventsStateArr : eventsStateArr,\r\n        chestStateArr : chestStateArr,\r\n\r\n        /* Player */\r\n        NewItems : NewItems,\r\n        shovelSlotItem : shovelSlotItem,\r\n        bowSlotItem : bowSlotItem,\r\n\r\n        /* Logic */\r\n        visited : [],\r\n        revisit : [],\r\n        completed : [],\r\n\r\n        /* Canvas */\r\n        canvas : canvas,\r\n        p : p,\r\n        w : w,\r\n        h : h,\r\n        amountDraw : amountDraw,\r\n        maxRounds : maxRounds,\r\n        pastVisited : [],\r\n        pastRevisit : [],\r\n        pastCompleted : [],\r\n        visitedAmount : [],\r\n        visitedCheckCount : 0,\r\n        rounds : 0,\r\n        gameBoardOpacity : GameBoardOpacity,\r\n\r\n        t0 : performance.now(),\r\n        disableTransitions : disableTransitions,\r\n        disableRoomChange : disableRoomChange,\r\n        dynamicChestContent : shuffleChests,\r\n    };\r\n\r\n    if ((startX === 0) && (startY === 0)) {\r\n        StartTiles(data_props);\r\n    }\r\n    else {\r\n        AddVisited(startX, startY, data_props);\r\n    }\r\n\r\n    //============================================================================================================\r\n    //\r\n    //                                 ######  ########    ###    ########  ######## \r\n    //                                ##    ##    ##      ## ##   ##     ##    ##    \r\n    //                                ##          ##     ##   ##  ##     ##    ##    \r\n    //                                 ######     ##    ##     ## ########     ##    \r\n    //                                      ##    ##    ######### ##   ##      ##    \r\n    //                                ##    ##    ##    ##     ## ##    ##     ##    \r\n    //                                 ######     ##    ##     ## ##     ##    ##  \r\n    //\r\n    //============================================================================================================\r\n\r\n    let result = Run(data_props);\r\n    return result;\r\n};","import * as RandomizerFunctions from './Randomize/index';\r\nimport { SetChecksum2 } from \"../data/Read/ReadRom\";\r\nimport { state as origState } from \"./Client/state\";\r\nimport seedrandom from \"seedrandom\";\r\nimport VisualizerData from \"./Visualizer/VisualizerData\";\r\nimport { MainSanity } from \"./Visualizer/client/init/Setup\";\r\nimport { SetChestContent } from \"../data/Read/Chests\";\r\nimport { GetUWID, GetRoomID, RoomExists, /*GBStringify*/ } from \"../utilities\";\r\nimport { FileSelectCode } from \"./Randomize/index\";\r\n\r\nasync function Generate(file, seed, state) {\r\n    let f = file;\r\n\r\n    try {\r\n        console.log(\"Generating...\");\r\n\r\n        seedrandom(seed, { global: true });\r\n\r\n        /* DEVELOPER */\r\n        if (state.CoreChanges.value) RandomizerFunctions.CoreChanges(f);\r\n\r\n        for (let [key, value] of Object.entries(state)) {\r\n            if (value.value) {\r\n                // console.log(key);\r\n\r\n                switch (key) {\r\n                    case \"CoreChanges\": break;\r\n                    default: \r\n                        // console.log('Running ' + key)\r\n                        if (typeof origState[key].fn !== 'undefined') {\r\n                            if (!origState[key].ignoreFlags) {\r\n                                /* Advance the random generator */\r\n                                let randNum = Math.random(); // eslint-disable-line no-unused-vars \r\n                            }\r\n                            await origState[key].fn(f, value.value);\r\n                            // console.log('Running ' + key + '...done');\r\n                        };\r\n                }\r\n            }\r\n        }\r\n\r\n        SetChecksum2(f);\r\n        if (state.FileSelectCode) {\r\n            FileSelectCode(f);\r\n        }\r\n\r\n        let isGood = true;\r\n\r\n        if (state.SanityChecks) {\r\n            /* Get the visualizer data */\r\n            let output = VisualizerData(f);\r\n            let data_props = output.value;\r\n            let showVisualizer = false;\r\n            let doShuffleChests = state.ShuffleChests.value;\r\n            isGood = MainSanity(data_props, showVisualizer, doShuffleChests); \r\n\r\n            /* Put in the new chest shuffle */\r\n            let chestArr = data_props.chestSquares;\r\n            for (let y = 0; y < 0x20; y++) {\r\n                for (let x = 0; x < 0x20; x++) {\r\n                    let xx = x * 10;\r\n                    let yy = y * 8;\r\n                    let b = chestArr[y][x];\r\n                    let uwID = GetUWID(xx, yy, data_props.uwIDArr);\r\n                    let roomID = GetRoomID(xx, yy, data_props.roomIDArr);\r\n                    if (RoomExists(uwID, roomID)) {\r\n                        SetChestContent(f, uwID, roomID, b);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /* Rewrite the checksum */\r\n            SetChecksum2(f);\r\n            if (state.FileSelectCode) {\r\n                FileSelectCode(f);\r\n            }\r\n        }\r\n\r\n        if (isGood) {\r\n            console.log(\"Passed\");\r\n\r\n            return {\r\n                status: \"Passed\",\r\n                file : f\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                status: \"Failed\",\r\n                file : f\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        alert(e);\r\n        console.log(\"[ERROR] Failed\");\r\n        console.error(e);\r\n\r\n        return {\r\n            status: \"Failed\",\r\n            file : f\r\n        }\r\n    }\r\n};\r\n\r\nexport default Generate;","import React from 'react';\r\nimport Client from './Client';\r\nimport Generate from \"../Generate\";\r\nimport { state, Z4_VERSION, DeveloperMode } from \"./state\";\r\nimport { RandomRange } from \"../../utilities\";\r\n// import Debug from \"../../components/debug/App\";\r\n// import Visualizer from \"../../data/Visualizer/client/UI/App\";\r\n\r\nconst App = () => {\r\n    async function onGenerate(file, fileName, seed, flags, state, finishFn) {    \r\n        let attempt = 1;\r\n        let maxAttempts = 5;\r\n\r\n        while (attempt <= maxAttempts) {\r\n            /* Clone the file so we can reuse the same inputted file for more seed generations */\r\n            let f = new Uint8Array(file);\r\n\r\n            if (attempt > 1) {\r\n                seed = RandomRange(0, 2000000);\r\n            }\r\n\r\n            let result = await Generate(f, seed, state);\r\n\r\n            if (result.status === \"Passed\") {\r\n                onDownloadFile(f, fileName, seed, flags, Z4_VERSION);\r\n                break;\r\n            }\r\n            else {\r\n                console.error(`onGenerate failed attempt ${attempt}.`);\r\n                attempt++;\r\n            }\r\n\r\n            if (attempt > maxAttempts) {\r\n                alert('Current seed failed with max attempt.  Please try another seed.');\r\n                if (DeveloperMode) {\r\n                    onDownloadFile(f, fileName, seed, flags, Z4_VERSION);\r\n                }\r\n            }\r\n        }\r\n\r\n        finishFn();\r\n    };\r\n\r\n    const onDownloadFile = (file, fileName, seed, flags, version) => {\r\n        const downloadBlob = function(data, fileName, mimeType) {\r\n            var blob, url;\r\n            blob = new Blob([data], {\r\n                type: mimeType\r\n            });\r\n            url = window.URL.createObjectURL(blob);\r\n            downloadURL(url, fileName);\r\n            setTimeout(function() {\r\n                return window.URL.revokeObjectURL(url);\r\n            }, 1000);\r\n        };\r\n\r\n        const downloadURL = function(data, fileName) {\r\n            var a;\r\n            a = document.createElement('a');\r\n            a.href = data;\r\n            a.download = fileName;\r\n            document.body.appendChild(a);\r\n            a.style = 'display: none';\r\n            a.click();\r\n            a.remove();\r\n        };\r\n\r\n        downloadBlob(file, `Z4R_${version}_${seed}_${flags}.gbc`, 'application/octet-stream');\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Client \r\n                userState={state}\r\n                onGenerate={onGenerate}\r\n            />\r\n\r\n            {/* <Debug />\r\n\r\n            <Visualizer /> */}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/App.css';\nimport * as serviceWorker from './app/serviceWorker';\n// import App from './app/App';\n\n// import App from './components/visualizer/App';\nimport App from './data/Client/App';\n// import Debug from './components/debug/App';\n\nReactDOM.render(\n//   <React.StrictMode>\n    <App />,\n//   </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}